{"version":3,"sources":["reportWebVitals.ts","store/storeHooks.ts","components/structure/ContentContainer.tsx","theme/themeConstants.ts","components/header/Header.tsx","theme/commonClasses.ts","components/panel/Panel.tsx","components/icons/TokenIcon.tsx","pages/LendingNetworkPage/MarketsTab/markets/AssetPanelRow.tsx","pages/LendingNetworkPage/MarketsTab/markets/MarketsPanel.tsx","pages/LendingNetworkPage/MarketsTab/markets/MarketsSection.tsx","components/AnimatedNumberText/AnimatedNumberText.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalanceHeadline.tsx","pages/LendingNetworkPage/MarketsTab/overview/NetApy.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalancesAndApy.tsx","pages/LendingNetworkPage/MarketsTab/overview/BorrowLimitBar.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalancesTotal.tsx","pages/LendingNetworkPage/MarketsTab/overview/BorrowOverview.tsx","pages/LendingNetworkPage/MarketsTab/MainLendingNetworkTab.tsx","components/modals/MarketInteractionModal/base/ModalActionButton.tsx","components/modals/MarketInteractionModal/base/rates/BaseRates.tsx","components/modals/MarketInteractionModal/base/rates/ActionRates.tsx","components/modals/MarketInteractionModal/base/rates/BorrowLimitRates.tsx","components/modals/txWaitingModal/TxWaitingModal.tsx","components/modals/MarketInteractionModal/base/MarketInteractionModal.tsx","constants/ethereumErrorCodes.ts","components/modals/txWaitingModal/txWaitingHooks.ts","components/modals/MarketInteractionModal/marketInteractionModalHooks.ts","components/modals/MarketInteractionModal/base/mainModalMessage/MainModalMessage.tsx","components/modals/MarketInteractionModal/SupplyModal.tsx","components/modals/MarketInteractionModal/BorrowModal.tsx","components/modals/collateralModal/CollateralModal.tsx","components/modals/collateralModal/ConnectedCollateralModal.tsx","components/modals/collateralModal/collateralModalHooks.ts","components/modals/incentiveModal/IncentiveModal.tsx","components/modals/incentiveModal/ConnectedIncentiveModal.tsx","components/modals/incentiveModal/incentiveModalHooks.ts","pages/LendingNetworkPage/LendingNetworkPage.tsx","pages/AllNetworksPage/NetworkListItem.tsx","pages/AllNetworksPage/NetworksList.tsx","pages/AllNetworksPage/AllNetworksPage.tsx","pages/Main.tsx","App.tsx","theme/Theme.tsx","services/cryptoWalletConnectionService/CryptoWalletConnectionService.ts","configs.ts","services/networkActions.ts","constants/constantAddresses.ts","services/lendingNetworksService/lendingNetworksParams.ts","services/lendingNetworksService/LendingNetworksService.ts","services/contractsIntegration/contractsIntegrationUtils.ts","services/contractsIntegration/UniswapAnchoredView/UniswapAnchoredViewService.ts","ethereumConnection/ethereumConnection.ts","services/contractsIntegration/ComptrollerService/ComptrollerService.ts","services/contractsIntegration/erc20Service/Erc20Service.ts","services/contractsIntegration/erc20Service/Erc20BuilderService.ts","services/contractsIntegration/cTokensService/CErc20Service.ts","services/contractsIntegration/cTokensService/CEtherService.ts","services/contractsIntegration/cTokensService/CTokensBuilderService.ts","constants/supportedTokensPerChain.ts","store/CryptoWalletConnectionStore.ts","store/AccountStore.ts","services/lendingNetworksService/ILendingNetworksService.ts","store/multiInstanceStores/SingleCTokenStore.ts","store/multiInstanceStores/SingleLNStore.ts","store/LendingNetworksStore.ts","store/ModalsStore.ts","services/contractsIntegration/CompoundLensService/CompoundLensService.ts","constants/chainConstants.ts","store/SystemStore.ts","store/storesInitialization.ts","AppWrapper.tsx","services/Services.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStores","React","useContext","MobXProviderContext","useAccountStore","accountStore","useLendingNetworksStore","lendingNetworksStore","useSystemStore","systemStore","useModalsStore","modalsStore","useActiveLendingNetworkStore","activeLNStore","useStyles","makeStyles","theme","contentContainer","margin","paddingRight","paddingLeft","maxWidth","ContentContainer","memo","props","children","rest","classes","className","BRAND_MAIN_COLOR","AFFIRMATIVE_GREEN_COLOR","BACKGROUND_DARK_COLOR","BACKGROUND_LIGHT_COLOR","TEXT_ON_DARK","TEXT_ON_LIGHT","GRAYISH_TEXT","header","padding","backgroundColor","palette","background","default","minHeight","alignedRow","display","flexDirection","alignItems","logoLink","minWidth","height","backgroundImage","process","backgroundRepeat","backgroundSize","logoLinkText","fontWeight","color","Color","rgb","primary","main","darken","hex","textDecoration","fontSize","textAlign","transition","borderColor","lnLinkText","actions","justifyContent","headerButtonLike","lighten","border","borderRadius","light","tokenBalance","cursor","letterSpacing","textTransform","account","marginLeft","tokenIcon","width","iconComp","icon","flexShrink","backgroundPosition","logoLetter","letterO","letterL","letterA","Header","observer","address","cryptoWalletConnectionStore","cryptoWalletIntegrationStore","activeLn","walletText","isConnectedToWallet","mainAddress","substring","length","hasActiveLn","activeLnName","name","linkToLnPage","lnHomePage","incentiveTokenBalance","compBalanceUnits","Grid","container","direction","style","item","xs","sm","to","clsx","target","href","Hidden","xsDown","onClick","showIncentiveModal","toFixed","toLocaleString","askToConnect","useCommonClasses","mobileHide","breakpoints","down","mobileOnly","up","label","fontStyle","textRight","textCenter","panel","boxShadow","Panel","token","transform","TokenIcon","symbol","extraClasses","commonClasses","classesForSpan","useMemo","safeExtraClasses","a","textRransform","asset","flexWrap","borderBottom","borderLeft","list_icon","identity","identity_icon","marginRight","identity_balance","flex","overflow","balance","whiteSpace","textOverflow","balanceSubtitle","marginTop","AssetPanelRow","marketType","assetSummary","onCollateralableChange","onAssetSelected","cTokenStore","baseAssetAddress","activeLN","cTokensStores","find","underlyingAssetAddress","useCTokenStoreByBaseAsset","isCollaterable","borrowApy","borrowApyInPercentages","supplyApy","supplyApyInPercentages","usdCashLiquidity","cTokenCashInUSD","walletBalanceInUnits","accountUnderlyingBalanceInUnits","liquidityUSDInScale","amount","scaleUnit","scaleDivider","units","amountToSumInScale","supplyInUnits","accountSupplyInUnits","borrowInUnits","accountBorrowInUnits","isSupply","ApyToDisplay","unitsToDisplay","unitsText","showActionUnits","onCollateralSwitch","useCallback","event","checked","onAssetInteractionRequested","hasBeenInitialized","console","log","collateralLiquidityOrLoading","collateralOrLiquidity","Switch","onChange","e","stopPropagation","parseFloat","Skeleton","animation","panelHeader","flexFlow","zeroMargin","assetsList","panelLabels","assets","MarketsPanel","assetsInMarket","userBalancesInUnits","marketsUserIsIn","map","unitsInWallet","interfaceContainer","row","marketsColumn","flexBasis","MarketsSection","useState","error","lnStore","newCollaterableValue","showCollateralModal","onSupplyAssetSelected","cTokenMeta","undefined","assetParameters","baseAssetsToCTokenStore","get","assetsParams","assetParam","showSupplyModal","onBorrowAssetSelected","showBorrowModal","Typography","symbolsToUnits","standardSumFormat","n","AnimatedNumberText","value","formatValue","headline","textLeft","supply","borrow","BalanceHeadline","titleText","sum","alignLeft","netApyWrapper","position","left","netApy","netApyDescription","top","right","bottom","netApyDescription_Active","label_active","headline_inactive","headline_active","NetApy","totalYearlyChangeUsd","hoverTargetRef","useRef","isHovering","useHover","isEarning","apyDirectionMessage","earnedOrPaid","netApyStringified","totalYearlyChangeUsdStringified","labelText","headlineText","ref","viewBox","d","stroke","fill","content","alignMiddle","column","BalancesAndApy","borrowBalanceUsd","supplyBalanceUsd","smUp","limitBar","limitBarLabel","progressBarWrapper","progress_bar_green","progress","dark_clear","thin","progress_bar_percent_label","p","float","small","progress_bar_hover_space","BorrowLimitBar","usedBorrowPercentage","collateralPotentialInUSD","role","aria-valuemin","aria-valuemax","balancesTotal","BalancesTotal","hero","marginBottom","BorrowOverview","totalAccountSupplyBalanceUsd","totalAccountBorrowBalanceUsd","MainLendingNetworkTab","ModalActionButton","text","disabled","Button","variant","fullWidth","rateRow","bottomBorder","heavyBottomBorder","symbolIcon","valueText","BaseRates","title","subTitle","rateRows","index","isLast","predictedValue","tokenSymbol","displayPredictedValues","valueSuffix","ActionRates","actionName","assetSymbol","assetSupplyApy","distributionAssetSymbol","distributionAssetApy","BorrowLimitRates","limitOrBalance","borrowLimitUsd","borrowLimitUsedPercentage","predictedBorrowLimitUsd","predictedBorrowLimitPercentage","note","TOP_DISTANCE_REM","modal","txWaitingPanel","upperRightCorner","upperLeftCorner","messageContainer","paddingBottom","TxWaitingModal","open","closeModal","txWaitingStage","useTheme","isWaitingForUserApproval","message","Modal","onBackdropClick","Fade","in","IconButton","type","marketInteractionPanel","tabBody","paddingTop","mix","MarketInteractionModal","messageOrInput","inputActionButtonText","onInputActionButtonPressed","showInputActionButton","inputActionButtonActive","actionAssetSymbol","actionAssetName","currentTabIndex","onTabIndexChange","tab0Title","tab1Title","actionApy","distributionApy","showBorrowLimit","showPredictedBorrowLimits","currentBorrowLimit","borrowLimitAfterChange","usedBorrowLimitPercentage","usedBorrowLimitPercentageAfterChange","borrowLimitNote","actionButtonActive","actionButtonText","actionButtonDisabledText","actionButtonOnClick","waitingForUserApproval","footerMessagesPayloads","waitingForTxConfirmation","isBorrow","maxHeight","JSON_RPC_ERROR_CODES","userRejectedRequest","unauthorized","unsupportedMethod","useTxWaitingStateExplicit","setWaitingForUserApproval","setWaitingForTxConfirmation","useTxWaitingLogicExplicit","txCreatingFunction","contractTx","wait","receipt","code","useMarketInteractionModalBase","assetAddressToParamsMap","assetBaseAddressToParams","Map","assetBaseAddress","assetParams","isNativeCoin","nativeCoinSymbol","cToken","cTokenAddress","supplyTokenSymbol","supplyTokenName","distributionTokenSymbol","distributionAssetParams","walletBalance","hasWalletBalance","needToApprove","pricePerUnitUsd","underlyingUsdPrice","collateralFactorInUnits","maximillionAddress","currentLiquidityCashUsd","liquidityUsd","priceCalculationDecimals","currentLiquidityUsd","hasAvailableLiquidity","liquidityInAssetUnits","useMarketInteractionModalTabsState","activeTabIndex","setActiveTabIndex","useMarketInteractionActiveTabState","useOnEnableClicked","wrappedEnableTx","approveErc20Usage","ethers","constants","MaxUint256","useCalculateChangeInBorrowLimits","currentBorrowLimitUsd","actionInUnits","unitPriceInUsd","pricePrecision","priceSensitivizer","buildSensitivizer","actionEffectInUsd","collateralValueOfActionEffect","actionLeadsToShortfall","useCalculateChangeInBorrowBalance","borrowBalanceAfterChange","Math","abs","sensitivity","price","sensitivizePrice","largeIcon","fadeIn","MainModalMessage","subMessage","SupplyModal","isWithdraw","onEnableClicked","isAskingToWithdrawAll","setIsAskingToWithdrawAll","supplyInputValue","setSupplyInputValue","withdrawInputValue","setWithdrawInputValue","useEffect","clearStateBeforeClose","inputComponent","Input","inputProps","appearance","sanitizeNumericInput","hasApprovedERC20","hasAnyAllowance","currentSupplyBalanceInUnits","currentSupplyBalanceInOTokens","accountSupplyBalanceUsd","accountSupplyInOTokensRaw","BigNumber","from","hasSupplyBalance","hasBorrowBalance","onAskToWithdrawAllToggleClicked","createWithdrawAllTx","withdrawFromMarketByOTokens","underlyingDecimals","toString","wrappedSupplyTx","supplyToMarket","utils","parseUnits","wrappedWithdrawTx","withdrawFromMarket","wrappedWithdrawAllTx","onSupplyClicked","onWithdrawClicked","messageOrInputComponent","footerMessagePayloads","tokenAmount","canSupply","canWithdraw","commonPayloadPart","marketModalStatePayloadForSupplyTab","isSupplyInputValueValid","isOfferingMoreThanWalletBalance","actionButtonTextForSupply","activeButtonActive","actionButtonCbForSupply","reasonForNotBeingAbleToWithdraw","marketModalStatePayloadForWithdrawTab","withdrawButtonActive","withdrawInputValid","isRequestingMoreThanSuppliedBalance","statePerTabPayload","marketModalStatePayload","stringValueOfNumericInput","safeString","charAt","parsedAsFloat","isNaN","BorrowModal","isRepay","isRepayingMax","setIsRepayingMax","borrowInputValue","setBorrowInputValue","repayInputValue","setRepayInputValue","currentBorrowBalance","needsToButNotYetApproved","repayAmount","wrappedBorrowTx","borrowFromMarket","wrappedRepayTx","repayToMarket","onBorrowClicked","onBorrowMaxSafeClicked","amountLeftToSafe","safeAmountInUsd","safeBorrowInUnits","getUnitsForUsdValue","onRepayClicked","cTokenCashInUnits","cTokenCashInUsd","repayIsZero","hasEnoughToRepayAll","onSetRepayToMaxClicked","maxPossibleBorrow","max","marketModalStatePayloadForBorrowTab","isRequestingMoreThanCanBorrow","isRequestingMoreThanMarketLiquidity","reasonForNotBeingAbleToBorrow","SAFE_BORROW_FACTOR","marketModalStatePayloadForRepayTab","isOfferingMoreThanHasBorrowed","canRepay","actionButtonCbForRepay","reasonForNotBeingAbleToRepay","actionButtonTextForRepay","collateralInteractionPanel","CollateralModal","ConnectedCollateralModal","underlyingName","underlyingSymbol","useCollateralModalState","effectiveUnits","wrappedTxBuildingFunction","useTxWaitingLogic","enterMarketByCTokenAddress","exitMarketByCTokenAddress","onActionButtonClicked","amountText","heroToken","IncentiveModal","incentiveTokenName","incentiveTokenSymbol","incentiveTokenAddress","balanceInUnits","unclaimedInUnits","canClaim","onClaim","whyCannotClaim","ConnectedIncentiveModal","compAllocatedUnits","useIncentiveModalState","onClaimClicked","wrappedClaimTx","claimLnIncentiveToken","useOnClaimLnIncentive","root","LendingNetworkPage","networkId","useRouteMatch","path","url","useHistory","setActiveLn","isLoading","exact","render","isSupplyModalActive","hideSupplyModal","isBorrowModalActive","hideBorrowModal","isCollateralModalActive","hideCollateralModal","hideIncentiveModal","isInventiveModalActive","card","cardHeader","alphaMessage","userSelect","lnAsset","zoom","NetworkListItem","onViewNetwork","networkGist","id","distributionAssetParameters","Card","CardContent","CardActions","spacing","NetworksList","lendingNetworksGists","network","textShadow","mainMessage","AllNetworksPage","history","activeLendingNetworkId","targetUrl","push","align","allLNGists","Main","component","match","params","network_id","App","lendingNetworkParameters","unitrollerAddress","basename","baseTheme","responsiveFontSizes","createMuiTheme","secondary","CryptoWalletConnectionService","ethereum","web3","hasEthereumProvider","hasEventsSupport","isMetamaskInstalled","isSemiCompliantEthereumProviderInstalled","this","isMetaMask","Web3","onFunction","on","request","method","selectedAddress","networkVersion","eth","getChainId","chainId","getBalance","balanceInDecimal","parseInt","fromWei","getAccounts","accounts","getBlockNumber","Error","listener","off","READ_ONLY_ETHEREUM_ENDPOINT","REACT_APP_READ_ONLY_ETHEREUM_ENDPOINT","IS_DEV","REACT_APP_USE_PROD","fetchLocalJson","localPath","fetch","fetchRes","json","ZERO_ADDRESS","NATIVE_COIN_ASSET_ADDRESS","LendingNetworksParam","decimals","LendingNetworksService","lnParams","fetchDevNetworkGist","devNetworksgist","participatingSuppliers","tvl","LocalNetworkDevLNAddresses","unitroller","maxmimilion","LocalNetworkDevTokensAddresses","assetInMarket","assetAddress","assetAddressToUse","etheresStructResponseToObject","ethersStructResponse","obj","key","Number","UniswapAnchoredViewService","uniswapAnchoredViewAddress","signerOrProvider","uniswapAnchoredViewContract","Contract","UniswapAnchoredViewJson","abi","getTokenConfigBySymbol","getSignerOrProvider","ethereumProvider","signer","providers","Web3Provider","JsonRpcProvider","getSigner","getAddress","catch","ComptrollerService","unitrollerProxyContract","ComptrollerJson","after","attach","toJS","getAllMarkets","markets","cTokens","enterMarkets","exitMarket","Erc20Service","erc20Address","erc20Contract","ERC20Json","balanceOf","ownerAddress","spenderAddress","allowance","approve","Erc20BuilderService","CErc20Service","cErc20Contract","CErc20Json","mint","redeemUnderlying","oTokensAmount","redeem","repayBorrow","CEtherService","cEtherAddress","cEther","maximillion","CEtherJson","MaximillionJson","borrowerAddress","formatEther","repayBehalf","CTokensBuilderService","cErc20Address","NATIVE_COIN_SYMBOL_PER_CHAIN","localTokensAddressesJson","1337","31337","1","122","FUSE_BLOCK_PER_YEAR","FUSE_BLOCK_PER_DAY","DAILY_BLOCK_PER_CHAIN","3","ROPSTEN_BLOCK_PER_DAY","CryptoWalletConnectionStore","action","cryptoWalletConnectionService","addressCheckingInterval","reactionToWalletConnection","makeObservable","getEthereumProvider","reaction","isConnected","readInformationFromConnectedWallet","fireImmediately","onMainAddressChange","setMainAddress","onChainIdChange","setChainId","setInterval","refreshState","blocksPerYear","didUserApproveDappInThePast","walletConnectionRequestApproved","requestConnectionPermission","permissionGranted","setWalletConnectionRequestApproved","readChainId","readMainAddress","walletAddress","readEthereumBalance","setNativeCoinBalance","requestApproved","nativeCoinBalance","observable","computed","AccountStore","erc20BuilderService","cTokensBuilderService","addressChangeReaction","activeLNStoreId","setDoneLoading","reactToConnectedChainOrAddressChanged","Array","tokensWithBalances","entries","reduce","cur","metaWithBalances","promievent","resetTxIndicators","setTxPending","res","setTxCanceled","spender","buildErc20Service","contractInteraction","manuallyUpdateAllStores","cTokenService","buildCEtherService","buildCErc20Service","withdraw","withdrawByOTokens","cNativeService","repayBorrowWithMaximillion","contractTransaction","currentAddress","activeLnStore","refreshAccountListeners","refreshDataForAccount","failLoadingProcess","refreshFromOutside","manuallyReadAccountData","accountAddress","clearAllAccountData","clearTokenBalancesMap","cancelAllCurrentSubscriptions","setErrorLoading","setTxHadError","doneLoading","errorLoading","txPending","txCanceled","txHadError","clear","tokensWithBalancesMap","replace","EMPTY_ASSET_IN_MARKET_PARAMETERS","SingleCTokenStore","assetInMarketParams","cTokenName","cTokenSymbol","cTokenDecimals","exchangeRateCurrent","supplyRatePerBlock","borrowRatePerBlock","totalBorrows","totalReserves","totalSupply","totalCash","reserveFactorMantissa","collateralFactorMantissa","isListed","borrowBalanceCurrent","balanceOfUnderlying","tokenAllowance","underlyingPrice","cTokenBalances","cTokenUnderlyingPrice","batchUpdateFromCTokenMeta","setIsCollaterable","formatUnits","totalSupplyInUnits","totalBorrowInUnits","blockPerYear","supplyRatePerBlockInUnits","borrowRatePerBlockInUnits","supplyApyInUnits","borrowApyInUnits","accountBorrowBalanceUsd","totalYearlyGainsUsd","totalYearlyLossesUsd","gt","usdValue","totalSupplyBalanceUsd","SingleLNStore","lendingNetworksService","lendingNetworkGist","comptrollerService","set","liquidity","totalSupplyUsd","totalAccountSupplyUsd","totalBorrowUsd","totalBorrowBalanceUsd","totalAccountBorrowUsd","totalYearlyGains","totalLossesGains","totalYearlyChanges","totalYearlyChange","potentialCollateral","usedBorrowFraction","distributionAssetRatePerBlock","incentiveBalance","incentiveAllocated","_priceCalculationDecimals","readDataForAccount","refreshLNNetworkState","readAndSetCompBalanceMeta","readNSetMarkets","batchReadAndUpdateCTokensStores","readNSetAccountLimits","JSON","stringify","fetchLendingNetworkLiveState","liveState","setLiveState","assetToCTokenStore","has","tx","claimIncentiveFromAllMarkets","comptrollerProxy","compoundLensServiceInitialized","compoundLensService","getAccountLimits","accountLimits","setAccountLimits","warn","replaceMarkets","fetchCompBalanceMetadataExt","compBalanceMetadataExt","setCompBalanceMeta","cTokenMarkets","allMarkets","cTokenMetadataAll","cTokenMetas","cTokenBalancesAll","cTokenUnderlyingPriceAll","cTokenUnderlyingPricesAll","i","cTokenUnderlyingPrices","matchingSTokenStore","includes","updateWithFreshState","marketIsColleterable","updateIsInCollaterable","lnLiveState","compBalance","allocated","shortfall","marketsIn","newMarkets","usdLiquidity","LendingNetworksStore","initializeStore","lendingNetworksStores","lnGist","l","setLoadingState","fetchAllLnParameters","buildStoresForEachLn","initializeLNStores","fetchALlLendingNetworksParameters","lnParameters","setLendingNetworkParameters","lnStores","buildLNStore","setLendingNetworksStores","forEach","initialize","gist","lnIdAddress","setActiveLendingNetworkId","lendingNetworkStores","lendingNetworkGists","ModalsStore","currentModalId","supplyAssetBaseAddress","showAssetActionModal","borrowAssetBaseAddress","setCurrentModalId","supplyModalId","setAssetBaseAddress","CompoundLensService","compoundLensAddress","compoundLensContract","CompoundLensJson","newCompoundLensAddress","isInitialized","callStatic","cTokenMetadata","cTokenAddresses","rawMetas","rawMeta","comptrollerAddress","rawAccountLimits","compToken","votes","getCompBalanceMetadataExt","rawCompBalanceMetaExt","LOCAL_CHAINS","LIVE_CHAINS","LIVE_CHAIN_CONSTANTS","SystemStore","chainIdChangeReaction","reactToConnectedChainChanged","chainCompoundLensAddress","getChainCompoundLensAddress","setCompoundLensAddress","setNativeCoinSymbol","ChainAddresses","CompoundLens","configure","enforceActions","window","services","addresses","contractsAddresses","cryptoWalletIntegrationService","uniswapAnchoredViewService","UniswapAnchoredView","erc20ServiceBuilder","cTokenServiceBuilder","buildServices","lnServices","comptrollerLiveService","buildLNServices","stores","getStores","AppWrapper","StylesProvider","injectFirst","ThemeProvider","ReactDOM","StrictMode","document","getElementById"],"mappings":"mn+fAceA,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,8ECGP,SAASQ,IAEd,OAAOC,IAAMC,WAAWC,KAOnB,SAASC,IACd,OAAOJ,IAAYK,aAGd,SAASC,IACd,OAAON,IAAYO,qBAGd,SAASC,IACd,OAAOR,IAAYS,YAGd,SAASC,IACd,OAAOV,IAAYW,YAGd,SAASC,IACd,OAAOZ,IAAYO,qBAAqBM,c,oBCjCpCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,iBAAkB,CAChBC,OAAQ,SACRC,aAAc,UACdC,YAAa,UACbC,SAAU,aAIDC,EAAmBrB,IAAMsB,MAGpC,SAACC,GAAW,IACJC,EAAsBD,EAAtBC,SAAaC,EADV,YACmBF,EADnB,cAELG,EAAUb,IAEhB,OACE,6CAAKc,UAAWD,EAAQV,kBAAsBS,GAA9C,aACGD,Q,iBCpBMI,EAAmB,UAKnBC,EAA0B,UAI1BC,EAAwB,UACxBC,EAAyB,UAEzBC,EAAe,UACfC,EAAgB,UAEhBC,EAAe,UCGtBrB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCoB,OAAQ,CACNC,QAAS,SAETC,gBAAiBtB,EAAMuB,QAAQC,WAAWC,QAC1CC,UAAW,QAEbC,WAAY,CACVC,QAAS,OACTC,cAAe,MACfC,WAAY,UAEdC,SAAU,CACRC,SAAU,IACVC,OAAQ,GACRC,gBAAgB,OAAD,OAASC,aAAT,8BACfC,iBAAkB,YAClBC,eAAgB,UAChBf,gBAAiB,eAInBgB,aAAc,CAEZL,OAAQ,GACRM,WAAY,OAEZC,MAAOC,IAAMC,IAAI1C,EAAMuB,QAAQoB,QAAQC,MAAMC,OAAO,IAAKC,MACzDC,eAAgB,OAChBC,SAAU,GAUVC,UAAW,SAIXC,WAAY,QAEZC,YAAanD,EAAMuB,QAAQoB,QAAQC,KAInC,UAAW,CAGTI,SAAU,KAkBdI,WAAY,CACVpB,SAAU,IACVC,OAAQ,GAERO,MAAOvB,EAEP8B,eAAgB,OAChBC,SAAU,GAKVC,UAAW,SACXC,WAAY,QAEZ,UAAW,CACTF,SAAU,KASdK,QAAS,CACP3B,UAAW,OACX4B,eAAgB,WAEhBd,MAAOvB,GAETsC,iBAAkB,CAIhBjC,gBAAiBmB,IAAMC,IAAI1C,EAAMuB,QAAQC,WAAWC,SACjD+B,QAAQ,IACRV,MACHW,OAAO,aAAD,OAAezD,EAAMuB,QAAQC,WAAWC,SAC9CiC,aAAc,KACd,UAAW,CACTP,YAAaV,IAAMC,IAAI1C,EAAMuB,QAAQC,WAAWC,SAC7C+B,QAAQ,IACRV,MACHxB,gBAAiBtB,EAAMuB,QAAQC,WAAWC,QAC1Ce,MAAOxC,EAAMuB,QAAQoB,QAAQgB,QAOjCC,aAAc,CAUZC,OAAQ,UACRxC,QAAS,mBACTO,QAAS,OACTE,WAAY,SACZgC,cAAe,MACfd,SAAU,OACVT,WAAY,IACZwB,cAAe,QAGjBC,QAAS,CAEPN,aAAc,MACdG,OAAQ,UACRxC,QAAS,WACT4C,WAAY,UACZH,cAAe,MACfd,SAAU,OACVT,WAAY,IACZwB,cAAe,QAIjBG,UAAW,CACTD,WAAY,UACZhC,OAAQ,UACRkC,MAAO,UACPzC,UAAW,UACXM,SAAU,WAGZoC,SAAU,CACRlC,gBAAgB,OAAD,OAASC,aAAT,6BAEjBkC,KAAM,CACJC,WAAY,EACZ1C,QAAS,eACTQ,iBAAkB,YAClBmC,mBAAoB,SACpBlC,eAAgB,UAChBqB,aAAc,OAGhBc,WAAY,CACVtB,WAAY,SAEduB,QAAS,CAEPjC,MAAO,WAMTkC,QAAS,CACPlC,MAAO,WAKTmC,QAAS,CACPnC,MAAO,eAOEoC,EAASC,aAA0C,SAACrE,GAC/D,IAiHwBsE,EAjHlBnE,EAAUb,IAEViF,EH9MC/F,IAAYgG,6BG+MbrF,EAAcD,IAEduF,EADuB3F,IACSO,cAEhCqF,EAAaH,EAA4BI,qBA0GvBL,EAzGHC,EAA4BK,YA0G3C,GAAN,OAAUN,EAAQO,UAAU,EAAG,GAA/B,cAAuCP,EAAQO,UAC7CP,EAAQQ,OAAS,EACjBR,EAAQQ,UA3GN,UAEEC,IAAgBN,EAChBO,EAAY,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAUQ,KACzBC,GAAuB,OAART,QAAQ,IAARA,OAAA,EAAAA,EAAUU,aAAc,IACvCC,GAAgC,OAARX,QAAQ,IAARA,OAAA,EAAAA,EAAUY,mBAAoB,EAE5D,OACE,wBAAQjF,UAAWD,EAAQS,OAA3B,SACE,cAACd,EAAD,UACE,eAACwF,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVlE,WAAW,SACXmE,MACE,GALJ,UAYE,eAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGxF,UAAWD,EAAQgB,WAA5C,UAGE,eAAC,IAAD,CAAMf,UAAWD,EAAQ2B,aAAc+D,GAAG,IAA1C,UACE,sBAAMzF,UAAW0F,YAAK,CAAC3F,EAAQ8D,QAAS9D,EAAQ6D,aAAhD,eAGA,sBAAM5D,UAAW0F,YAAK,CAAC3F,EAAQ+D,QAAS/D,EAAQ6D,aAAhD,eAGA,sBAAM5D,UAAW0F,YAAK,CAAC3F,EAAQgE,QAAShE,EAAQ6D,aAAhD,kBAMDgB,GACC,mBACE5E,UAAWD,EAAQyC,WACnBmD,OAAO,SACPC,KAAMd,EAHR,SAKGF,OASP,cAACiB,EAAA,EAAD,CAAQC,QAAM,EAAd,SACE,cAACZ,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,MAGjB,eAACL,EAAA,EAAD,CACElF,UAAW0F,YAAK3F,EAAQgB,WAAYhB,EAAQ0C,SAC5C6C,MAAI,EACJC,GAAI,GACJC,GAAI,EAJN,UAOGb,GACC,sBACE3E,UAAW0F,YAAK,CACd3F,EAAQ4C,iBACR5C,EAAQiD,eAEV+C,QAAS,kBAAMhH,EAAYiH,sBAL7B,UAOGhB,EAAsBiB,QAAQ,GAAGC,iBAClC,qBACElG,UAAW0F,YACT3F,EAAQuD,UACRvD,EAAQyD,SACRzD,EAAQ0D,WAShB,oBACEzD,UAAW0F,YAAK3F,EAAQ4C,iBAAkB5C,EAAQqD,SAClD2C,QAAS,kBAAM5B,EAA4BgC,gBAF7C,UAIE,yBACC7B,kB,6DChUF8B,EAAmBjH,aAAW,SAACC,GAAD,MAAY,CACrDiH,WAAW,eACRjH,EAAMkH,YAAYC,KAAK,MAAQ,CAC9BvF,QAAS,oBAGbwF,WAAW,eACRpH,EAAMkH,YAAYG,GAAG,MAAQ,CAC5BzF,QAAS,oBAGb0F,MAAO,CAELC,UAAW,SACXhF,WAAY,IACZS,SAAU,OACVR,MAAO,WAGTgF,UAAW,CACTvE,UAAW,SAEbwE,WAAY,CACVxE,UAAW,UAEboB,KAAM,CACJC,WAAY,EACZ1C,QAAS,eACTQ,iBAAkB,YAClBmC,mBAAoB,SACpBlC,eAAgB,UAChBqB,aAAc,MACdS,MAAO,SACPlC,OAAQ,SACRD,SAAU,SACVN,UAAW,cC9BT5B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvC0H,MAAO,CACLlG,WAAYR,EACZ2G,UAAW,iCACXjE,aAAc,MAEdzB,OAAQ,OACRkC,MAAO,YAIEyD,EAAQ3I,IAAMsB,MAAa,SAACC,GACvC,IAAMG,EAAUb,IAEhB,OAAO,qBAAKc,UAAWD,EAAQ+G,MAAxB,SAAgClH,EAAMC,c,iBCTzCX,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvC6H,MAAO,GAMP,kBAAmB,CACjB,KAAM,CACJC,UAAW,iBAKb,MAAO,CACLA,UAAW,oBAKb,OAAQ,CACNA,UAAW,kBAGf,oBAAqB,CACnB,OAAQ,CACNA,UAAW,sBAKJC,EAAY9I,IAAMsB,MAAa,SAACC,GAAW,IAC9CwH,EAAyBxH,EAAzBwH,OAAQC,EAAiBzH,EAAjByH,aACVtH,EAAUb,IACVoI,EAAgBlB,IAEhBmB,EAAiBC,mBAAQ,WAC7B,IAAMC,EAAmBJ,GAAgB,GACzC,OAAO3B,YAAK,CAAC4B,EAAc7D,KAAM1D,EAAQkH,OAA9B,mBAAwCQ,OAClD,CAAC1H,EAAQkH,MAAOK,EAAc7D,KAAM4D,IAEvC,OACE,sBACErH,UAAWuH,EACXlC,MAAO,CACL/D,gBAAgB,OAAD,OA/CJC,aA+CI,yBAAoC6F,EAApC,SACf3F,eAAgB,UAChBD,iBAAkB,kB,SC1BpBtC,EAAYC,aAAW,SAACC,GAAD,MAAY,CAEvCsI,EAAG,CACD9F,MAAO,UACPsB,cAAe,MAGfyE,cAAe,YACfxF,eAAgB,OAChBc,OAAQ,WAEV2E,MAAO,CAUL5G,QAAS,OACTE,WAAY,SACZ2G,SAAU,OACVC,aAAc,gCAEdrH,QAAS,kBACTsH,WAAY,wBACZvI,YAAa,WACb2D,cAAe,OACff,SAAU,OACVT,WAAY,IACZuB,cAAe,EACfZ,WAAY,OACZV,MAAOtB,EAEP,UAAW,CACTyH,WAAW,aAAD,OAAe9H,GAEzB2B,MAAOC,IAAMC,IAAIxB,GAAe2B,OAAO,IAAKC,MAC5CP,WAAY,UAGdN,OAAQ,QAGV2G,UAAW,CACTzE,MAAO,UACPlC,OAAQ,WAGV4G,SAAU,CACR/G,WAAY,UAGdgH,cAAe,CACbC,YAAa,QAGfC,iBAAkB,CAChBC,KAAM,MACNF,YAAa,UACbG,SAAU,UAGZC,QAAS,CACP,UAAW,CACTC,WAAY,SACZF,SAAU,SACVG,aAAc,aAIlBC,gBAAiB,CACf1H,QAAS,QACT2H,UAAW,MACX/G,MAAO,UACPQ,SAAU,aAIDwG,GAAgB3E,aAC3B,SAACrE,GACC,IAAMG,EAAUb,IACVoI,EAAgBlB,IAEpByC,EAKEjJ,EALFiJ,WACAC,EAIElJ,EAJFkJ,aAEAC,EAEEnJ,EAFFmJ,uBACAC,EACEpJ,EADFoJ,gBAGM9E,EAAY4E,EAAZ5E,QAGNW,EAMEiE,EANFjE,KACAuC,EAKE0B,EALF1B,OAOI6B,EPhGH,SACLC,GAEA,IACMC,EADuBzK,IACSO,cAItC,OAHiB,OAAGkK,QAAH,IAAGA,OAAH,EAAGA,EAAUC,cAAcC,MAC1C,SAACJ,GAAD,OAAiBA,EAAYK,yBAA2BJ,KO0FpCK,CAA0BrF,GAExCsF,EAAc,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAaO,eAI9BC,GAAuB,OAAXR,QAAW,IAAXA,OAAA,EAAAA,EAAaS,yBAA0B,EACnDC,GAAuB,OAAXV,QAAW,IAAXA,OAAA,EAAAA,EAAaW,yBAA0B,EAEnDC,GAA8B,OAAXZ,QAAW,IAAXA,OAAA,EAAAA,EAAaa,kBAAmB,EACnDC,GACO,OAAXd,QAAW,IAAXA,OAAA,EAAAA,EAAae,kCAAmC,EAE5CC,EA4IV,SAA4BC,GAC1B,IAAIC,EAAiC,IACjCC,EAAe,IAGfF,EAAS,MACXC,EAAY,IACZC,EAAe,KAQjB,MALgC,CAC9BD,YACAE,MAAOH,EAASE,GAxJYE,CAAmBT,GAEzCU,GAA2B,OAAXtB,QAAW,IAAXA,OAAA,EAAAA,EAAauB,uBAAwB,EACrDC,GAA2B,OAAXxB,QAAW,IAAXA,OAAA,EAAAA,EAAayB,uBAAwB,EAErDC,EAA0B,WAAf9B,EACX+B,EAAeD,EAAWhB,EAAYF,EACtCoB,EAAiBF,EAAWJ,EAAgBE,EAC5CK,EAAYH,EAAW,WAAa,WACpCI,EAAkBF,EAAiB,EAEnCG,EAAqBC,uBACzB,SAACC,GACCnC,EAAuB7E,EAASgH,EAAMvF,OAAOwF,WAE/C,CAACjH,EAAS6E,IAGNqC,EAA8BH,uBAClC,SAACC,IACC,OAAIjC,QAAJ,IAAIA,OAAJ,EAAIA,EAAaoC,oBACfrC,EAAgB9E,GAEhBoH,QAAQC,IAAR,uDAGJ,CAACrH,EAAD,OAAU+E,QAAV,IAAUA,OAAV,EAAUA,EAAaoC,mBAAoBrC,IAGvCwC,EAA+BhE,mBAAQ,WAC3C,IAAMiE,EACW,WAAf5C,EAGE,cAAC6C,EAAA,EAAD,CACEP,QAAS3B,EACTmC,SAAUX,EAEVjF,QAAS,SAAC6F,GAAD,OAAOA,EAAEC,qBAGpB,oCAEGC,WACC7B,EAAoBI,MAAMnE,kBAC1BA,iBACD+D,EAAoBE,aAI3B,OAAkB,OAAXlB,QAAW,IAAXA,OAAA,EAAAA,EAAaoC,oBAClBI,EAEA,cAACM,EAAA,EAAD,CAAUC,UAAU,WAErB,QACD/C,QADC,IACDA,OADC,EACDA,EAAaoC,mBACb7B,EACAS,EAAoBE,UACpBF,EAAoBI,MACpBxB,EACAmC,IAGF,OACE,oBACEhL,UAAW0F,YAAK,CAAC3F,EAAQ2H,EAAG3H,EAAQ6H,QACpC7B,QAASqF,EAFX,UAKE,eAAClG,EAAA,EAAD,CAAMC,WAAS,EAACG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGxF,UAAWD,EAAQkI,SAAtD,UACE,cAACd,EAAD,CACEC,OAAQA,EACRC,aAAc,CAACtH,EAAQmI,cAAenI,EAAQiI,aAEhD,sBAAKhI,UAAW0F,YAAK,CAAC3F,EAAQwI,QAASxI,EAAQqI,mBAA/C,UACE,8BAAMvD,IACN,uBACE7E,UAAW0F,YAAK,CACd4B,EAAcd,WACdzG,EAAQ2I,kBAHZ,UAMGkC,EANH,aAYJ,cAAC1F,EAAA,EAAD,CACEI,MAAI,EACJC,GAAI,EACJC,GAAI,EACJxF,UAAW0F,YAAK,CAAC4B,EAAcjB,WAAYiB,EAAcT,aAJ3D,SAME,qBAAK7G,UAAW0F,YAAK,CAAC3F,EAAQwI,UAA9B,UACc,OAAXU,QAAW,IAAXA,OAAA,EAAAA,EAAaoC,oBACZ,kCAAQT,EAAa3E,QAAQ,IAAIC,iBAAjC,OAEA,cAAC6F,EAAA,EAAD,CAAUC,UAAW,aAM3B,cAAC9G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGxF,UAAW0F,YAAK,CAAC4B,EAAcT,aAAxD,SACE,sBAAK7G,UAAW0F,YAAK,CAAC3F,EAAQwI,UAA9B,UACE,gCACGwB,EAAqB7D,iBADxB,IAC2CkB,KAE1C2D,GACC,uBACE/K,UAAW0F,YAAK,CAEd3F,EAAQ2I,kBAHZ,YAMKmC,EAAe5E,QAAQ,IAAIC,iBANhC,IAMmD4E,UAOzD,cAAC5F,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGxF,UAAW0F,YAAK,CAAC4B,EAAcV,YAAxD,SACE,qBAAK5G,UAAW0F,YAAK,CAAC3F,EAAQwI,UAA9B,SACGiD,YClPb,IAAMtM,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC6M,YAAa,CACXjL,QAAS,OACTkL,SAAU,UACVhL,WAAY,SACZwB,eAAgB,gBAChBN,SAAU,SACV3B,QAAS,eACTqH,aAAc,gCACdlG,MAAOtB,GAET6L,WAAY,CACV7M,OAAQ,GAEV8M,WAAY,GACZC,YAAa,CAEX5L,QAAS,eACTqH,aAAc,gCACd5G,WAAY,UAEdoL,OAAQ,OAIGC,GAA0C,SAAC3M,GACtD,IAAMG,EAAUb,KACVoI,EAAgBlB,IAEpB5F,EAOEZ,EAPFY,OACAqI,EAMEjJ,EANFiJ,WACA2D,EAKE5M,EALF4M,eACAC,EAIE7M,EAJF6M,oBAEA1D,GAEEnJ,EAHF8M,gBAGE9M,EAFFmJ,wBACAC,EACEpJ,EADFoJ,gBAKF,OAFAsC,QAAQC,IAAR,iCAAsC/K,IAGpC,eAACwG,EAAD,WACE,qBAAKhH,UAAWD,EAAQkM,YAAxB,SACE,oBAAIjM,UAAWD,EAAQoM,WAAvB,SAAoC3L,MAEtC,sBAAKR,UAAWD,EAAQqM,WAAxB,UACE,eAAClH,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAW,MAAOpF,UAAWD,EAAQsM,YAArD,UAEE,cAACnH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,uBAAOxF,UAAWsH,EAAcZ,MAAhC,qBAIF,cAACxB,EAAA,EAAD,CACElF,UAAW0F,YAAK,CACd4B,EAAcT,WACdS,EAAcjB,aAEhBf,MAAI,EACJC,IAAI,EACJC,GAAI,EAPN,SASE,uBAAOxF,UAAW0F,YAAK,CAAC4B,EAAcZ,QAAtC,mBAIF,cAACxB,EAAA,EAAD,CAAMlF,UAAWsH,EAAcT,WAAYvB,MAAI,EAACC,GAAI,EAAGC,GAAI,EAA3D,SACE,uBACExF,UAAW0F,YAAK,CAAC4B,EAAcZ,MAAOY,EAAcV,YADtD,sBAQF,cAAC1B,EAAA,EAAD,CAAMlF,UAAWsH,EAAcV,UAAWtB,MAAI,EAACC,GAAI,EAAGC,GAAI,EAA1D,SACE,uBACExF,UAAW0F,YAAK,CAAC4B,EAAcZ,MAAOY,EAAcV,YADtD,SAGkB,WAAfiC,EAA0B,aAAe,mBAKhD,qBAAK7I,UAAWD,EAAQuM,OAAxB,SACGE,EAAeG,KAAI,SAAC/E,GAAD,OAClB,cAACgB,GAAD,CACEC,WAAYA,EACZC,aAAclB,EACdgF,cAAeH,EAAoB7E,EAAMR,SAAW,EAEpD2B,uBAAwBA,EACxBC,gBAAiBA,GAFZpB,EAAMR,oBC7GnBlI,GAAYC,aAAW,SAACC,GAAD,YAAY,CACvCyN,mBAAoB,CAClB,gBAAiB,MAEjB/L,UAAW,0DAEbgM,IAAK,CACH9L,QAAS,OACTkL,SAAU,WACV/D,YAAa,YACb9E,WAAY,aAEd0J,eAAa,GACXC,UAAW,OACXvM,QAAS,cAFE,cAIVrB,EAAMkH,YAAYG,GAAG,MAAQ,CAC5BuG,UAAW,MACXvN,SAAU,QAND,6BAUG,WAVH,OAeFwN,GAAmChJ,aAAS,SAACrE,GACxD,IAAMG,EAAUb,KADkD,EAExCb,IAAM6O,SAAwB,MAFU,mBAE3DC,EAF2D,KAI5D1O,GAJ4D,KAI7CD,KACfO,EAAcD,IACdsO,EAAUpO,IAEV+J,EAAyBkC,sBAAW,uCACxC,WAAO/B,EAA0BmE,GAAjC,SAAA3F,EAAA,sDACE3I,EAAYuO,oBAAoBpE,GADlC,2CADwC,wDAiBxC,CAACnK,IAmCGwO,GAhCsCtC,uBAC1C,SAAC/B,GACC,IAAKkE,EACH,MAAO,CACLI,gBAAYC,EACZC,qBAAiBD,GAGrB,IAAMxE,EAAcmE,EAAQO,wBAAwBC,IAAI1E,GAClDwE,EAAkBN,EAAQS,aAAaxE,MAC3C,SAACyE,GAAD,OAAgBA,EAAW5J,UAAYgF,KAiBzC,OAdKwE,EAEOzE,GACVqC,QAAQ6B,MAAR,mCAA0CjE,IAF1CoC,QAAQ6B,MAAR,wCAA+CjE,IAQ7C,CACFwE,kBACAF,gBAAYC,KAKhB,CAACL,IAG2BnC,uBAC5B,SAAC/B,GACCnK,EAAYgP,gBAAgB7E,KAE9B,CAACnK,KAGGiP,EAAwB/C,uBAC5B,SAAC/B,GACCnK,EAAYkP,gBAAgB/E,KAE9B,CAACnK,IA6BH,OAAIoO,EACK,eAACe,EAAA,EAAD,CAAY7I,MAAO,CAAEzD,MAAO,SAA5B,oBAA+CuL,KAGnDC,EAKH,cAAC1N,EAAD,UACE,kCACE,sBAAKM,UAAW0F,YAAK,CAAC3F,EAAQ8M,mBAAoB9M,EAAQ+M,MAA1D,UAEE,qBAAK9M,UAAWD,EAAQgN,cAAxB,SACE,cAAC,GAAD,CACEvM,OAAQ,iBACRqI,WAAY,SACZ2D,eAAgBY,EAAQS,aACxBpB,oBAAqBhO,EAAa0P,eAClCzB,gBAAiBU,EAAQV,gBACzB3D,uBAAwBA,EACxBC,gBAAiBuE,MAIrB,qBAAKvN,UAAWD,EAAQgN,cAAxB,SACE,cAAC,GAAD,CACEvM,OAAQ,iBACRqI,WAAY,SACZ2D,eAAgBY,EAAQS,aACxBpB,oBAAqBhO,EAAa0P,eAClCzB,gBAAiBU,EAAQV,gBACzB3D,uBAAwBA,EACxBC,gBAAiBgF,aA5BpB,cAACE,EAAA,EAAD,CAAY7I,MAAO,CAAEzD,MAAO,SAA5B,gC,qBC3IX,SAASwM,GAAkBC,GACzB,QAASA,EAAEpI,QAAQ,IAAIC,iBAGlB,IAAMoI,GAAqBjQ,IAAMsB,MAAa,SAACC,GAAW,IACvD2O,EAAU3O,EAAV2O,MAER,OAAO,cAAC,KAAD,CAAgBA,MAAOA,EAAOC,YAAaJ,QCF9ClP,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCqP,SAAU,CACRrM,SAAU,SACVT,WAAY,IACZC,MAAO,UACP+G,UAAW,UAEb9B,WAAY,CACVxE,UAAW,UAEbqM,SAAU,CACRrM,UAAW,QAEbqE,MAAO,CAELC,UAAW,SACXhF,WAAY,IACZS,SAAU,OACVR,MAAO,WAET+M,OAAQ,CACN/M,MAAO1B,GAET0O,OAAQ,CAGNhN,MAAO,eAIEiN,GAAkBxQ,IAAMsB,MAAa,SAACC,GACjD,IAAMG,EAAUb,KACR4P,EAAwClP,EAAxCkP,UAAWC,EAA6BnP,EAA7BmP,IAAKpE,EAAwB/K,EAAxB+K,SAAUqE,EAAcpP,EAAdoP,UAElC,OACE,sBAAKhP,UAAWgP,EAAYjP,EAAQ2O,SAAW3O,EAAQ8G,WAAvD,UACE,uBACE7G,UAAW0F,YAAK,CACd3F,EAAQ2G,MACRiE,EAAW5K,EAAQ4O,OAAS5O,EAAQ6O,SAHxC,SAMGE,IAGH,sBAAK9O,UAAWD,EAAQ0O,SAAxB,cAEE,cAACH,GAAD,CAAoBC,MAAOQ,a,UChD7B7P,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC6P,cAAc,aAEZ5N,OAAQ,QACRkC,MAAO,QACP2L,SAAU,WACVC,KAAM,MACNjI,UAAW,oBACV9H,EAAMkH,YAAYC,KAAK,MAAQ,CAC9BlF,OAAQ,QACRkC,MAAO,UAGX6L,OAAQ,GACRC,kBAAmB,CACjBrO,QAAS,OACTC,cAAe,SACfiO,SAAU,WACVI,IAAK,EACLH,KAAM,EACNI,MAAO,EACPC,OAAQ,EACRlQ,OAAQ,YAERoB,gBAAiBtB,EAAMuB,QAAQC,WAAWC,QAC1CiC,aAAc,MACd5B,WAAY,SACZwB,eAAgB,SAChBjC,QAAS,UAET,UAAW,CAETC,gBAAiBmB,IAAMC,IAAI1C,EAAMuB,QAAQC,WAAWC,SACjD+B,QAAQ,IACRV,QAGPuN,yBAA0B,CACxB/O,gBAAiB,0BAEnBgG,MAAO,CACLrE,UAAW,SACXT,MAAO,UAGP+E,UAAW,SACXhF,WAAY,IACZS,SAAU,QAGZsN,aAAc,CACZ9N,MAAO,SAET6M,SAAU,CACR9M,WAAY,IACZC,MAAO,UACP+G,UAAW,UAEbgH,kBAAmB,CACjBvN,SAAU,UAEZwN,gBAAiB,CACfhO,MAAO,UACPQ,SAAU,OACVC,UAAW,cAIFwN,GAA2B,SAACjQ,GACvC,IAAMG,EAAUb,KACRkQ,EAAiCxP,EAAjCwP,OAAQU,EAAyBlQ,EAAzBkQ,qBAGVC,EAAiBC,iBAAuB,MACxCC,EAAaC,aAASH,GAEtBI,EAAYf,EAAS,EAErBgB,EAAmB,cADRD,EAAY,MAAQ,OAE/BE,EAAeF,EAAY,kBAAoB,gBAE/CG,IAAsBlB,EAAOnJ,QAAQ,IAAIC,iBACzCqK,IAAoCT,EAAqB7J,QAC7D,IACCC,iBAEGsK,EAAYP,EAAU,UACrBM,EADqB,MAExBH,EACEK,EAAeR,EAAU,6BAELI,GAFK,UAGxBC,EAHwB,KAK/B,OACE,sBAAKtQ,UAAWD,EAAQkP,cAAeyB,IAAKX,EAA5C,UACE,qBAAK/P,UAAWD,EAAQqP,OAAxB,SACE,sBAAKuB,QAAQ,cAAcpN,MAAM,OAAjC,UACE,sBACEqN,EAAE,uCACFC,OAAO,cACPC,KAAK,YAEP,sBACEF,EAAE,yEACFC,OAAO,cACPC,KAAM5Q,SAIZ,sBACEF,UAAW0F,YAAK,CACd3F,EAAQsP,oBACRY,GAAalQ,EAAQ0P,2BAHzB,UAME,uBACEzP,UAAW0F,YAAK,CACd3F,EAAQ2G,QACRuJ,GAAalQ,EAAQ2P,eAHzB,SAMGc,IAEH,qBACExQ,UAAW0F,YAAK,CACd3F,EAAQ0O,SACRwB,EAAalQ,EAAQ6P,gBAAkB7P,EAAQ0O,WAHnD,SAMGgC,WCjILvR,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2R,QAAS,GACTjE,IAAK,CACH3E,YAAa,YACb9E,WAAY,aAEd2N,YAAa,CACX9P,WAAY,UAEd2F,WAAY,CACVxE,UAAW,UAEb4O,OAAQ,CACNxQ,QAAS,kBAIAyQ,GAAiB7S,IAAMsB,MAAa,SAACC,GAChD,IAAMG,EAAUb,KAEdiS,EAIEvR,EAJFuR,iBACAC,EAGExR,EAHFwR,iBACAhC,EAEExP,EAFFwP,OACAU,EACElQ,EADFkQ,qBAGF,OACE,sBAAK9P,UAAWD,EAAQgR,QAAxB,UAEE,cAAClL,EAAA,EAAD,CAAQC,QAAM,EAAd,SACE,eAACZ,EAAA,EAAD,CACEC,WAAS,EACTC,UAAW,MACXpF,UAAW0F,YAAK,CAAC3F,EAAQ+M,IAAK/M,EAAQiR,cAHxC,UAKE,cAAC9L,EAAA,EAAD,CACElF,UAAWD,EAAQkR,OACnB3L,MAAI,EACJH,WAAS,EACTC,UAAW,SACXG,GAAI,EALN,SAOE,cAACsJ,GAAD,CACEE,IAAKqC,EACLtC,UAAW,iBACXnE,UAAU,EACVqE,WAAW,MAIf,cAAC9J,EAAA,EAAD,CACElF,UAAWD,EAAQkR,OACnB9L,WAAS,EACTG,MAAI,EACJF,UAAW,SACXG,GAAI,EALN,SAOE,cAAC,GAAD,CACE6J,OAAQA,EACRU,qBAAsBA,MAI1B,cAAC5K,EAAA,EAAD,CACElF,UAAWD,EAAQkR,OACnB9L,WAAS,EACTG,MAAI,EACJF,UAAW,SACXG,GAAI,EALN,SAOE,cAACsJ,GAAD,CACEE,IAAKoC,EACLrC,UAAW,iBACXnE,UAAU,EACVqE,WAAW,WAOnB,cAACnJ,EAAA,EAAD,CAAQwL,MAAI,EAAZ,SACE,eAACnM,EAAA,EAAD,CACEC,WAAS,EACTC,UAAW,MACXpF,UAAW0F,YAAK,CAAC3F,EAAQ+M,IAAK/M,EAAQiR,cAHxC,UAKE,cAAC9L,EAAA,EAAD,CAAMlF,UAAWD,EAAQkR,OAAQ3L,MAAI,EAACC,GAAI,EAA1C,SACE,cAAC,GAAD,CACE6J,OAAQA,EACRU,qBAAsBA,MAI1B,eAAC5K,EAAA,EAAD,CAAMlF,UAAWD,EAAQkR,OAAQ3L,MAAI,EAACC,GAAI,EAA1C,UACE,cAACsJ,GAAD,CACEE,IAAK,EACLD,UAAW,iBACXnE,UAAU,EACVqE,WAAW,IAEb,cAACH,GAAD,CACEE,IAAK,EACLD,UAAW,iBACXnE,UAAU,EACVqE,WAAW,kBC1GnB9P,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCkS,SAAU,CACRtQ,QAAS,OACT2H,UAAW,WAEbjC,MAAO,CAELC,UAAW,SACXhF,WAAY,IACZS,SAAU,OACVR,MAAO,WAET2P,cAAe,CACb3P,MAAO,UAGP+G,UAAW,SACXR,YAAa,WACb,iBAAkB,CAChBA,YAAa,EACb9E,WAAY,aAGhBmO,mBAAoB,CAClBtC,SAAU,WACV7G,KAAM,OAERoJ,mBAAoB,CAClBzQ,QAAS,OACTN,gBAAiBR,GAEnBwR,SAAU,CACR1Q,QAAS,OACTC,cAAe,MACfoH,KAAM,MACNhH,OAAQ,MACR5B,SAAU,OACV6I,SAAU,SACV5H,gBAAiB,wBACjBoC,aAAc,QACd6F,UAAW,QAEbgJ,WAAY,CACV/Q,WAAY,yBAEdgR,KAAM,CACJvQ,OAAQ,OAEVwQ,2BAA4B,CAC1B7Q,QAAS,eACTkO,SAAU,WACVC,KAAM,EACNG,IAAK,EACL/L,MAAO,QAETuO,EAAG,CACD5C,SAAU,WACV6C,MAAO,QACP5J,YAAa,UACbvG,MAAO,UACPnB,QAAS,gCACTC,gBAAiB,WAEnBsR,MAAO,CACL5P,SAAU,QAEZ6P,yBAA0B,CACxBjR,QAAS,eACTkO,SAAU,WACVC,KAAM,EACNG,IAAK,EACL/L,MAAO,OACPlC,OAAQ,OACRsH,UAAW,YAIFuJ,GAAiB7T,IAAMsB,MAAa,SAACC,GAChD,IAAMG,EAAUb,KACRiT,EAAmDvS,EAAnDuS,qBAAsBC,EAA6BxS,EAA7BwS,yBAI9B,OACE,sBAAKpS,UAAWD,EAAQuR,SAAxB,UACE,wBAAOtR,UAAW0F,YAAK,CAAC3F,EAAQ2G,MAAO3G,EAAQwR,gBAA/C,2BACgB,cAACjD,GAAD,CAAoBC,MAAO4D,IAD3C,QAIA,sBAAKnS,UAAWD,EAAQyR,mBAAxB,UAEE,qBACExR,UAAW0F,YAAK,CAAC3F,EAAQ2R,SAAU3R,EAAQ4R,WAAY5R,EAAQ6R,OADjE,SAGE,qBACES,KAAK,cACLC,gBAAe,EACfC,gBAAe,IACfvS,UAAWD,EAAQ0R,mBACnBpM,MAAO,CAAE9B,MAAM,GAAD,OAAK4O,EAAL,UAIlB,qBAAKnS,UAAWD,EAAQ8R,2BAAxB,SACE,qBACExM,MAAO,CACLjE,SAAU,KACV3B,SAAU,MACV8D,MAAM,GAAD,OAAK4O,EAAL,UASX,qBAAKnS,UAAWD,EAAQkS,8BAE1B,wBAAOjS,UAAW0F,YAAK,CAAC3F,EAAQ2G,MAAO3G,EAAQwR,gBAA/C,cAEE,cAACjD,GAAD,CAAoBC,MAAO6D,aCrH7BlT,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCoT,cAAc,aACZtD,SAAU,WACVzP,SAAU,OACVH,OAAQ,UACPF,EAAMkH,YAAYC,KAAK,MAAQ,CAC9BjH,OAAQ,kBAKDmT,GAAgBpU,IAAMsB,MAAa,SAACC,GAC/C,IAAMG,EAAUb,KAGdkS,EAMExR,EANFwR,iBACAhC,EAKExP,EALFwP,OACAU,EAIElQ,EAJFkQ,qBACAqB,EAGEvR,EAHFuR,iBACAgB,EAEEvS,EAFFuS,qBACAC,EACExS,EADFwS,yBAGF,OACE,sBAAKpS,UAAWD,EAAQyS,cAAxB,UACE,cAACtB,GAAD,CACE9B,OAAQA,EACRU,qBAAsBA,EACtBsB,iBAAkBA,EAClBD,iBAAkBA,IAEpB,cAACe,GAAD,CACEC,qBAAsBA,EACtBC,yBAA0BA,UCxC5BlT,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCsT,KAAM,CAEJhS,gBAAiBtB,EAAMuB,QAAQC,WAAWC,QAC1C8R,aAAc,WACdlS,QAAS,4BAIAmS,GAAiB3O,aAC5B,SAACrE,GACC,IAAMG,EAAUb,KAEVkO,EAAUpO,IAEVoS,GAA0B,OAAPhE,QAAO,IAAPA,OAAA,EAAAA,EAASyF,+BAAgC,EAC5D1B,GAA0B,OAAP/D,QAAO,IAAPA,OAAA,EAAAA,EAAS0F,+BAAgC,EAC5D1D,GAAgB,OAAPhC,QAAO,IAAPA,OAAA,EAAAA,EAASgC,SAAU,EAC5BU,GAA8B,OAAP1C,QAAO,IAAPA,OAAA,EAAAA,EAAS0C,uBAAwB,EACxDsC,GAAkC,OAAPhF,QAAO,IAAPA,OAAA,EAAAA,EAASgF,2BAA4B,EAChED,GAA8B,OAAP/E,QAAO,IAAPA,OAAA,EAAAA,EAAS+E,uBAAwB,EAE9D,OACE,yBAASnS,UAAW0F,YAAK3F,EAAQ2S,MAAjC,SACE,cAACD,GAAD,CACErB,iBAAkBA,EAClBD,iBAAkBA,EAClB/B,OAAQA,EACRU,qBAAsBA,EACtBqC,qBAAsBA,EACtBC,yBAA0BA,SC9BvBW,GAAwB9O,aACnC,SAACrE,GACC,OACE,qCACE,cAACgT,GAAD,IACA,cAAC3F,GAAD,U,4DCLF/N,GAAYC,aAAW,SAACC,GAAD,MAAY,MAE5B4T,GAAoB3U,IAAMsB,MAAa,SAACC,GACnCV,KAAhB,IACQ+T,EAA4BrT,EAA5BqT,KAAMlN,EAAsBnG,EAAtBmG,QAASmN,EAAatT,EAAbsT,SAIvB,OAFA5H,QAAQC,IAAI,mBAGV,cAAC4H,GAAA,EAAD,CACEC,QAAS,YACTC,WAAS,EACTH,SAAUA,EACVnN,QAASA,EACTnE,MAAO,UALT,SAOGqR,OCWD/T,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+F,UAAW,CACT5B,MAAO,OACPvC,QAAS,OACTC,cAAe,UAIjBqS,QAAS,CACP/P,MAAO,OACPvC,QAAS,OACTC,cAAe,MACfyB,eAAgB,QAChBxB,WAAY,SACZT,QAAS,UAGX8S,aAAc,CACZzL,aAAc,qBAEhB0L,kBAAmB,CACjB1L,aAAc,6BAEhB2L,WAAY,CACVtL,YAAa,WAEfqI,UAAW,CAET5O,MA9BiB,WAgCnB8R,UAAW,CAGT9R,MAAOxC,EAAMuB,QAAQsS,KAAKlR,aAIjB4R,GAAYtV,IAAMsB,MAAa,SAACC,GAC3C,IAAMG,EAAUb,KACR0U,EAA4ChU,EAA5CgU,MAAOC,EAAqCjU,EAArCiU,SAAUC,EAA2BlU,EAA3BkU,SAAUP,EAAiB3T,EAAjB2T,aAInC,OACE,sBACEvT,UAAW0F,YAAK,CACd3F,EAAQoF,UACRoO,EAAexT,EAAQyT,kBAAoB,OAH/C,UAME,cAACtF,EAAA,EAAD,UAAa0F,IACZC,GAAY,cAAC3F,EAAA,EAAD,CAAYkF,QAAS,UAArB,SAAiCS,IAC7CC,EAASnH,KAAI,SAAC2G,EAASS,GACtB,IAAMC,EAASD,IAAUD,EAASpP,OAC5BuP,GAAwB,OAAPX,QAAO,IAAPA,OAAA,EAAAA,EAASW,iBAAkB,EAElD,OACE,sBACEjU,UAAW0F,YAAK,CACd3F,EAAQuT,QACRU,EAAS,KAAOjU,EAAQwT,eAH5B,UAOGD,EAAQY,aACP,cAAC/M,EAAD,CACEC,OAAQkM,EAAQY,YAChB7M,aAAc,CAACtH,EAAQ0T,cAI3B,cAACvF,EAAA,EAAD,CAAYlO,UAAWD,EAAQyQ,UAA/B,SACG8C,EAAQ5M,QAEX,wBACA,eAACwH,EAAA,EAAD,CACElO,UAAWD,EAAQ2T,UACnBrO,MAAO,CAAEhC,WAAY,QAFvB,YAIKiQ,EAAQ/E,MAAMtI,QAAQ,IAAIC,iBAC5B,MACCoN,EAAQa,wBAA0Bb,EAAQc,eAG7Cd,EAAQa,wBACP,mCACE,eAACjG,EAAA,EAAD,CAAYlO,UAAWD,EAAQ2T,UAA/B,UACG,MA9CC,OAiDCO,EAAehO,QAAQ,IAAIC,iBAC7B,KACAoN,EAAQc,mBAnCjB,UAKUd,EAAQY,YALlB,YAKiCZ,EAAQ5M,iBCtFtC2N,GAAchW,IAAMsB,MAAa,SAACC,GAAW,IAEtD0U,EAKE1U,EALF0U,WACAC,EAIE3U,EAJF2U,YACAC,EAGE5U,EAHF4U,eACAC,EAEE7U,EAFF6U,wBACAC,EACE9U,EADF8U,qBAGIZ,EAAWtM,mBAAqB,WAcpC,MAAO,CAbqB,CAC1Bd,MAAM,GAAD,OAAK4N,EAAL,QACLJ,YAAaK,EACbhG,MAAOiG,EACPJ,YAAa,KAEc,CAC3B1N,MAAO,mBACPwN,YAAaO,EACblG,MAAOmG,EACPN,YAAa,QAId,CACDE,EACAE,EACAD,EACAG,EACAD,IAGF,OAAO,cAACd,GAAD,CAAWC,MAAK,UAAKU,EAAL,UAAyBR,SAAUA,OC9B/Ca,GAAmBtW,IAAMsB,MAAa,SAACC,GAAW,IAE3DgV,EAOEhV,EAPFgV,eACAC,EAMEjV,EANFiV,eACAC,EAKElV,EALFkV,0BACAC,EAIEnV,EAJFmV,wBACAC,EAGEpV,EAHFoV,+BACAb,EAEEvU,EAFFuU,uBACAc,EACErV,EADFqV,KAGInB,EAAWtM,mBAAqB,WAgBpC,MAAO,CAfqB,CAC1Bd,MAAM,UAAD,OAAYkO,GACjBrG,MAAOsG,EACPT,YAAa,IACbD,uBAAwBA,EACxBF,eAAgBc,GAEW,CAC3BrO,MAAO,oBACP6H,MAAOuG,EACPV,YAAa,IACbD,uBAAwBA,EACxBF,eAAgBe,MAIjB,CACDH,EACAC,EACAX,EACAS,EACAI,EACAD,IAIIlB,EAAWoB,EAEjB,OACE,cAACtB,GAAD,CACEC,MALU,eAMVC,SAAUA,EACVC,SAAUA,EACVP,cAAY,O,uCC/BZ2B,GAAmB,GAEnBhW,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+V,MAAO,CACLnU,QAAS,OACTE,WAAY,SACZwB,eAAgB,UAElB0S,eAAgB,CACdlG,SAAU,WACV3L,MAAO,QACP9D,SAAU,OACViB,gBAAiB,WAEnBuL,YAAY,aACV1I,MAAO,OAEP3B,MAAOtB,EACPU,QAAS,OACTC,cAAe,MACfyB,eAAgB,SAChBxB,WAAY,SACZ4G,aAAc,gCAEdrH,QAAQ,GAAD,OAAKyU,EAAL,QAGN9V,EAAMkH,YAAYC,KAAK,MAAQ,IAOlCqN,MAAO,CACLjS,WAAY,QAEd2B,UAAW,CACT6E,YAAa,UACb5E,MAAO,SACPlC,OAAQ,SACR6N,SAAU,QACVC,KAAM,GAERkG,iBAAiB,aACfnG,SAAU,WACVK,MAAM,GAAD,OAAK2F,IAAL,OACL5F,IAAI,GAAD,OAAK4F,IAAL,QAEF9V,EAAMkH,YAAYC,KAAK,MAAQ,CAC9BgJ,MAAM,GAAD,OAAK2F,MAAL,OACL5F,IAAI,GAAD,OAAK4F,MAAL,SAGPI,gBAAiB,CACfpG,SAAU,WACVC,KAAK,GAAD,OAAK+F,GAAL,OACJ5F,IAAI,GAAD,OAAK4F,GAAL,QAGLK,iBAAkB,CAEhBC,cAAe,OACfhW,YAAa,SACbD,aAAc,SACd8C,UAAW,SAEXT,MAAOrB,OAIEkV,GAAiBpX,IAAMsB,MAAa,SAACC,GAChD,IAAMG,EAAUb,KACRwW,EAAqC9V,EAArC8V,KAAMC,EAA+B/V,EAA/B+V,WAAYC,EAAmBhW,EAAnBgW,eACpBxW,EAAQyW,eAERC,EAA8C,kBAAnBF,EAE3BhC,EAAQkC,EACV,iCAEA,uCAEEC,EAAUD,EACZ,wCACA,gCAEJ,OACE,cAACE,GAAA,EAAD,CAAON,KAAMA,EAAM1V,UAAWD,EAAQoV,MAAOc,gBAAiBN,EAA9D,SACE,cAACO,GAAA,EAAD,CAAMC,GAAIT,EAAV,SACE,sBAAK1V,UAAWD,EAAQqV,eAAxB,UAEE,qBAAKpV,UAAWD,EAAQsV,iBAAxB,SACE,cAACe,GAAA,EAAD,CAAYrQ,QAAS4P,EAArB,SACE,cAAC,KAAD,QAKJ,qBAAK3V,UAAWD,EAAQkM,YAAxB,SACE,cAACiC,EAAA,EAAD,CAAYkF,QAAS,KAAMpT,UAAWD,EAAQ6T,MAA9C,SACGA,MAIL,sBAAK5T,UAAWD,EAAQwV,iBAAxB,UACE,cAAC,KAAD,CACEc,KAAMP,EAA2B,YAAc,QAC/ClU,MAAOxC,EAAMuB,QAAQoB,QAAQC,OAE/B,cAACkM,EAAA,EAAD,UAAa6H,iBCzCnBb,GAAmB,GAEnBhW,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+V,MAAO,CACLnU,QAAS,OACTE,WAAY,SACZwB,eAAgB,SAChBd,MAAOtB,GAQTgW,uBAAwB,CACtBpH,SAAU,WACV3L,MAAO,UACP9D,SAAU,OACViB,gBAAiBN,GAEnB6L,YAAY,aACV1I,MAAO,OAEPvC,QAAS,OACTC,cAAe,MACfyB,eAAgB,SAChBxB,WAAY,SACZ4G,aAAc,gCAEdrH,QAAQ,GAAD,OAAKyU,EAAL,QAGN9V,EAAMkH,YAAYC,KAAK,MAAQ,IAOlCqN,MAAO,GACPtQ,UAAW,CACT6E,YAAa,UACb5E,MAAO,SACPlC,OAAQ,SACR6N,SAAU,QACVC,KAAM,GAERkG,iBAAiB,aACfnG,SAAU,WACVK,MAAM,GAAD,OAAK2F,IAAL,OACL5F,IAAI,GAAD,OAAK4F,IAAL,QAEF9V,EAAMkH,YAAYC,KAAK,MAAQ,CAC9BgJ,MAAM,GAAD,OAAK2F,MAAL,OACL5F,IAAI,GAAD,OAAK4F,MAAL,SAGPI,gBAAiB,CACfpG,SAAU,WACVC,KAAK,GAAD,OAAK+F,GAAL,OACJ5F,IAAI,GAAD,OAAK4F,GAAL,QAGLqB,QAAS,CACPC,WAAY,OACZhB,cAAe,OACfhW,YAAa,SACbD,aAAc,SAEdmB,gBAAiB,IAAImB,IAAMzB,GACxBqW,IAAI5U,IAAMC,IAAI,CAAC,EAAG,EAAG,IAAK,KAC1BI,WAIMwU,GAAyBrY,IAAMsB,MAAa,SAACC,GAAW,IAEjE8V,EA+CE9V,EA/CF8V,KACAC,EA8CE/V,EA9CF+V,WAGAgB,EA2CE/W,EA3CF+W,eACAC,EA0CEhX,EA1CFgX,sBACAC,EAyCEjX,EAzCFiX,2BACAC,EAwCElX,EAxCFkX,sBACAC,EAuCEnX,EAvCFmX,wBAGAC,EAoCEpX,EApCFoX,kBACAC,EAmCErX,EAnCFqX,gBACAxC,EAkCE7U,EAlCF6U,wBAGAyC,EA+BEtX,EA/BFsX,gBACAC,EA8BEvX,EA9BFuX,iBACAC,EA6BExX,EA7BFwX,UACAC,EA4BEzX,EA5BFyX,UAGA/C,EAyBE1U,EAzBF0U,WACAgD,EAwBE1X,EAxBF0X,UACAC,EAuBE3X,EAvBF2X,gBAGAC,EAoBE5X,EApBF4X,gBACAC,EAmBE7X,EAnBF6X,0BACAC,EAkBE9X,EAlBF8X,mBACAC,EAiBE/X,EAjBF+X,uBACAC,EAgBEhY,EAhBFgY,0BACAC,EAeEjY,EAfFiY,qCACAC,EAcElY,EAdFkY,gBAGAC,EAWEnY,EAXFmY,mBACAC,EAUEpY,EAVFoY,iBACAC,EASErY,EATFqY,yBACAC,EAQEtY,EARFsY,oBAMAC,GAEEvY,EALFwY,uBAKExY,EAFFuY,wBACAE,EACEzY,EADFyY,yBAGItY,EAAUb,KAGVoZ,EAA0B,WAAfhE,EAES9M,mBAAQ,cAAU,IAE5C,GAAI6Q,GAA4BF,EAAwB,CACtD,IAAMvC,EAAkCyC,EACpC,eACA,gBAEJ,OACE,cAAC5C,GAAD,CACEC,KAAMA,EACNC,WAAYA,EACZC,eAAgBA,IAKtB,OACE,cAACI,GAAA,EAAD,CAAON,KAAMA,EAAM1V,UAAWD,EAAQoV,MAAOc,gBAAiBN,EAA9D,SACE,cAACO,GAAA,EAAD,CAAMC,GAAIT,EAAV,SACE,sBAAK1V,UAAWD,EAAQuW,uBAAxB,UAEE,qBAAKtW,UAAWD,EAAQsV,iBAAxB,SACE,cAACe,GAAA,EAAD,CAAYrQ,QAAS4P,EAArB,SACE,cAAC,KAAD,QAKJ,cAACxO,EAAD,CACEC,OAAQ4P,EACR3P,aAAc,CAACtH,EAAQuD,UAAWvD,EAAQuV,mBAI5C,qBAAKtV,UAAWD,EAAQkM,YAAxB,SACE,cAACiC,EAAA,EAAD,CAAYkF,QAAS,KAAMpT,UAAWD,EAAQ6T,MAA9C,SACGqD,MAKL,sBACE5R,MAAO,CACLrE,QAAS,OACTC,cAAe,MACfC,WAAY,SACZwB,eAAgB,UALpB,UAQGiU,EAEAG,GACC,cAAC3D,GAAA,EAAD,CACEvR,MAAO,UACPyD,MAAO,CAAE8C,YAAa,SAAUoQ,UAAW,QAC3CnF,QAAS,WACTrN,QAAS8Q,EACT3D,UAAW6D,EALb,SAOE,cAAC7I,EAAA,EAAD,CAAYkF,QAAS,QAArB,SACGwD,SAOT,sBACEvR,MAAO,CACLrE,QAAS,OACTC,cAAe,OAHnB,UAME,qBACEoE,MAAO,CACLgD,KAAM,EACNhG,UAAW,SACXyF,aACsB,IAApBoP,EAAA,oBACiBjX,GACb,QAPV,SAUE,cAACkT,GAAA,EAAD,CAAQE,WAAS,EAACtN,QAAS,kBAAMoR,EAAiB,IAAlD,SACE,cAACjJ,EAAA,EAAD,UAAakJ,QAGjB,qBACE/R,MAAO,CACLgD,KAAM,EACNhG,UAAW,SACXyF,aACsB,IAApBoP,EAAA,oBACiBjX,GACb,QAPV,SAUE,cAACkT,GAAA,EAAD,CAAQE,WAAS,EAACtN,QAAS,kBAAMoR,EAAiB,IAAlD,SACE,cAACjJ,EAAA,EAAD,UAAamJ,WAMnB,sBAAKrX,UAAWD,EAAQwW,QAAxB,UAEE,cAAClC,GAAD,CACEC,WAAYA,EACZE,eAAgB8C,EAChB/C,YAAayC,EACbtC,qBAAsB6C,EACtB9C,wBAAyBA,IAE3B,uBAGC+C,GACC,qCACE,uBACA,cAAC7C,GAAD,CACEC,eAAgB0D,EAAW,UAAY,QACvCzD,eAAgB6C,GAAsB,EACtC5C,0BAA2B8C,GAA6B,EACxD5C,+BACE6C,GAAwC,EAE1C9C,wBAAyB4C,GAA0B,EACnDxD,uBAAwBsD,EACxBxC,KAAM6C,IAER,0BAIJ,uBAEA,cAAC9E,GAAD,CACEjN,QAASmS,EACTjF,KACE8E,IAAuBE,EACnBD,EACAC,EAEN/E,UAAW6E,IAGb,uBACA,oC,4BCvXCS,GAaD,CACRC,oBAAqB,KACrBC,aAAc,KACdC,kBAAmB,MCgBhB,SAASC,KAA6B,IAAD,EACkB1L,oBAAS,GAD3B,mBACnCiL,EADmC,KACXU,EADW,OAEsB3L,oBAC9D,GAHwC,mBAM1C,MAAO,CACLiL,yBACAE,yBARwC,KASxCQ,4BACAC,4BAVwC,MAiBrC,SAASC,GACdC,EACArD,EACAkD,EACAC,GAsCA,OApCkC7N,sBAAW,sBAAC,gCAAAvD,EAAA,6DAI5CmR,GAA0B,GAJkB,kBAOvBG,IAPuB,cAO1CC,EAP0C,OAU1CH,GAA4B,GAVc,mBAYpBG,SAZoB,aAYpB,EAAYC,OAZQ,OAYpCC,EAZoC,OAa1C7N,QAAQC,IAAI4N,GAb8B,qDAetC,KAAEC,OAASZ,GAA8BC,oBAfH,iBAiBxCnN,QAAQC,IAAI,kBAjB4B,8BAqBxCoK,IArBwC,8BA0B1CkD,GAA0B,GAC1BC,GAA4B,GA3Bc,6EA6B3C,CACDnD,EACAmD,EACAD,EACAG,IC5EG,SAASK,KACd,IAAM5a,EAAeD,IACfO,EAAcD,IACdH,EAAuBD,IACvBG,EAAcD,IACdK,EAAgBN,EAAqBM,cACrCqa,GACS,OAAbra,QAAa,IAAbA,OAAA,EAAAA,EAAesa,2BACf,IAAIC,IACAC,EAAmB1a,EAAY0a,iBAE/BC,EAAcJ,EAAwB1L,IAAI6L,GAC1CE,GAA0B,OAAXD,QAAW,IAAXA,OAAA,EAAAA,EAAatS,UAAWvI,EAAY+a,iBAEnD3Q,EAAW,OAAGhK,QAAH,IAAGA,OAAH,EAAGA,EAAe0O,wBAAwBC,IACzD6L,GAGII,GAAoB,OAAX5Q,QAAW,IAAXA,OAAA,EAAAA,EAAa6Q,gBAAiB,GAEvCC,GAA+B,OAAXL,QAAW,IAAXA,OAAA,EAAAA,EAAatS,SAAU,GAC3C4S,GAA6B,OAAXN,QAAW,IAAXA,OAAA,EAAAA,EAAa7U,OAAQ,GACvCoV,GACS,OAAbhb,QAAa,IAAbA,OAAA,EAAAA,EAAeib,wBAAwB9S,SAAU,OAE7C+S,GAA2B,OAAXlR,QAAW,IAAXA,OAAA,EAAAA,EAAae,kCAAmC,EAChEoQ,EAAmBD,EAAgB,EACnCE,GAAiBV,EAEjBW,GAA6B,OAAXrR,QAAW,IAAXA,OAAA,EAAAA,EAAasR,qBAAsB,EACrDC,GAAqC,OAAXvR,QAAW,IAAXA,OAAA,EAAAA,EAAauR,0BAA2B,EAClEC,GAAkC,OAAbxb,QAAa,IAAbA,OAAA,EAAAA,EAAewb,qBAAsB,GAC1DC,GAAuC,OAAbzb,QAAa,IAAbA,OAAA,EAAAA,EAAe0b,eAAgB,EAGzDxI,GAAoC,OAAblT,QAAa,IAAbA,OAAA,EAAAA,EAAekT,uBAAwB,EAC9DW,GACS,OAAb7T,QAAa,IAAbA,OAAA,EAAAA,EAAe6T,+BAAgC,EAC3CV,GAAwC,OAAbnT,QAAa,IAAbA,OAAA,EAAAA,EAAemT,2BAA4B,EACtEwI,GAAwC,OAAb3b,QAAa,IAAbA,OAAA,EAAAA,EAAe2b,2BAA4B,EAEtElG,GAAoC,OAAbzV,QAAa,IAAbA,OAAA,EAAAA,EAAeyV,uBAAwB,EAC9D/K,GAAuB,OAAXV,QAAW,IAAXA,OAAA,EAAAA,EAAaW,yBAA0B,EACnDH,GAAuB,OAAXR,QAAW,IAAXA,OAAA,EAAAA,EAAaS,yBAA0B,EAGnDmR,GAAmC,OAAb5b,QAAa,IAAbA,OAAA,EAAAA,EAAe0b,eAAgB,EACrDG,EAAwBD,EAAsB,EAG9CE,EAAwBF,EAAsBP,EAIpD,MAAO,CACL7b,eACAM,cACAJ,uBACAM,gBACAwa,mBACAgB,qBACAd,eACA1Q,cACA4Q,SACAE,oBACAC,kBACAC,0BACAzQ,gBAfgC,OAAXP,QAAW,IAAXA,OAAA,EAAAA,EAAaO,kBAAkB,EAgBpD4I,2BAEA+H,gBACAC,mBACAC,gBAEAO,2BACAN,kBACAE,0BACAE,0BAEAvI,uBACAW,+BAEA4B,uBACA/K,YACAF,YAEAqR,wBACAC,yBAIG,SAASC,KAAsC,IAAD,EACP9N,mBAAqB,GADd,mBAC5C+N,EAD4C,KAWnD,MAAO,CACLA,iBACAC,kBAbiD,MAiB9C,SAASC,GAAmCF,GACjD,MAAO,CAAoB,IAAnBA,EAAyC,IAAnBA,GAGzB,SAASG,GACdvB,EACAJ,EACA9D,EACAkD,EACAC,GAEA,IAAMra,EAAeD,IAUf6c,EAAkBtC,GARD9N,uBAAY,WACjC,OAAOxM,EAAa6c,kBAClB7B,EACAI,EACA0B,KAAOC,UAAUC,cAElB,CAAChd,EAAcgb,EAAkBI,IAIlClE,EACAkD,EACAC,GAcF,OAXwB7N,sBAAW,sBAAC,sBAAAvD,EAAA,yDAC7BmS,EAD6B,yCAEzBvO,QAAQC,IAAI,sBAFa,uBAK5B8P,IAL4B,cAOlC/P,QAAQC,IAAR,yBAPkC,SAQ5BD,QAAQC,IAAR,oBAR4B,2CASjC,CAACsO,EAAQwB,IAaP,SAASK,GACdC,EACA7I,EACA8I,EACAC,EACArB,EAMAsB,GAEA,IAAMC,EAAoBC,GAAkBF,GACtCG,EAAoBF,EAAkBH,EAAgBC,GAEtDK,EAAgCH,EACpCE,EAAoBzB,GAGhB7C,EAAyBoE,EAC7BJ,EAAwBO,GAGpBrE,EAEJ,IADAkE,EAAkBjJ,EAA+B6E,GAKnD,MAAO,CACLsE,oBACAE,uBAJ6BtE,EAAuC,IAKpEqE,gCACAvE,yBACAE,wCAsDG,SAASuE,GACdhK,EACAU,EACA8I,EACAC,EAMAC,GAEA,IAAMC,EAAoBC,GAAkBF,GACtCG,EAAoBF,EAAkBH,EAAgBC,GAEtDQ,EAA2BN,EAC/BjJ,EAA+BmJ,GAO3BpE,EAGA,IAFJkE,GAHAjJ,EAA+BwJ,KAAKC,IAAIN,IAII7J,GAK9C,MAAO,CACL6J,oBACAE,uBAJ6BtE,EAAuC,IAKpEwE,2BACAxE,wCAmBG,SAASmE,GAAkBQ,GAChC,OAAO,SAACC,GACN,OAAOC,GAAiBD,EAAOD,IAInC,SAASE,GAAiBD,EAAeD,GACvC,OAAO1Q,WAAW2Q,EAAMxW,QAAQuW,ICtTlC,IAAMtd,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+F,UAAW,CACT5B,MAAO,OACPiT,WAAY,OACZ/V,QAAS,SACTO,QAAS,OACTC,cAAe,SACfC,WAAY,SACZwB,eAAgB,UAElBia,UAAW,CACTpZ,MAAO,OACPlC,OAAQ,QAEVub,OAAQ,CACNta,WAAY,QACZ,UAAW,CAGT5B,gBAAiBtB,EAAMuB,QAAQoB,QAAQC,OAO3C,oBAAqB,CAGnB,KAAM,GAGN,OAAQ,QAMC6a,GAAmBxe,IAAMsB,MAAa,SAACC,GAClD,IAAMG,EAAUb,KACRgV,EAAqCtU,EAArCsU,YAAa6B,EAAwBnW,EAAxBmW,QAAS+G,EAAeld,EAAfkd,WAE9B,OACE,sBAAK9c,UAAWD,EAAQoF,UAAxB,UACE,cAACgC,EAAD,CACEC,OAAQ8M,EACR7M,aAAc,CAACtH,EAAQ4c,UAAW5c,EAAQ6c,UAE5C,uBAEA,cAAC1O,EAAA,EAAD,UAAa6H,IACZ+G,GACC,qCACE,cAAC5O,EAAA,EAAD,CAAYkF,QAAS,QAArB,SAA+B0J,IAAyB,aC3BrDC,GAAc9Y,aACzB,SAACrE,GAAW,IACF8V,EAAqB9V,EAArB8V,KAAMC,EAAe/V,EAAf+V,WADL,EAmCL0D,KA9BFpQ,GALO,EAIPtK,qBAJO,EAKPsK,aAEAxK,GAPO,EAMPM,YANO,EAOPN,cACAgb,EARO,EAQPA,iBACAgB,EATO,EASPA,mBAEAd,GAXO,EAUP1a,cAVO,EAWP0a,cACAE,EAZO,EAYPA,OACArQ,EAbO,EAaPA,eACA4I,EAdO,EAcPA,yBAEA+H,EAhBO,EAgBPA,cACAC,EAjBO,EAiBPA,iBACAC,EAlBO,EAkBPA,cAEAJ,EApBO,EAoBPA,wBACAF,EArBO,EAqBPA,kBACAC,EAtBO,EAsBPA,gBACAY,EAvBO,EAuBPA,yBACAN,EAxBO,EAwBPA,gBAEAE,EA1BO,EA0BPA,wBACArI,EA3BO,EA2BPA,qBACAW,EA5BO,EA4BPA,6BACA4B,EA7BO,EA6BPA,qBAEA/K,GA/BO,EA8BPF,UA9BO,EA+BPE,WA/BO,KAiCPmR,sBAjCO,EAkCPC,sBAMEC,MAFFC,EAtCO,EAsCPA,eACAC,EAvCO,EAuCPA,kBAvCO,EA+CLtC,KAJFT,EA3CO,EA2CPA,uBACAE,EA5CO,EA4CPA,yBACAQ,EA7CO,EA6CPA,0BACAC,EA9CO,EA8CPA,4BA9CO,EAiDsBqC,GAC7BF,GAlDO,mBAiDFtQ,EAjDE,KAiDQqS,EAjDR,KAqDHC,EAAkB7B,GACtBvB,EACAJ,EACA9D,EACAkD,EACAC,GA1DO,EA8DiD5L,oBAAS,GA9D1D,mBA8DFgQ,EA9DE,KA8DqBC,EA9DrB,OA+DuCjQ,mBAAS,GA/DhD,mBA+DFkQ,EA/DE,KA+DgBC,EA/DhB,OAgE2CnQ,mBAAS,GAhEpD,mBAgEFoQ,GAhEE,KAgEkBC,GAhElB,KAkETC,qBAAU,WAERL,GAAyB,KACxB,CAACtD,IAEJ,IAAM4D,GAAwBxS,uBAAY,WACxCoS,EAAoB,GACpBE,GAAsB,GACtB5H,MACC,CAACA,IAOE+H,GAAiBlW,mBAAQ,WAC7B,OACE,qBACEnC,MAAO,CACL9B,MAAO,OACP9C,QAAS,SACTO,QAAS,OACTC,cAAe,MACfC,WAAY,SACZwB,eAAgB,UAPpB,SAUE,cAACib,GAAA,EAAD,CACEtY,MAAO,CAAEhD,UAAW,UACpBub,WAAY,CAAEvY,MAAO,CAAEhD,UAAW,SAAUwb,WAAY,SACxDxH,KAAM,SACNzC,MAAO,QACP/O,KAAM,QACN0J,MAAO5D,EAAWyS,EAAmBE,GACrC3R,SAAU,SAACC,GAAD,OACRjB,EACI0S,EAAoBS,GAAqBlS,EAAEjG,OAAO4I,QAClDgP,GAAsBO,GAAqBlS,EAAEjG,OAAO4I,eAK/D,CAAC5D,EAAUyS,EAAkBE,KAG1BS,GAAgB,OAAG9U,QAAH,IAAGA,OAAH,EAAGA,EAAa+U,gBAChCC,IAAyC,OAAXhV,QAAW,IAAXA,OAAA,EAAAA,EAAauB,uBAAwB,EAEnE0T,IADuC,OAAXjV,QAAW,IAAXA,KAAakV,yBAElC,OAAXlV,QAAW,IAAXA,OAAA,EAAAA,EAAamV,4BAA6BC,KAAUC,KAAK,IACrDC,GAAmBN,GAA8B,EACjDO,GAAmB1L,EAA+B,EAElD2L,GAAkCxT,uBAAY,WAClDK,QAAQC,IAAR,2CAAgD2R,EAAhD,MACAC,GAA0BD,KACzB,CAACA,IAwBEwB,GAAsBzT,uBAC1B,kBAEExM,EAAakgB,4BACX9E,EACAqE,GACAvE,EACAc,KAEJ,CACEhc,EACAob,EACAqE,GACAvE,EACAc,IAIJnP,QAAQC,IAAR,+BAC0BwO,EAD1B,sBACkD9Q,QADlD,IACkDA,OADlD,EACkDA,EAAa2V,qBAG/DtT,QAAQC,IAAR,wBAA6B+R,GAAmBuB,aAEhD,IAAMC,GAAkB/F,IA9CD,kBACrBta,EAAasgB,eACXlF,EACA0B,KAAOyD,MAAMC,WACX7B,EAAiByB,YACN,OAAX5V,QAAW,IAAXA,OAAA,EAAAA,EAAa2V,sBAAuB,GAEtCjF,EACAc,KAwCF9E,EACAkD,EACAC,GAGIoG,GAAoBnG,IA1CD,kBACvBta,EAAa0gB,mBACXtF,EACA0B,KAAOyD,MAAMC,WACX3B,GAAmBuB,YACR,OAAX5V,QAAW,IAAXA,OAAA,EAAAA,EAAa2V,sBAAuB,GAEtCjF,EACAc,KAoCF9E,EACAkD,EACAC,GAGIsG,GAAuBrG,GAC3B2F,GACA/I,EACAkD,EACAC,GAGIuG,GAAkBpU,sBAAW,sBAAC,sBAAAvD,EAAA,6DAClC4D,QAAQC,IAAR,yBADkC,SAG5BuT,KAH4B,OAKlCxT,QAAQC,IAAR,oBALkC,2CAMjC,CAACuT,KAEEQ,GAAoBrU,sBAAW,sBAAC,sBAAAvD,EAAA,yDACpC4D,QAAQC,IAAR,4BAGI2R,EAJgC,gCAK5BkC,KAL4B,6CAO5BF,KAP4B,OAUpC5T,QAAQC,IAAR,sBAVoC,2CAWnC,CAAC2R,EAAuBkC,GAAsBF,KAEjD5T,QAAQC,IAAI,CAAE2R,0BACd,IAAMqC,GAA0B/X,mBAAmB,WACjD,OAAImD,EACE0P,IAAkB0D,GAGlB,cAAClB,GAAD,CACE3I,YAAa6F,EACbhE,QAAO,yBAAoBgE,EAApB,YAKJ2D,GAEAV,EACLE,EAEA,cAACL,GAAD,CACE3I,YAAa6F,EACbhE,QAAO,kBACP+G,WAAU,aAAQmB,GAA4BhY,QAC5C,IACCC,oBAKAwX,GAKJ,+BACN,CACDO,GACAF,GACAL,GACAR,EACAvS,EACAqS,EACA3C,EACAN,IAGIyF,GAAwBhY,mBAAsC,WAmBlE,MAlB+C,CAC7C,CACEoM,MAAM,GAAD,OAAKmG,EAAL,UACL0F,YAAanF,EACbpG,YAAa,KAEf,CACEN,MAAO,sBACP6L,YAAaxB,GACb/J,YAAa6F,GAEf,CACEnG,MAAO,iBACP6L,YAAatF,EACbjG,YAAa6F,MAKhB,CACDkE,GACA3D,EACAP,EACAI,IAMIuF,GACJtF,KAAqBC,GAAgB0D,IACjC4B,GAAcpB,GAEdzG,GAAmBtO,OAErBiE,EAFoB,iBACVsM,EADU,yCAKlB6F,GAAoBpY,mBAAwC,WAsBhE,MArByD,CAEvD0P,gBAAiB+D,EACjB9D,iBAAkB+D,EAClB9D,UAhOc,SAiOdC,UAhOc,WAmOdL,kBAAmB+C,EACnB9C,gBAAiB+C,EACjBvF,wBAAyBwF,EAGzBvC,mBAAoBtF,EACpBwF,0BAA2BzF,EAG3BkG,2BACAF,4BAID,CACD8C,EACA7I,EACA6H,EACAiB,EACAlB,EACAD,EACA5H,EACAkG,EACAF,IAII0H,GAAsCrY,mBAAwC,WAClF,IAAMsY,EAA0B1C,EAAmB,EAC7C2C,EAAkC3C,EAAmBjD,EACrD6F,EAA4BN,GAC9B,SACArF,EACA,UACA,aAEE4F,EACHH,GACCJ,KACCK,GACF1F,IAAkB0D,GACfmC,EAA0BR,GAC5BL,GACApC,EAEAkD,OAAkC1S,EACjC2M,EAEM2F,IACTI,EAAkC,4BAFlCA,EAAkC,uBAQpC,IAAMlI,EAA2BkI,EA5BuD,EAmCpFzE,GACFtJ,EACAU,EACAsK,EACA9C,EACAE,EACAI,GATAsB,EAhCsF,EAgCtFA,8BACAvE,EAjCsF,EAiCtFA,uBACAE,EAlCsF,EAkCtFA,qCA8CF,MA/BgD,CAE9ClB,eAAgB4I,GAChB3I,sBAAuB,GACvBE,uBAAuB,EACvBC,yBAAyB,EACzBF,gCAA4BpJ,EAG5B6G,WAAY,SACZgD,UAAW3N,EACX4N,gBAAiB7C,EAIjB8C,gBAAiBwF,GAAc0C,GAC/B/H,uBAAwBA,EACxBE,qCAAsCA,EACtCJ,0BAtBAjO,GAAoD,IAAlC0S,EAuBlBpE,mBAGAC,mBAAoBkI,EACpBjI,iBAAkBgI,EAClB/H,2BACAC,oBAAqBgI,EAGrB9H,uBAAwBoH,MAIzB,CACD1H,GACA4H,GACAlF,EACApI,EACAsC,EACA8K,GACAzB,GACA3D,EACA5Q,EACAwT,EACAuC,GACAlF,EACA4C,EACAoC,GACAzE,EACAN,EACA3Q,EACAyT,EACAtK,EACAqH,IAIIiG,GAAwC5Y,mBAAwC,WAEpF,IAF0F,EAgBtFkU,GACFtJ,EACAU,GACwC,GAbGtJ,EAJgB0T,EACzDe,GACAX,GAIA,GAYFhD,EACAE,EACAI,GAVAuB,EAZwF,EAYxFA,uBACAD,EAbwF,EAaxFA,8BACAvE,EAdwF,EAcxFA,uBACAE,EAfwF,EAexFA,qCAWEsI,OAAkC1S,EAClCgK,GAA4B,EAC5B4I,GAAuB,EAG3B,GAAInD,EACFzF,EAA4BjO,EAExB2S,IACFgE,EAAkC,wBAGpCE,GAAwBlE,MACnB,CAEL,IAAMmE,EAAqBhD,GAAqB,EAC1CiD,EACJjD,GAAqBW,GAUvBoC,EACEV,IACAW,IACCC,KAPApE,IACAqC,IACAA,KAAqBhV,GAQnB+U,GAEMgC,IACTJ,EAAkC,8BAFlCA,EAAkC,yBAQpC1I,EACEjO,GAAoD,IAAlC0S,EA2CtB,MA9BgD,CAE9CvF,eAAgB4I,GAChB3I,sBAPkCsG,EAChC,SACA,MAMFpG,sBAVsByH,GAWtBxH,wBAV0BwH,GAW1B1H,2BAA4B4H,GAG5BnK,WAAY,SACZgD,UAAW3N,EACX4N,gBAAiB7C,EAGjB8C,gBAAiBwF,EACjBrF,yBACAF,4BACAI,uCACAC,mBAGAC,mBAAoBsI,EACpBrI,iBA9BkC,WA+BlCC,yBA9B+BkI,EA+B/BjI,oBAjCgCoH,GAoChClH,uBAAwBoH,MAIzB,CACDtC,EACAe,GACAX,GACA9T,EACA4I,EACAU,EACAwH,EACAE,EACAI,EACA0E,GACAf,GACAgB,GACAd,GACA9U,EACA+K,EACAsI,EACAlF,GACA0H,GACAhB,GACAmB,KAGIa,GAAqB7V,EACvBkV,GACAO,GAEEK,GAA0BjZ,mBAAkC,WAMhE,OALuC,2BAClCoY,IACAY,MAIJ,CAACZ,GAAmBY,KAEvB,OACE,cAAC9J,GAAD,aACEhB,KAAMA,EACNC,WAAY8H,IACRgD,QAMZ,SAAS3C,GAAqB4C,GAG5B,IAFA,IAAIC,EAAaD,GAA6B,IAEvCC,EAAWjc,OAAS,GAA8B,MAAzBic,EAAWC,OAAO,IAChDtV,QAAQC,IAAR,wBAA6BoV,IAC7BA,EAAaA,EAAWlc,UAAU,EAAGkc,EAAWjc,QAChD4G,QAAQC,IAAR,uBAA4BoV,IAG9B,IAAME,GAAiBF,EACvB,OAAKD,GAA6BI,MAAMD,GAC/B,EAGFA,ECrmBT,IAIaE,GAAc9c,aACzB,SAACrE,GAAW,IACF8V,EAAqB9V,EAArB8V,KAAMC,EAAe/V,EAAf+V,WADL,EAmCL0D,KA9BFpQ,GALO,EAIPtK,qBAJO,EAKPsK,aAEAxK,GAPO,EAMPM,YANO,EAOPN,cACAgb,EARO,EAQPA,iBACAgB,EATO,EASPA,mBAEAd,GAXO,EAUP1a,cAVO,EAWP0a,cACAE,EAZO,EAYPA,OAGAM,GAfO,EAaP3Q,eAbO,EAeP2Q,eACAE,EAhBO,EAgBPA,cACAD,EAjBO,EAiBPA,iBAEAhI,EAnBO,EAmBPA,yBACA6H,EApBO,EAoBPA,wBACAF,EArBO,EAqBPA,kBACAC,EAtBO,EAsBPA,gBACAlH,EAvBO,EAuBPA,6BACAX,EAxBO,EAwBPA,qBAEAyI,GA1BO,EAyBPJ,wBAzBO,EA0BPI,0BAEAN,EA5BO,EA4BPA,gBACA5F,EA7BO,EA6BPA,qBACAjL,EA9BO,EA8BPA,UAGAsR,GAjCO,EA+BPpR,UA/BO,EAiCPoR,uBACAD,EAlCO,EAkCPA,sBAlCO,EA0CLlC,KAJFT,EAtCO,EAsCPA,uBACAE,EAvCO,EAuCPA,yBACAQ,EAxCO,EAwCPA,0BACAC,EAzCO,EAyCPA,4BAzCO,EA+CLkC,KAFFC,EA7CO,EA6CPA,eACAC,EA9CO,EA8CPA,kBA9CO,EAiDmBC,GAC1BF,GAlDO,mBAiDF3C,EAjDE,KAiDQ0I,EAjDR,KAqDH/D,EAAkB7B,GACtBvB,EACAJ,EACA9D,EACAkD,EACAC,GA1DO,EA6DiC5L,oBAAS,GA7D1C,mBA6DF+T,EA7DE,KA6DaC,EA7Db,OA8DuChU,mBAAS,GA9DhD,mBA8DFiU,EA9DE,KA8DgBC,EA9DhB,OA+DqClU,mBAAS,GA/D9C,mBA+DFmU,GA/DE,KA+DeC,GA/Df,KAiET9D,qBAAU,WAER0D,GAAiB,KAChB,CAACrH,IAEJ,IAAM4D,GAAwBxS,uBAAY,WACxCmW,EAAoB,GACpBE,GAAmB,GACnB3L,MACC,CAACA,IAOE+H,GAAiBlW,mBAAQ,WAC7B,OACE,qBACEnC,MAAO,CACL9B,MAAO,OACP9C,QAAS,SACTO,QAAS,OACTC,cAAe,SACfC,WAAY,SACZwB,eAAgB,UAPpB,SAUE,cAACib,GAAA,EAAD,CACEtY,MAAO,CAAEhD,UAAW,UACpBub,WAAY,CAAEvY,MAAO,CAAEhD,UAAW,WAClCgU,KAAM,SACNzC,MAAO,QACP/O,KAAM,QACN0J,MAAO+J,EAAW6I,EAAmBE,GACrC1V,SAAU,SAACC,GAAD,OACR0M,EACI8I,EAAoBtD,GAAqBlS,EAAEjG,OAAO4I,QAClD+S,GAAmBxD,GAAqBlS,EAAEjG,OAAO4I,eAK5D,CAAC4S,EAAkB7I,EAAU+I,KAG1BtD,GAAgB,OAAG9U,QAAH,IAAGA,OAAH,EAAGA,EAAa+U,gBAEhCuD,IAAkC,OAAXtY,QAAW,IAAXA,OAAA,EAAAA,EAAayB,uBAAwB,EAC5D8T,GAAmB+C,GAAuB,EAC1CC,GAA2BnH,IAAkB0D,GAa7C0D,GAAcja,mBAAQ,WAC1B,OAAIyZ,EACEtH,EAEK4B,KAAOyD,MAAMC,YAzIG,KA0IpBsC,IAAiD1C,YACvC,OAAX5V,QAAW,IAAXA,OAAA,EAAAA,EAAa2V,qBAAsB,GAG9BrD,KAAOC,UAAUC,WAGnBF,KAAOyD,MAAMC,WAClBoC,GAAgBxC,YACL,OAAX5V,QAAW,IAAXA,OAAA,EAAAA,EAAa2V,qBAAsB,KAGtC,QACD3V,QADC,IACDA,OADC,EACDA,EAAa2V,mBACb2C,GACA5H,EACAsH,EACAI,KAWIK,GAAkB3I,IA5CD,kBACrBta,EAAakjB,iBACX9H,EACA0B,KAAOyD,MAAMC,WACXkC,EAAiBtC,YACN,OAAX5V,QAAW,IAAXA,OAAA,EAAAA,EAAa2V,sBAAuB,GAEtCjF,EACAc,KAsCF9E,EACAkD,EACAC,GAGI8I,GAAiB7I,IAfD,kBACpBta,EAAaojB,cACXhI,EACA4H,GACA9H,EACAc,KAYF9E,EACAkD,EACAC,GAGIgJ,GAAkB7W,sBAAW,sBAAC,sBAAAvD,EAAA,yDAC7BmS,EAD6B,yCAEzBvO,QAAQC,IAAI,sBAFa,cAKlCD,QAAQC,IAAR,yBALkC,SAM5BmW,KAN4B,OAOlCpW,QAAQC,IAAR,oBAPkC,2CAQjC,CAACsO,EAAQ6H,KACNK,GAAyB9W,sBAAW,sBAAC,gCAAAvD,EAAA,yDACpCmS,EADoC,yCAEhCvO,QAAQC,IAAI,sBAFoB,QAMnCyW,GADAC,EAhMe,GAgMG7P,GACmBU,GAEpB,GACrBxH,QAAQC,IAAR,sDACiD0W,EADjD,6BACqFnP,IAErFsO,EAAoB,KAEdc,GACO,OAAXjZ,QAAW,IAAXA,OAAA,EAAAA,EAAakZ,oBAAoBH,KAAqB,EAIxDZ,EAAoBtV,WAAWoW,EAAkBjc,QAAQ,MAnBlB,2CAqBxC,CACD4T,EACA5Q,EACAmJ,EACAU,IAGIsP,GAAiBnX,sBAAW,sBAAC,sBAAAvD,EAAA,6DACjC4D,QAAQC,IAAR,wBADiC,SAE3BqW,KAF2B,OAGjCtW,QAAQC,IAAR,mBAHiC,2CAIhC,CAACqW,KAGES,IAA+B,OAAXpZ,QAAW,IAAXA,OAAA,EAAAA,EAAaoZ,oBAAqB,EAGtD3X,IAAkC,OAAXzB,QAAW,IAAXA,OAAA,EAAAA,EAAayB,uBAAwB,EAG5D4X,IAA6B,OAAXrZ,QAAW,IAAXA,OAAA,EAAAA,EAAaa,kBAAmB,EAElDyY,GAAkC,IAApBlB,GACdmB,GAAsBrI,EAAgBzP,GAGtC+X,GAAyBxX,uBAAY,WACzCK,QAAQC,IAAI,iBACZ2V,GAAkBD,KACjB,CAACA,IAEE1B,GAA0B/X,mBAAmB,WACjD,OAAIwZ,EACEQ,GAGA,cAAC3E,GAAD,CACE3I,YAAa6F,EACbhE,QAAO,yBAAoBgE,EAApB,YAGFkH,EAEP,cAACpE,GAAD,CACE3I,YAAa6F,EACbhE,QAAO,2BAAsBwL,GAAqBtb,QAChD,IACCC,iBAFI,OAOJwX,GAEApF,EAEFoF,GAIF,+BACN,CACD6D,GACA7D,GACApF,EACA0I,EACAC,EACAO,GACAzH,IAGIyF,GAAwBhY,mBAAsC,WAClE,MAAO,CACL,CACEoM,MAAM,GAAD,OAAKmG,EAAL,UACL0F,YAAanF,EACbpG,YAAa,KAEf,CACEN,MAAO,sBACP6L,YAAa/U,GACbwJ,YAAa6F,GAEf,CACEnG,MAAO,iBACP6L,YAAatF,EACbjG,YAAa6F,MAGhB,CACDrP,GACA4P,EACAP,EACAI,IASIuI,GAAoBpG,KAAKqG,IAC7B5H,EACAsH,IAIIzC,GAAoBpY,mBAAwC,WAwBhE,MAvByD,CAEvD0P,gBAAiB+D,EACjB9D,iBAAkB+D,EAClB9D,UAjPc,SAkPdC,UAjPc,QAoPdL,kBAAmB+C,EACnB9C,gBAAiB+C,EACjBvF,wBAAyBwF,EAKzBvC,mBAAoB5E,EACpB8E,0BAA2BzF,EAG3BgG,yBACAE,8BAID,CACD4C,EACAhB,EACAiB,EACAlB,EACAD,EACAjH,EACAX,EACAkG,EACAF,IAIIyK,GAAsCpb,mBAAwC,WAAM,MAOpF4U,GACFhK,EACAU,EACAqO,EACA7G,EACAM,GATAuB,EAHsF,EAGtFA,uBACAF,EAJsF,EAItFA,kBACApE,EALsF,EAKtFA,qCACAwE,EANsF,EAMtFA,yBASIwG,EACJ1B,EAAmBuB,GAGfI,EADe7G,EAEJqG,GAQbS,OAAgCtV,EAC/BqN,EAEM+H,EACTE,EAAgC,kCACvBD,EACTC,EAAgC,6BACvB5G,IACT4G,EAAgC,sBANhCA,EAAgC,0BAkDlC,MA7BgD,CAE9CpM,eAAgB4I,GAChB3I,sBAAuB,WACvBE,uBAAuB,EACvBC,wBAPA5E,EAAuB6Q,GAQvBnM,2BAA4BkL,GAG5BzN,WAAY,SACZgD,UAAW7N,EACX8N,gBAAiB7C,EAGjB8C,iBAAiB,EACjBG,uBAAwB0E,EACxBxE,qCAAsCA,EACtCJ,0BAtBsD,IAAtBwE,EAyBhClE,mBAhDA+C,IACC+H,IACAC,IACA3G,GAgBqCgF,EAAmB,EA8BzDnJ,iBAjCgC,SAkChCC,yBAjC+B8K,EAkC/B7K,oBA9B8B4J,GAiC9B1J,uBAAwBoH,MAIzB,CACD/V,EACA0X,EACAmB,GACAlQ,EACAsC,EACA8K,GACA1E,EACA4H,GACAnD,GACAuC,GACAC,GACAnH,EACAN,EACAxH,EACAX,IAII8Q,GAAqCzb,mBAAwC,WACjF,IAEMuY,EAAkCsB,GAAkBlH,EACpD+I,EACJ7B,GAAkB3W,GAGdyY,EACH/I,IACE2F,IACAmD,IACAX,MAXqBlI,GAAgB0D,KAaxCkD,EAEIlJ,EAAqBoL,GAAY3B,GACjC4B,EAAyB5B,GAC3BvE,EACAmF,GAEAiB,OAA+B5V,EAC/BsS,EACFsD,EAA+B,2BACtBH,EACTG,EAA+B,4BACtBd,KAETc,EAA+B,SAGjC,IAAMC,EAA2BH,EAC7B,QACA9I,EACA,UACA,GAEEpC,EAA2BoL,EArCsD,EA6CnFjH,GACFhK,EACAU,GACmB,EAAnBuO,GACA/G,EACAM,GATA/C,EAzCqF,EAyCrFA,qCACAoE,EA1CqF,EA0CrFA,kBAEAI,GA5CqF,EA2CrFF,uBA3CqF,EA4CrFE,0BASI5E,EAAkD,IAAtBwE,EAqClC,MA7BgD,CAE9CtF,eAAgB4I,GAChB3I,sBAT4BqK,EAAgB,SAAW,MAUvDnK,wBARCkK,IAAsBQ,IAA4BhD,GASnD3H,2BAPiC4L,GAQjC1L,wBAT8ByL,GAY9BlO,WAAY,SACZgD,UAAW,KACXC,gBAAiB7C,EAGjB8C,gBAAiBC,EACjBE,uBAAwB0E,EACxB5E,4BACAI,uCAGAE,qBAAsBA,EACtBC,iBAAkBsL,EAClBrL,2BACAC,oBAAqBkL,EAGrBhL,uBAAwBoH,MAIzB,CACD9U,GACA0H,EACAsC,EACA8K,GACAzB,GACAS,GACAgE,GACApI,EACA4G,EACAC,EACA1B,GACAlF,EACAmH,GACAvE,EACAmF,GACAK,GACA7H,EACAN,EACA+G,GACAkB,GACAzP,EACAqH,IAGIqG,GAAqBlI,EACvBsK,GACAK,GAEExC,GAA0BjZ,mBAAkC,WAMhE,OALuC,2BAClCoY,IACAY,MAIJ,CAACZ,GAAmBY,KAEvB,OACE,cAAC9J,GAAD,aACEhB,KAAMA,EACNC,WAAY8H,IACRgD,QAMZ,SAAS3C,GAAqB4C,GAG5B,IAFA,IAAIC,EAAaD,GAA6B,IAEvCC,EAAWjc,OAAS,GAA8B,MAAzBic,EAAWC,OAAO,IAChDtV,QAAQC,IAAR,wBAA6BoV,IAC7BA,EAAaA,EAAWlc,UAAU,EAAGkc,EAAWjc,QAChD4G,QAAQC,IAAR,uBAA4BoV,IAG9B,IAAME,GAAiBF,EACvB,OAAKD,GAA6BI,MAAMD,GAC/B,EAGFA,EC1lBT,IAAM3L,GAAmB,GAEnBhW,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+V,MAAO,CACLnU,QAAS,OACTE,WAAY,SACZwB,eAAgB,UAElB6gB,2BAA4B,CAC1BrU,SAAU,WACV3L,MAAO,QACP9D,SAAU,OACViB,gBAAiB,WAEnBuL,YAAY,aACV1I,MAAO,OACP3B,MAAO,UACPZ,QAAS,OACTC,cAAe,MACfyB,eAAgB,SAChBxB,WAAY,SACZ4G,aAAc,gCAEdrH,QAAQ,GAAD,OAAKyU,EAAL,QAGN9V,EAAMkH,YAAYC,KAAK,MAAQ,IAOlCqN,MAAO,CACLjS,WAAY,QAEd2B,UAAW,CACT6E,YAAa,UACb5E,MAAO,SACPlC,OAAQ,SACR6N,SAAU,QACVC,KAAM,GAERkG,iBAAiB,aACfnG,SAAU,WACVK,MAAM,GAAD,OAAK2F,IAAL,OACL5F,IAAI,GAAD,OAAK4F,IAAL,QAEF9V,EAAMkH,YAAYC,KAAK,MAAQ,CAC9BgJ,MAAM,GAAD,OAAK2F,MAAL,OACL5F,IAAI,GAAD,OAAK4F,MAAL,SAGPI,gBAAiB,CACfpG,SAAU,WACVC,KAAK,GAAD,OAAK+F,GAAL,OACJ5F,IAAI,GAAD,OAAK4F,GAAL,QAGLK,iBAAkB,CAChBiB,WAAY,OACZhB,cAAe,OACfhW,YAAa,SACbD,aAAc,SACd8C,UAAW,SAEXT,MAAOrB,GAGTgW,QAAS,CACPC,WAAY,OACZhB,cAAe,OACfhW,YAAa,SACbD,aAAc,SACdmB,gBAAiB,eAIR8iB,GAAkBnlB,IAAMsB,MAAa,SAACC,GACjD,IAAMG,EAAUb,KAEdwW,EAiBE9V,EAjBF8V,KACAC,EAgBE/V,EAhBF+V,WACAqB,EAeEpX,EAfFoX,kBAGAS,GAYE7X,EAdFqX,gBAcErX,EAZF6X,2BACAC,EAWE9X,EAXF8X,mBACAE,EAUEhY,EAVFgY,0BACAC,EASEjY,EATFiY,qCACAF,EAQE/X,EARF+X,uBACArD,EAOE1U,EAPF0U,WACAyD,EAMEnY,EANFmY,mBACAC,EAKEpY,EALFoY,iBACAE,EAIEtY,EAJFsY,oBAEAG,EAEEzY,EAFFyY,yBACAF,EACEvY,EADFuY,uBAGF,GAAIE,GAA4BF,EAAwB,CACtD,IAAMvC,EAAkCyC,EACpC,eACA,gBAEJ,OACE,cAAC5C,GAAD,CACEC,KAAMA,EACNC,WAAYA,EACZC,eAAgBA,IAKtB,OACE,cAACI,GAAA,EAAD,CAAON,KAAMA,EAAM1V,UAAWD,EAAQoV,MAAOc,gBAAiBN,EAA9D,SACE,cAACO,GAAA,EAAD,CAAMC,GAAIT,EAAV,SACE,sBAAK1V,UAAWD,EAAQwjB,2BAAxB,UAEE,qBAAKvjB,UAAWD,EAAQsV,iBAAxB,SACE,cAACe,GAAA,EAAD,CAAYrQ,QAAS4P,EAArB,SACE,cAAC,KAAD,QAKJ,cAACxO,EAAD,CACEC,OAAQ4P,EACR3P,aAAc,CAACtH,EAAQuD,UAAWvD,EAAQuV,mBAI5C,qBAAKtV,UAAWD,EAAQkM,YAAxB,SACE,eAACiC,EAAA,EAAD,CAAYkF,QAAS,KAAMpT,UAAWD,EAAQ6T,MAA9C,UACGU,EADH,sBAKF,qBAAKtU,UAAWD,EAAQwV,iBAAxB,SACE,eAACrH,EAAA,EAAD,2EACgE,IAC9D,uBAFF,8EAUF,sBAAKlO,UAAWD,EAAQwW,QAAxB,UAEE,cAAC5B,GAAD,CACEC,eAAgB,QAChBC,eAAgB6C,GAAsB,EACtC5C,0BAA2B8C,GAA6B,EACxD5C,+BACE6C,GAAwC,EAE1C9C,wBAAyB4C,GAA0B,EACnDxD,uBAAwBsD,IAG1B,uBACA,uBAGA,cAACzE,GAAD,CACEjN,QAASmS,EACTjF,KAAM+E,EACN9E,UAAW6E,iBCnMlB,IAAM0L,GAA2Bxf,aAEtC,SAACrE,GAAW,IACJ8V,EAAqB9V,EAArB8V,KAAMC,EAAe/V,EAAf+V,WADH,ECVN,WACgBnX,IAArB,IACMO,EAAcD,IACdH,EAAuBD,IACvBG,EAAcD,IACdK,EAAgBN,EAAqBM,cAErCqa,GACS,OAAbra,QAAa,IAAbA,OAAA,EAAAA,EAAesa,2BACf,IAAIC,IACAC,EAAmB1a,EAAY0a,iBAE/BC,EAAcJ,EAAwB1L,IAAI6L,GAG1CxQ,GAF0B,OAAXyQ,QAAW,IAAXA,KAAatS,OAAWvI,EAAY+a,iBAExC,OAAG3a,QAAH,IAAGA,OAAH,EAAGA,EAAe0O,wBAAwBC,IACzD6L,IAGII,GAAoB,OAAX5Q,QAAW,IAAXA,OAAA,EAAAA,EAAa6Q,gBAAiB,GACvC4J,GAA4B,OAAXza,QAAW,IAAXA,OAAA,EAAAA,EAAaya,iBAAkB,GAChDC,GAA8B,OAAX1a,QAAW,IAAXA,OAAA,EAAAA,EAAa0a,mBAAoB,GACpDnZ,GAAkC,OAAXvB,QAAW,IAAXA,OAAA,EAAAA,EAAauB,uBAAwB,EAC5DhB,GAA4B,OAAXP,QAAW,IAAXA,OAAA,EAAAA,EAAaO,kBAAkB,EAEhD8Q,GAA6B,OAAXrR,QAAW,IAAXA,OAAA,EAAAA,EAAasR,qBAAsB,EACrDC,GAAqC,OAAXvR,QAAW,IAAXA,OAAA,EAAAA,EAAauR,0BAA2B,EAClEmB,GAAqC,OAAb1c,QAAa,IAAbA,OAAA,EAAAA,EAAe0b,eAAgB,EACvDxI,GAAoC,OAAblT,QAAa,IAAbA,OAAA,EAAAA,EAAekT,uBAAwB,EAC9DW,GACS,OAAb7T,QAAa,IAAbA,OAAA,EAAAA,EAAe6T,+BAAgC,EAIjD,MAAO,CACL7T,gBACA4a,SACA6J,iBACAC,mBACAnZ,uBACAhB,iBAEAoR,0BAV4C,OAAb3b,QAAa,IAAbA,OAAA,EAAAA,EAAe2b,2BAA4B,EAW1EN,kBACAE,0BACAmB,wBACAxJ,uBACAW,gCDpBE8Q,GAbF3kB,EAJS,EAITA,cACA4a,EALS,EAKTA,OACArP,EANS,EAMTA,qBACAkZ,EAPS,EAOTA,eACAC,EARS,EAQTA,iBACAna,EATS,EASTA,eAEAoR,EAXS,EAWTA,yBACAzI,EAZS,EAYTA,qBACAW,EAbS,EAaTA,6BACA6I,EAdS,EAcTA,sBACAnB,EAfS,EAeTA,wBACAF,EAhBS,EAgBTA,gBAGIjN,GAAwB7D,EAGxBqa,GADiBxW,EAAuB,GAAK,GACX7C,EAElCwN,EAAmB3K,EAAoB,cAClCsW,EADkC,mCAE/BA,EAF+B,kBAIvCrP,EAAajH,EAAuB,SAAW,SA5B1C,EAmCPqO,GACFC,EACA7I,EACA+Q,EACAvJ,EACAE,EACAI,GARAjD,GAjCS,EAgCTuE,8BAhCS,EAiCTvE,wBACAE,EAlCS,EAkCTA,qCAlCS,ENVN,SACLmB,EACArD,GACC,IAAD,EAMIiD,KAJFP,EAFF,EAEEA,yBACAF,EAHF,EAGEA,uBACAW,EAJF,EAIEA,4BAWF,MAAO,CACLX,yBACAE,2BACAyL,0BAVgC/K,GAChCC,EACArD,EAVF,EAKEkD,0BAOAC,IMwDEiL,CAZuBvc,mBAAQ,WACjC,OAAI6F,EACK,yBAAMpO,QAAN,IAAMA,OAAN,EAAMA,EAAe+kB,2BAA2BnK,IAEhD,yBAAM5a,QAAN,IAAMA,OAAN,EAAMA,EAAeglB,0BAA0BpK,MAEvD,CAAC5a,EAAe4a,EAAQxM,IAMesI,GAHxCmO,EA1DS,EA0DTA,0BACA3L,EA3DS,EA2DTA,uBACAE,EA5DS,EA4DTA,yBAGI6L,EAAwBjZ,sBAAW,sBAAC,sBAAAvD,EAAA,sEAClCoc,IADkC,2CAEvC,CAACA,IAEJ,GAAIzL,GAA4BF,EAAwB,CACtD,IAAMvC,EAAkCyC,EACpC,eACA,gBAEJ,OACE,cAAC5C,GAAD,CACEC,KAAMA,EACNC,WAAYA,EACZC,eAAgBA,IAKtB,OACE,cAAC4N,GAAD,CACE9N,KAAMA,EACNC,WAAYA,EACZrB,WAAYA,EACZ0D,iBAAkBA,EAClBf,gBAAiByM,EACjB1M,kBAAmB2M,EACnB5L,oBA1CuB,EA2CvBG,oBAAqBgM,EACrBzM,2BA9C8B,EA+C9BE,uBAAwBA,EACxBD,mBAAoBiE,EACpB/D,0BAA2BzF,EAC3B0F,qCACEA,EAEFM,uBAAwBA,EACxBE,yBAA0BA,OEnE1BnD,GAAmB,GAEnBhW,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+V,MAAO,CACLnU,QAAS,OACTE,WAAY,SACZwB,eAAgB,UAElB6gB,2BAA4B,CAC1BrU,SAAU,WACV3L,MAAO,QACP9D,SAAU,OACViB,gBAAiB,WAEnBuL,YAAY,aACV1I,MAAO,OACP3B,MAAO,UACPZ,QAAS,OACTC,cAAe,MACfyB,eAAgB,SAChBxB,WAAY,SACZ4G,aAAc,gCAEdrH,QAAQ,GAAD,OAAKyU,EAAL,QAGN9V,EAAMkH,YAAYC,KAAK,MAAQ,IAOlCqN,MAAO,CACLjS,WAAY,QAEd2B,UAAW,CACT6E,YAAa,UACb5E,MAAO,SACPlC,OAAQ,SACR6N,SAAU,QACVC,KAAM,GAERkG,iBAAiB,aACfnG,SAAU,WACVK,MAAM,GAAD,OAAK2F,IAAL,OACL5F,IAAI,GAAD,OAAK4F,IAAL,QAEF9V,EAAMkH,YAAYC,KAAK,MAAQ,CAC9BgJ,MAAM,GAAD,OAAK2F,MAAL,OACL5F,IAAI,GAAD,OAAK4F,MAAL,SAGPI,gBAAiB,CACfpG,SAAU,WACVC,KAAK,GAAD,OAAK+F,GAAL,OACJ5F,IAAI,GAAD,OAAK4F,GAAL,QAGLK,iBAAkB,CAChBiB,WAAY,OACZhB,cAAe,OACfhW,YAAa,SACbD,aAAc,SACd8C,UAAW,SAEXT,MAAOrB,GAKT4jB,WAAY,CACVviB,MAAOtB,GAGTiW,QAAS,CAEPf,cAAe,OACfhW,YAAa,SACbD,aAAc,UAIhB6kB,UAAW,CACT/iB,OAAQ,OACRkC,MAAO,OACPoP,aAAc,YAIL0R,GAAiBhmB,IAAMsB,MAAa,SAACC,GAChD,IAAMG,EAAUb,KAEdwW,EAUE9V,EAVF8V,KACAC,EASE/V,EATF+V,WACA2O,EAQE1kB,EARF0kB,mBAEAC,GAME3kB,EAPF4kB,sBAOE5kB,EANF2kB,sBACAE,EAKE7kB,EALF6kB,eACAC,EAIE9kB,EAJF8kB,iBACAC,EAGE/kB,EAHF+kB,SACAC,EAEEhlB,EAFFglB,QACAC,EACEjlB,EADFilB,eAiBF,OACE,cAAC7O,GAAA,EAAD,CAAON,KAAMA,EAAM1V,UAAWD,EAAQoV,MAAOc,gBAAiBN,EAA9D,SACE,cAACO,GAAA,EAAD,CAAMC,GAAIT,EAAV,SACE,sBAAK1V,UAAWD,EAAQwjB,2BAAxB,UAEE,qBAAKvjB,UAAWD,EAAQsV,iBAAxB,SACE,cAACe,GAAA,EAAD,CAAYrQ,QAAS4P,EAArB,SACE,cAAC,KAAD,QAKJ,cAACxO,EAAD,CACEC,OAAQmd,EACRld,aAAc,CAACtH,EAAQuD,UAAWvD,EAAQuV,mBAI5C,qBAAKtV,UAAWD,EAAQkM,YAAxB,SACE,cAACiC,EAAA,EAAD,CAAYkF,QAAS,KAAMpT,UAAWD,EAAQ6T,MAA9C,SACG0Q,MAIL,sBAAKtkB,UAAWD,EAAQwV,iBAAxB,UACE,8BACE,cAACpO,EAAD,CACEC,OAAQmd,EACRld,aAAc,CAACtH,EAAQqkB,eAI3B,sBAAK/e,MAAO,CAAErE,QAAS,OAAQC,cAAe,OAA9C,UACE,sBAAKoE,MAAO,CAAEgD,KAAM,EAAGhG,UAAW,UAAlC,UACE,cAAC6L,EAAA,EAAD,CAAY7I,MAAO,CAAE1D,WAAY,QAAjC,4BAIA,cAACuM,EAAA,EAAD,CAAYkF,QAAS,QAASpT,UAAWD,EAAQokB,WAAjD,SACGM,EAAexe,QAAQ,QAI5B,sBAAKZ,MAAO,CAAEgD,KAAM,EAAGhG,UAAW,UAAlC,UACE,cAAC6L,EAAA,EAAD,CAAY7I,MAAO,CAAE1D,WAAY,QAAjC,+BAIA,cAACuM,EAAA,EAAD,CAAYkF,QAAS,QAASpT,UAAWD,EAAQokB,WAAjD,SACGO,EAAiBze,QAAQ,cAOlC,qBAAKjG,UAAWD,EAAQwW,QAAxB,SAgBE,cAACvD,GAAD,CACEjN,QAAS6e,EACT3R,KAAM0R,EAAQ,gBAAYJ,GAAyBM,EACnD3R,UAAWyR,gBC3NlB,IAAMG,GAA0B7gB,aAErC,SAACrE,GAAW,IACJ8V,EAAqB9V,EAArB8V,KAAMC,EAAe/V,EAAf+V,WADH,EChBN,WACgBnX,IACDM,IADpB,IAGMG,EADuBP,IACcO,cAS3C,MAAO,CACLA,gBACAslB,qBATwB,OAAGtlB,QAAH,IAAGA,OAAH,EAAGA,EAAeib,wBAAwB9S,OAUlEkd,mBATsB,OAAGrlB,QAAH,IAAGA,OAAH,EAAGA,EAAeib,wBAAwBrV,KAUhE2f,sBATyB,OAAGvlB,QAAH,IAAGA,OAAH,EAAGA,EAAeib,wBAAwBhW,QAUnEe,kBARoC,OAAbhG,QAAa,IAAbA,OAAA,EAAAA,EAAegG,mBAAoB,EAS1D8f,oBARsC,OAAb9lB,QAAa,IAAbA,OAAA,EAAAA,EAAe8lB,qBAAsB,GDe5DC,GANF/lB,EAJS,EAITA,cACAulB,EALS,EAKTA,sBACAF,EANS,EAMTA,mBACAC,EAPS,EAOTA,qBACAQ,EARS,EAQTA,mBACA9f,EATS,EASTA,iBATS,EAiBP2T,KAJFT,EAbS,EAaTA,uBACAE,EAdS,EAcTA,yBAKI4M,ECZD,SACLhmB,EACA0W,EACAkD,EACAC,GAEA,IAIMoM,EAAiBnM,GAJU9N,uBAAY,WAC3C,OAAOhM,EAAekmB,0BACrB,CAAClmB,IAIF0W,EACAkD,EACAC,GAaF,OAVuB7N,sBAAW,sBAAC,sBAAAvD,EAAA,0DAC7BzI,EAD6B,uBAE/BqM,QAAQC,IAAR,qCAF+B,SAGzB2Z,IAHyB,OAI/B5Z,QAAQC,IAAR,8BAJ+B,+CAMxBD,QAAQC,IAAI,6BANY,2CAQhC,CAACtM,EAAeimB,IDbIE,CACrBnmB,EACA0W,EArBS,EAeTkD,0BAfS,EAgBTC,6BAUE+L,EAAiB,GACjBF,GAAW,EAcf,GAZ2B,IAAvBI,GACFJ,GAAW,EACXE,EAAiB,oBACR1M,IACTwM,GAAW,EACXE,EAAiB,qBAEfxM,IACFsM,GAAW,EACXE,EAAiB,+BAGfxM,GAA4BF,EAAwB,CACtD,IAAMvC,EAAkCyC,EACpC,eACA,gBAEJ,OACE,cAAC5C,GAAD,CACEC,KAAMA,EACNC,WAAYA,EACZC,eAAgBA,IAKtB,OACE,cAACyO,GAAD,CACE3O,KAAMA,EACNC,WAAYA,EACZ6O,sBAAuBA,GAAyB,GAChDF,mBAAoBA,GAAsB,GAC1CC,qBAAsBA,GAAwB,GAC9CE,eAAgBxf,EAChByf,iBAAkBK,EAClBJ,SAAUA,EACVC,QAASK,EACTJ,eAAgBA,OE9EhB3lB,GAAYC,aAAW,iBAAO,CAClCkmB,KAAM,OAOKC,GAAqBrhB,aAChC,YAAoB,IAAjBshB,EAAgB,EAAhBA,UACKxlB,EAAUb,KADC,EAEKsmB,cAAdC,EAFS,EAETA,KAEF9mB,GAJW,EAEH+mB,IACEC,cACajnB,KAJZ,EAKSL,IAAM6O,SAAwB,MALvC,mBAKVC,EALU,KAQXpO,GARW,KAODJ,EAAqBM,cACjBH,KA2BpB,OAxBA0e,qBAAU,WACR7e,EAAqBinB,YAAYL,KAChC,CAAC5mB,EAAsB4mB,IAsBtB5mB,EAAqBknB,UAChB,cAAC3X,EAAA,EAAD,yBAGLf,EACK,eAACe,EAAA,EAAD,qBAAoBf,KAK3B,cADA,CACA,OAAKnN,UAAWD,EAAQslB,KAAxB,UAgBE,eAAC,IAAD,WACE,cAAC,IAAD,CACEI,KAAI,UAAKA,EAAL,YACJK,OAAK,EACLC,OAAQ,kBAAM,cAAChT,GAAD,OAEhB,cAAC,IAAD,CACE0S,KAAI,UAAKA,EAAL,eACJM,OAAQ,kBAAM,gDAEhB,cAAC,IAAD,CAAUtgB,GAAE,UAAKggB,EAAL,iBAId,cAAC1I,GAAD,CACErH,KAAM3W,EAAYinB,oBAClBrQ,WAAY,kBAAM5W,EAAYknB,qBAEhC,cAAClF,GAAD,CACErL,KAAM3W,EAAYmnB,oBAClBvQ,WAAY,kBAAM5W,EAAYonB,qBAEhC,cAAC1C,GAAD,CACE/N,KAAM3W,EAAYqnB,wBAClBzQ,WAAY,kBAAM5W,EAAYsnB,yBAGhC,cAACvB,GAAD,CACEnP,WAAY,kBAAM5W,EAAYunB,sBAC9B5Q,KAAM3W,EAAYwnB,+B,8BCzFtBrnB,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvConB,KAAM,CACJlnB,OAAQ,SACR0B,QAAS,OACTC,cAAe,SACfyB,eAAgB,gBAChBxB,WAAY,SAEZzB,SAAU,OACV8D,MAAO,QACP7C,gBAAiBN,EACjB0C,aAAc,MAGhB8Q,MAAO,CACLvR,UAAW,SACXV,WAAY,OACZC,MAAOtB,GAETmmB,WAAY,CAEV9kB,WAAY,OAEZ6U,WAAY,SACZhB,cAAe,SACfhW,YAAa,SACbD,aAAc,SACdyB,QAAS,OACTC,cAAe,MACfsC,MAAO,OACPb,eAAgB,gBAChBxB,WAAY,SACZR,gBAAiBP,EACjByB,MAAOvB,GAETqmB,aAAc,CACZ/kB,WAAY,OACZC,MAAO,UACP+kB,WAAY,OAEZzX,SAAU,YAEZ6B,QAAS,CACP/P,QAAS,OACT6G,SAAU,OACVnF,eAAgB,SAChBd,MAAOtB,GAETsmB,QAAS,CACPtnB,OAAQ,SACR+B,OAAQ,OACRkC,MAAO,QAETsjB,KAAM,CACJrQ,WAAY,GACZvT,OAAQ,UACRX,WAAY,iBACZ,UAAW,CAGT4E,UAAW,eAIf,wBAAyB,CACvB,WAAY,CACVsI,OAAQ,QAEV,MAAO,CACLA,OAAQ,YAKDsX,GAAoC7iB,aAAS,SAACrE,GACzD,IAAMG,EAAUb,KACR6nB,EAA+BnnB,EAA/BmnB,cAAeC,EAAgBpnB,EAAhBonB,YACfC,EAAkDD,EAAlDC,GAAIpiB,EAA8CmiB,EAA9CniB,KAAMyH,EAAwC0a,EAAxC1a,OAAwC0a,EAAhCE,4BAClB9f,OAER,OACE,eAAC+f,GAAA,EAAD,CAAMnnB,UAAWD,EAAQymB,KAAzB,UAEE,sBAAKxmB,UAAWD,EAAQ0mB,WAAxB,UACE,cAACvY,EAAA,EAAD,CAAYkF,QAAS,KAArB,SAA4BvO,IAC5B,cAACqJ,EAAA,EAAD,CAAYkF,QAAS,QAASpT,UAAWD,EAAQ2mB,aAAjD,yBAWF,cAACU,GAAA,EAAD,CAAa/hB,MAAO,CAAE9B,MAAO,QAA7B,SAIE,qBACE8B,MAAO,CACL9B,MAAO,OACPvC,QAAS,OACTC,cAAe,MACfyB,eAAgB,UALpB,SAQG4J,EAAOK,KAAI,SAACjF,GAAD,OACV,cAACP,EAAD,CACEC,OAAQM,EAAEN,OAEVC,aAAc,CAACtH,EAAQ6mB,QAAS7mB,EAAQ8mB,OADnCnf,EAAEN,eAMf,cAACigB,GAAA,EAAD,CACEhiB,MAAO,CACLrE,QAAS,OACT0B,eAAgB,SAChBhC,gBAAiBP,EACjBoD,MAAO,QALX,SAQE,cAAC4P,GAAA,EAAD,CACEC,QAAQ,WACRxR,MAAM,UACNmE,QAAS,kBAAMghB,EAAcE,IAH/B,mCC/IF/nB,GAAYC,aAAW,kBAAkB,CAC7CkmB,KAAM,CACJrkB,QAAS,OACT1B,QAAQgoB,EAHiB,EAAGA,SAGZ,EAAG,GACnB5kB,eAAgB,cASP6kB,GAAiCtjB,aAAS,SAACrE,GACtD,IAAMG,EAAUb,KACRsoB,EAAwC5nB,EAAxC4nB,qBAAsBT,EAAkBnnB,EAAlBmnB,cAE9B,OACE,qBAAK/mB,UAAWD,EAAQslB,KAAxB,SACGmC,EAAqB7a,KAAI,SAAC8a,GAAD,OACxB,cAACX,GAAD,CACEC,cAAeA,EACfC,YAAaS,GACRA,EAAQR,YChBjBS,GAAU,WADQ,EACR,eADQ,EACR,gBAAoDvnB,EAApD,kCADQ,EACR,eADQ,EACR,gBACmDA,EADnD,oCADQ,EACR,cADQ,EACR,gBAEoDA,EAFpD,oCADQ,EACR,cADQ,EACR,gBAGoDA,GAE9DjB,GAAYC,aAAW,gBAAGmoB,EAAH,EAAGA,QAAH,MAAkB,CAC7CjC,KAAM,CACJ7O,WAAY8Q,EAAQ,KAGtB1T,MAAO,CACLhS,MAAOtB,EACPkV,cAAe8R,EAAQ,IAEzBK,YAAa,CACX/lB,MAAOtB,GAETuD,QAAS,CACPvE,OAAQ,SACRsC,MAAO,UAKP8lB,eAEF5jB,QAAS,CACPxE,OAAQ,SACRsC,MAAO,UAIP8lB,eAEF3jB,QAAS,CACPzE,OAAQ,SACRsC,MAAO,UAKP8lB,mBAISE,GAA4B3jB,aAAS,WAChD,IAAMlE,EAAUb,KACV2oB,EAAUlC,cACRD,EAAQF,cAARE,IACF/mB,EAAuBD,IAEvBopB,EAAyBnpB,EAAqBmpB,uBAEpDtK,qBAAU,WACRlS,QAAQC,IAAR,oBAAyBuc,IACM,KAA3BA,GACFnpB,EAAqBinB,YAAY,MAElC,CAACkC,EAAwBnpB,IAE5B,IAAMooB,EAAgB1oB,IAAM4M,aAC1B,SAACsa,GACC,IAAMwC,EAAS,UAAMrC,EAAN,YAAaH,GAC5BsC,EAAQG,KAAKD,KAEf,CAACF,EAASnC,IAGEle,mBAAQ,WACpB,MAAO,CAAC,MAAO,cACd,IAEH,OACE,qBAAKxH,UAAWD,EAAQslB,KAAxB,SACE,eAAC3lB,EAAD,WACE,eAACwO,EAAA,EAAD,CAAYkF,QAAQ,KAAK6U,MAAM,SAASjoB,UAAWD,EAAQ6T,MAA3D,UAEE,sBAAM5T,UAAWD,EAAQ8D,QAAzB,eACA,sBAAM7D,UAAWD,EAAQ+D,QAAzB,eACA,sBAAM9D,UAAWD,EAAQgE,QAAzB,gBACA,sBAAM/D,UAAWD,EAAQ8D,QAAzB,eACA,sBAAM7D,UAAWD,EAAQ+D,QAAzB,eACA,sBAAM9D,UAAWD,EAAQgE,QAAzB,eACA,sBAAM/D,UAAWD,EAAQ8D,QAAzB,eACA,sBAAM7D,UAAWD,EAAQ+D,QAAzB,eACA,sBAAM9D,UAAWD,EAAQgE,QAAzB,eACA,sBAAM/D,UAAWD,EAAQ8D,QAAzB,kBAaDlF,EAAqBknB,UACpB,cAAC3X,EAAA,EAAD,yBAEA,cAACqZ,GAAD,CACEC,qBAAsB7oB,EAAqBupB,WAC3CnB,cAAeA,YChHrB7nB,GAAYC,aAAW,gBAAGmoB,EAAH,EAAGA,QAAH,MAAkB,CAC7CjC,KAAM,CACJviB,aAAc,GACdS,MAAO,MACPzC,UAAW,IACXrB,SAAU,KACVgB,QAAS6mB,EAAQ,GACjB3e,UAAW2e,EAAQ,GACnB3U,aAAc2U,EAAQ,GACtBhoB,OAAQ,cAIC6oB,GAAiB,WACZjpB,KAEhB,OAEE,cADA,CACC,IAAD,WACE,cAAC,IAAD,CAAOumB,KAAK,YAAYK,OAAK,EAACsC,UAAWR,KACzC,cAAC,IAAD,CACEnC,KAAK,wBACLM,OAAQ,gBAAGsC,EAAH,EAAGA,MAAH,OACN,cAAC/C,GAAD,CAAoBC,UAAW8C,EAAMC,OAAOC,gBAGhD,cAAC,IAAD,CAAU9iB,GAAG,kBCtBN+iB,GAAMvkB,aAAS,WAAO,IAAD,EAI9B,UAF2BvF,IAEN+pB,yBAAyB,UAA9C,SAAkDC,kBAoBpD,OACE,eAAC,IAAD,CAAeC,SAAUpnB,aAAzB,UACE,cAACyC,EAAD,IACA,cAAC,GAAD,U,+BC7BO4kB,G,OAAYC,GACvBC,KAAe,CACbnoB,QAAS,CACPoB,QAAS,CAEPC,KAAM/B,GAER8oB,UAAW,CACT/mB,KAAM,WAERiR,KAAM,CAEJlR,QAASzB,GAEXM,WAAY,CACVC,QAASV,O,8CChBJ6oB,GAAb,WAQE,WAAoBC,GAA8B,0BAA9BA,WAA6B,KANhCC,UAMgC,OALjCC,yBAKiC,OAJjCC,sBAIiC,OAHjCC,yBAGiC,OAFjCC,8CAEiC,EAC/CC,KAAKJ,yBAAwC1b,IAAlB8b,KAAKN,SAGhCM,KAAKF,oBACHE,KAAKJ,uBAAyBI,KAAKN,SAASO,WAC9CD,KAAKD,yCACHC,KAAKJ,sBAAwBI,KAAKN,SAASO,WAEzCD,KAAKJ,sBACPI,KAAKL,KAAO,IAAIO,KAAKF,KAAKN,WAG5B,IAAMS,EAAaH,KAAKJ,oBAAsBI,KAAKN,SAASU,QAAKlc,EACjE8b,KAAKH,sBAAkC3b,IAAfic,GAA2C,OAAfA,EAtBxD,uGAyBE,uGAIUH,KAAKN,SAASW,QAAQ,CAAEC,OAAQ,wBAJ1C,iCAKW,GALX,0DAOW,GAPX,wDAzBF,uFAqCE,WACE,OAAON,KAAKN,WAtChB,uCAyCE,WAKE,OAAOM,KAAKF,uBAAyBE,KAAKN,SAASa,kBA9CvD,qEAiDE,sBAAApiB,EAAA,+EACS6hB,KAAKF,qBAAwD,MAAjCE,KAAKN,SAASc,gBADnD,gDAjDF,sHAsDE,8BAAAriB,EAAA,gFACyB6hB,KAAKL,YAD9B,aACyB,EAAWc,IAAIC,aADxC,iDAC0D,EAD1D,cACQC,EADR,uBAESA,GAFT,gDAtDF,8HA2DE,WAA0BhmB,GAA1B,mBAAAwD,EAAA,gFACwB6hB,KAAKL,YAD7B,aACwB,EAAWc,IAAIG,WAAWjmB,GADlD,cACQqE,EADR,OAEQ6hB,EAAmBC,SAASC,mBAAQ/hB,GAAW,MAFvD,kBAGS6hB,GAHT,gDA3DF,2HAiEE,8BAAA1iB,EAAA,gFAC0B6hB,KAAKL,YAD/B,aAC0B,EAAWc,IAAIO,cADzC,gDAC2D,GAD3D,cACQC,EADR,uBAESA,EAAS,IAFlB,gDAjEF,iIAsEE,4BAAA9iB,EAAA,gFACS,UAAA6hB,KAAKL,YAAL,eAAWc,IAAIS,mBAAoB,GAD5C,gDAtEF,uFA2EE,SAAoB9e,GAAsD,IAAD,OACvE,IAAK4d,KAAKH,iBACR,MAAM,IAAIsB,MAAJ,2DAKR,IAAMC,EAAW,SAACH,GAAD,OAAwB7e,EAAS6e,EAAS,KAI3D,OAFAjB,KAAKN,SAASU,GAAG,kBAAmBgB,GAE7B,WACL,EAAK1B,SAAS2B,IAAI,kBAAmBD,MAvF3C,6BA2FE,SAAgBhf,GAAkD,IAAD,OAC/D,IAAK4d,KAAKH,iBACR,MAAM,IAAIsB,MAAJ,2DAKR,IAAMC,EAAW,SAACT,GAChB5e,QAAQC,IAAR,iCAAsC2e,IACtCve,EAAS0e,SAASH,KAKpB,OAFAX,KAAKN,SAASU,GAAG,eAAgBgB,GAE1B,WACL,EAAK1B,SAAS2B,IAAI,eAAgBD,QA1GxC,K,SCPaE,GACXtpB,6IAAYupB,sCAMDC,KAHwB,SAAnCxpB,6IAAYypB,qBACZzpB,GCLK,SAAe0pB,GAAtB,mC,8CAAO,WAAuCC,GAAvC,iBAAAxjB,EAAA,sEACkByjB,MAAM,GAAD,OAAI5pB,aAAJ,YAA8B2pB,IADrD,cACCE,EADD,gBAEeA,EAASC,OAFxB,cAECA,EAFD,yBAIEA,GAJF,4C,8CCAMC,GAAe,6CACfC,GACX,6CCkGWC,GAAoD,CA9CZ,CACnD3mB,KAAM,aACNE,WAAY,sBACZkiB,GAAI,6CACJyB,kBAAmB,6CACnBjO,mBAAoB,6CACpByP,QAAS,MACT5d,OAAQ,CACN,CACElF,OAAQ,OACRvC,KAAM,cACNX,QAAS,6CACTunB,SAAU,EACV9R,cAAc,GAEhB,CACEvS,OAAQ,OACRvC,KAAM,gBACNX,QAAS,6CACTunB,SAAU,GACV9R,cAAc,GAEhB,CACEvS,OAAQ,OACRvC,KAAM,WACNX,QAAS,6CACTunB,SAAU,EACV9R,cAAc,GAEhB,CACEvS,OAAQ,OACRvC,KAAM,OACNX,QAASonB,GACTG,SAAU,GACV9R,cAAc,IAGlBuN,4BAA6B,CAC3B9f,OAAQ,QACRvC,KAAM,eACNX,QAAS,6CACTunB,SAAU,GACV9R,cAAc,KClFL+R,GAAb,0JACE,8BAAAhkB,EAAA,yDAGQikB,EAAwC,IAE1CZ,GALN,gCAMkCxB,KAAKqC,sBANvC,OAMUC,EANV,OAQIF,EAAS3D,KAAT,MAAA2D,EAAQ,YAASE,IARrB,sBAUIF,EAAS3D,KAAT,MAAA2D,EAAQ,YAASH,KAVrB,gCAaSG,GAbT,iDADF,uIAiBE,sBAAAjkB,EAAA,+EACS,IADT,2CAjBF,uIAsBE,WACE6d,GADF,SAAA7d,EAAA,+EAGS,CACLokB,uBAAwB,EACxBC,IAAK,IALT,2CAtBF,+HA+BE,gHACgCd,GAC5B,iCAFJ,QACQY,EADR,QAMkB,GAAG5E,GAAK+E,GAA2BC,WACnDJ,EAAgB,GAAGnD,kBACjBsD,GAA2BC,WAC7BJ,EAAgB,GAAGpR,mBACjBuR,GAA2BE,YAC7BL,EAAgB,GAAG3E,4BAA4BhjB,QAC7CioB,GAA8B,MAZlC,eAc4BN,EAAgB,GAAGvf,QAd/C,6DAcW8f,EAdX,QAeYhlB,EAAWglB,EAAXhlB,OAEFilB,EAAeF,GAA+B/kB,GAC9CklB,EACO,SAAXllB,EAAoBmkB,GAA4Bc,EAnBtD,uBAuBY,IAAI3B,MAAJ,8BAAiCtjB,IAvB7C,QAyBMglB,EAAcloB,QAAUooB,EAzB9B,yKA6BST,GA7BT,gEA/BF,6D,oBCXO,SAASU,GACdC,GAEA,IAAMC,EAAM,GAEZ,IAAK,IAAIC,KAAOF,EAEVG,OAAO7L,MAAMuJ,SAASqC,MAExBD,EAAIC,GAAOF,EAAqBE,IAIpC,OAAOD,ECLF,IAAMG,GAAb,WAGE,WACEC,EACAC,GACC,0BALKC,iCAKN,EACAxD,KAAKwD,4BAA8B,IAAIC,KACrCH,EACAI,GAAwBC,IACxBJ,GAVN,kGAiBE,WAA6B5Y,GAA7B,SAAAxM,EAAA,kEACS6kB,GADT,SAEUhD,KAAKwD,4BAA4BI,uBAAuBjZ,GAFlE,4GAjBF,8D,UCLO,SAASkZ,GACdC,GAEA,IAAIP,EAaEQ,GARJR,EAFEO,EAEiB,IAAI9R,KAAOgS,UAAUC,aAAaH,GAElC,IAAI9R,KAAOgS,UAAUE,gBAEtC5C,KAI4B6C,YAWhC,OAVIJ,GACFA,EACGK,aACA7vB,MAAK,SAACoG,GAAD,OAAaoH,QAAQC,IAAR,oBAAyBrH,OAC3C0pB,OAAM,SAAChiB,GAAD,OAAON,QAAQC,IAAR,8CAChBuhB,EAAmBQ,GAEnBhiB,QAAQC,IAAR,iBAGKuhB,E,sBCzBIe,GAAb,WAIE,WAAYnF,EAA2BoE,GAAsC,0BAFrEgB,6BAEoE,EAC1ExiB,QAAQC,IAAI,mBAEZge,KAAKuE,wBAA0B,IAAId,KACjCtE,EACAqF,GAAgBb,IAChBJ,GAGFxhB,QAAQC,IAAI,0BAbhB,+DAgBE,WACE,OAAOge,KAAKuE,wBAAwB5pB,UAjBxC,qCAqBE,SAA+BwkB,GAC7B,IAAMsF,EAAQzE,KAAKuE,wBAAwBG,OAAOvF,GAClDpd,QAAQC,IAAR,mBAAwBmd,IACxBpd,QAAQC,IAAR,4BAAiC2iB,aAAKF,EAAM9pB,WAC5CoH,QAAQC,IAAR,8BACyB2iB,aAAK3E,KAAKuE,wBAAwB5pB,aA1B/D,kEAiCE,4BAAAwD,EAAA,sEACwB6hB,KAAKuE,wBAAwBK,gBADrD,cACQC,EADR,yBAESA,GAFT,gDAjCF,uHAsCE,WAAmBC,GAAnB,SAAA3mB,EAAA,+EACS6hB,KAAKuE,wBAAwBQ,aAAaD,IADnD,gDAtCF,sHAgDE,WAAiBxU,GAAjB,SAAAnS,EAAA,+EACS6hB,KAAKuE,wBAAwBS,WAAW1U,IADjD,gDAhDF,wIAoDE,WACEzW,GADF,SAAAsE,EAAA,+EAGS6hB,KAAKuE,wBAAwB,sBAAsB1qB,IAH5D,gDApDF,8D,UCDaorB,GAAb,WAGE,WAAYC,EAAsB3B,GAAsC,0BAFhE4B,mBAE+D,EACrEnF,KAAKmF,cAAgB,IAAI1B,KACvByB,EACAE,GAAUzB,IACVJ,GAPN,uFAWE,WAAyB5oB,GAAzB,0FACSqlB,KAAKmF,cAAcE,UAAU1qB,IADtC,gDAXF,yHAeE,WACE2qB,EACAC,GAFF,0FAISvF,KAAKmF,cAAcK,UAAUF,EAAcC,IAJpD,gDAfF,qHAsBE,WACEA,EACA5kB,GAFF,0FAISqf,KAAKmF,cAAcM,QAAQF,EAAgB5kB,IAJpD,gDAtBF,gECDa+kB,GAAb,WACE,WAAoBnC,GAAsC,0BAAtCA,mBADtB,sDAGE,SAAkB2B,GAChB,OAAO,IAAID,GAAaC,EAAclF,KAAKuD,sBAJ/C,K,UCCaoC,GAAb,WAGE,WAAYT,EAAsB3B,GAAsC,0BAFhEqC,oBAE+D,EACrE5F,KAAK4F,eAAiB,IAAInC,KACxByB,EACAW,GAAWlC,IACXJ,GAPN,gFAWE,WAAkB5iB,GAAlB,0FACSqf,KAAK4F,eAAeE,KAAKnlB,IADlC,gDAXF,oHAeE,WAAsBA,GAAtB,0FACSqf,KAAK4F,eAAeG,iBAAiBplB,IAD9C,gDAfF,6HAmBE,WACEqlB,GADF,0FAGShG,KAAK4F,eAAeK,OAAOD,IAHpC,gDAnBF,kHAyBE,WAAoBrlB,GAApB,0FACSqf,KAAK4F,eAAevgB,OAAO1E,IADpC,gDAzBF,uHA6BE,WAAyBA,GAAzB,0FACSqf,KAAK4F,eAAeM,YAAYvlB,IADzC,gDA7BF,8D,8BCGawlB,GAAb,WAIE,WACEC,EACAlV,EACQqS,GACP,0BADOA,mBACR,KAPM8C,YAON,OANMC,iBAMN,EACAtG,KAAKqG,OAAS,IAAI5C,KAChB2C,EACAG,GAAW5C,IACXJ,GAGFvD,KAAKsG,YAAc,IAAI7C,KACrBvS,EACAsV,GAAgB7C,IAChBJ,GAlBN,gFAsBE,WAAkB5iB,GAAlB,0FACSqf,KAAKqG,OAAOP,KAAK,CAAE9gB,MAAOrE,KADnC,gDAtBF,oHA0BE,WAAsBA,GAAtB,0FACSqf,KAAKqG,OAAON,iBAAiBplB,IADtC,gDA1BF,6HA8BE,WACEqlB,GADF,0FAGShG,KAAKqG,OAAOJ,OAAOD,IAH5B,gDA9BF,kHAoCE,WAAoBrlB,GAApB,0FACSqf,KAAKqG,OAAOhhB,OAAO1E,IAD5B,gDApCF,uHAwCE,WAAyBA,GAAzB,uEACQ,IAAIwgB,MAAJ,yCADR,2CAxCF,sIA4CE,WACEsF,EACA9lB,GAFF,wEAIEoB,QAAQC,IAAR,gCAAqCrB,EAAO2U,aAC5CvT,QAAQC,IAAR,gCAAqC0kB,uBAAY/lB,KALnD,kBAMSqf,KAAKsG,YAAYK,YAAYF,EAAiB,CAAEzhB,MAAOrE,KANhE,gDA5CF,gECHaimB,GAAb,WACE,WAAoBrD,GAAsC,0BAAtCA,mBADtB,uDAGE,SAAmBsD,GACjB,OAAO,IAAIlB,GAAckB,EAAe7G,KAAKuD,oBAJjD,gCAOE,SAAmB8C,EAAgBC,GACjC,OAAO,IAAIH,GAAcE,EAAQC,EAAatG,KAAKuD,sBARvD,K,gYCkBauD,I,OArBN,eAAMC,IACL,eAAMA,IAoB8B,CAC1CC,KAAM,OACNC,MAAO,OACPC,EAAG,MACHC,IAAK,SAaDC,GAAsBC,OAEfC,GAAwB,CAEnC,KAAM,EAGNN,KAAMI,GACNH,MAAOG,GAEPF,EAlBsC,QAqBtCK,EAjB6BC,OAuB7BL,IAAKC,IC9CMK,IAAb,GAoHGC,aAAO,sCApHV,GAyHGA,aAAO,kBAzHV,GA8HGA,aAAO,cA9HV,GAmIGA,aAAO,wBAnIV,cA2BE,WACUC,GACP,IAAD,iCADQA,gCACR,0XALMC,6BAA2C1jB,EAKjD,KAJF2jB,gCAIE,EACAC,aAAe9H,MAEfA,KAAK8D,iBAAmB9D,KAAK2H,8BAA8BI,sBAC3D/H,KAAKuD,iBAAmBM,GAAoB7D,KAAK8D,kBACjD9D,KAAKJ,oBACH+H,EAA8B/H,oBAChCI,KAAKH,iBAAmB8H,EAA8B9H,iBAEtDG,KAAK6H,2BAA6BG,cAChC,kBAAM,EAAKhtB,sBAD6B,uCAExC,WAAOitB,GAAP,SAAA9pB,EAAA,sDACM8pB,GACF,EAAKC,qCAFT,2CAFwC,sDAOxC,CACEC,iBAAiB,IAIjBnI,KAAKJ,sBAEHI,KAAK2H,8BAA8B9H,kBACrC9d,QAAQC,IAAI,+BACZge,KAAK2H,8BAA8BS,qBAAoB,SAACztB,GACtDoH,QAAQC,IAAR,mCAAwCrH,IACxC,EAAK0tB,eAAe1tB,MAGtBqlB,KAAK2H,8BAA8BW,iBAAgB,SAAC3H,GAClD5e,QAAQC,IAAR,0BAA+B2e,IAC/B,EAAK4H,WAAW5H,QAGlB5e,QAAQC,IAAI,yCAGZge,KAAK4H,wBAA0BY,aAC7B,kBAAM,EAAKC,iBACX,OArEV,gDAaE,WAEE,IAAMC,EAAgBpB,GAAsBtH,KAAKW,SAEjD,YAAsBzc,IAAlBwkB,EACK,EAGFA,IArBX,+BA2EE,WAEE,OACE1I,KAAKJ,sBACJI,KAAK2H,8BAA8BgB,6BAClC3I,KAAK4I,mCAhFb,iEAoFE,qFACE7mB,QAAQC,IAAI,iBADd,SAEQge,KAAKkI,qCAFb,gDApFF,uHAyFE,wFACMlI,KAAKhlB,oBADX,0CAEW,GAFX,uBAIoCglB,KAAK2H,8BAA8BkB,8BAJvE,cAIUC,EAJV,OAKI9I,KAAK+I,mCAAmCD,GAL5C,kBAOW9I,KAAK4I,iCAPhB,gDAzFF,6IAoGE,wGAEwB5I,KAAK2H,8BAA8BqB,cAF3D,cAEQrI,EAFR,OAGEX,KAAKuI,WAAW5H,GAHlB,SAM8BX,KAAK2H,8BAA8BsB,kBANjE,cAMQC,EANR,OAOElJ,KAAKqI,eAAea,GAPtB,UAU8BlJ,KAAK2H,8BAA8BwB,oBAC7DD,GAXJ,QAUQtY,EAVR,OAaEoP,KAAKoJ,qBAAqBxY,GAb5B,iDApGF,sGAoHE,SAC2CyY,GACzCrJ,KAAK4I,gCAAkCS,IAtH3C,4BAyHE,SACuBpuB,GACrB+kB,KAAK/kB,YAAcA,IA3HvB,wBA8HE,SACmB0lB,GACjBX,KAAKW,QAAUA,IAhInB,kCAmIE,SAC6B2I,GAC3BvnB,QAAQC,IAAI,CAAEsnB,sBACdtJ,KAAKsJ,kBAAoBA,MAtI7B,qEACGC,MADH,yEACiE,KADjE,iDAGGA,MAHH,+GAIGA,MAJH,kHAKGA,MALH,+GAMGA,MANH,0GAQGA,MARH,wEAQ2C,MAR3C,wCASGA,MATH,yEASwC,KATxC,kDAWGA,MAXH,yEAWiD,KAXjD,2CAaGC,MAbH,6HA2EGA,MA3EH,snBCwBaC,IAAb,GAwWG/B,aAAO,kBAxWV,GA6WGA,aAAO,mBA7WV,GAkXGA,aAAO,gBAlXV,GAuXGA,aAAO,iBAvXV,GA4XGA,aAAO,iBA5XV,GAiYGA,aAAO,yBAjYV,GAsYGA,aAAO,2BAtYV,cA4CE,WACU7sB,EACAvF,EACAF,EACAs0B,EACAC,GACP,IAAD,iCALQ9uB,+BAKR,KAJQvF,cAIR,KAHQF,uBAGR,KAFQs0B,sBAER,KADQC,wBACR,8ZARMC,2BAQN,EACA5J,KAAK4J,sBAAwB5B,cAC3B,iBAAM,CACJ,EAAKntB,6BAA6B8lB,QAClC,EAAK9lB,6BAA6BI,YAClC,EAAK7F,qBAAqBM,iBAJO,uCAMnC,mCAAAyI,EAAA,gFAAQwiB,EAAR,KAAiBhmB,EAAjB,KAA0BkvB,EAA1B,KACE,EAAKC,gBAAe,GADtB,SAEQ,EAAKC,sCAETpJ,EACAhmB,EACCkvB,QAAqC3lB,GAN1C,OAQE,EAAK4lB,gBAAe,GARtB,2CANmC,sDAgBnC,CACE3B,iBAAiB,IApEzB,iDA2BE,WAYE,OAXApmB,QAAQC,IAAI,iBACAgoB,MAAMjV,KAAKiL,KAAKiK,mBAAmBC,WAAWC,QACxD,SAACjH,EAAKkH,GAAS,IAAD,cACuBA,EADvB,GACLvsB,EADK,KACGwsB,EADH,KAIZ,OAFAnH,EAAIrlB,GAAUwsB,EAAiBnP,eAExBgI,IAET,MApCN,qEA4EE,WACEoH,GADF,4FAEEhvB,EAFF,+BAES,eAEP0kB,KAAKuK,oBAGLvK,KAAKwK,cAAa,GAClBzoB,QAAQC,IAAR,oCAAyC1G,IAR3C,kBAWsBgvB,EAXtB,cAWUG,EAXV,OAYI1oB,QAAQC,IAAR,wCAA6C1G,IAZjD,kBAaWmvB,GAbX,qCAgBM,KAAW5a,OAASZ,GAA8BC,oBAhBxD,iBAkBM8Q,KAAK0K,eAAc,GAlBzB,4DAuBI1K,KAAKwK,cAAa,GAvBtB,6EA5EF,6HAuGE,WACEtF,EACAyF,EACAhqB,GAHF,qFAMEoB,QAAQC,IAAR,oBACerB,EAAO2U,WADtB,gBACwCqV,EADxC,eACsDzF,IAPxD,SASoClF,KAAK0J,oBACpCkB,kBAAkB1F,GAClBO,QAAQkF,EAAShqB,GAXtB,cASQkqB,EATR,QAcsBlb,OAAOpb,MAAK,kBAAM,EAAKu2B,6BAd7C,kBAiBSD,GAjBT,gDAvGF,8HA2HE,WACEta,EACA5P,EACAyP,EACAc,GAJF,uFAOEnP,QAAQC,IAAR,oBAAyBrB,EAAO2U,WAAhC,sBAAwD/E,IAClDwa,EAAgB3a,EAClB4P,KAAK2J,sBAAsBqB,mBACzBza,EACAW,GAEF8O,KAAK2J,sBAAsBsB,mBAAmB1a,GAbpD,SAeoCwa,EAAcjF,KAAKnlB,GAfvD,cAeQkqB,EAfR,QAkBsBlb,OAAOpb,MAAK,kBAAM,EAAKu2B,6BAlB7C,kBAqBSD,GArBT,gDA3HF,oIAmJE,WACEta,EACA5P,EACAyP,EACAc,GAJF,uFAOEnP,QAAQC,IAAR,sBAA2BrB,EAAO2U,WAAlC,sBAA0D/E,IACpDwa,EAAgB3a,EAClB4P,KAAK2J,sBAAsBqB,mBACzBza,EACAW,GAEF8O,KAAK2J,sBAAsBsB,mBAAmB1a,GAbpD,SAeoCwa,EAAcG,SAASvqB,GAf3D,cAeQkqB,EAfR,QAkBsBlb,OAAOpb,MAAK,kBAAM,EAAKu2B,6BAlB7C,kBAqBSD,GArBT,gDAnJF,6IA2KE,WACEta,EACAyV,EACA5V,EACAc,GAJF,uFAOEnP,QAAQC,IAAR,2BACsBgkB,EAAc1Q,WADpC,iCACuE/E,IAEjEwa,EAAgB3a,EAClB4P,KAAK2J,sBAAsBqB,mBACzBza,EACAW,GAEF8O,KAAK2J,sBAAsBsB,mBAAmB1a,GAfpD,SAiBoCwa,EAAcI,kBAC9CnF,GAlBJ,cAiBQ6E,EAjBR,QAsBsBlb,OAAOpb,MAAK,kBAAM,EAAKu2B,6BAtB7C,kBAyBSD,GAzBT,gDA3KF,kIAuME,WACEta,EACA5P,EACAyP,EACAc,GAJF,uFAOEnP,QAAQC,IAAR,oBAAyBrB,EAAO2U,WAAhC,sBAAwD/E,IAClDwa,EAAgB3a,EAClB4P,KAAK2J,sBAAsBqB,mBACzBza,EACAW,GAEF8O,KAAK2J,sBAAsBsB,mBAAmB1a,GAbpD,SAeoCwa,EAAc1lB,OAAO1E,GAfzD,cAeQkqB,EAfR,QAkBsBlb,OAAOpb,MAAK,kBAAM,EAAKu2B,6BAlB7C,kBAqBSD,GArBT,gDAvMF,+HA+NE,WACEta,EACA5P,EACAyP,EACAc,GAJF,qFAOEnP,QAAQC,IAAR,mBAAwBrB,EAAO2U,WAA/B,sBAAuD/E,KAGnDH,EAVN,uBAWUgb,EAAiBpL,KAAK2J,sBAAsBqB,mBAChDza,EACAW,GAbN,SAgBgCka,EAAeC,2BACzCrL,KAAKnlB,6BAA6BI,YAClC0F,GAlBN,OAgBI2qB,EAhBJ,qCAqBUP,EAAgB/K,KAAK2J,sBAAsBsB,mBAC/C1a,GAtBN,UAwBgCwa,EAAc7E,YAAYvlB,GAxB1D,QAwBI2qB,EAxBJ,gCA4BwBA,EACnB3b,OACApb,MAAK,kBAAM,EAAKu2B,6BA9BrB,wCAkCSQ,GAlCT,iDA/NF,uJAsQE,WACE3K,EACA4K,EACAC,GAHF,qEAKMD,EALN,wBAMQvL,KAAKnlB,6BAA6BglB,kBACpCG,KAAKyL,wBAAwBF,GAPnC,kBAWYvL,KAAK0L,sBACT/K,EACA4K,EACAvL,KAAK1qB,YAAY+a,iBACjBmb,GAfR,uDAoBMxL,KAAK2L,mBAAL,MACA5pB,QAAQ6B,MACN,4DADF,MArBN,yDAtQF,uIAwSE,qFACMoc,KAAK5qB,qBAAqBM,eAC5BsqB,KAAK5qB,qBAAqBM,cAAck2B,qBAF5C,SAIQ5L,KAAK6L,0BAJb,gDAxSF,kIA+SE,uGAEU7L,KAAK0L,sBACT1L,KAAKnlB,6BAA6B8lB,QAClCX,KAAKnlB,6BAA6BI,YAClC+kB,KAAK1qB,YAAY+a,iBACjB2P,KAAK5qB,qBAAqBM,eANhC,sDASIsqB,KAAK2L,mBAAL,MACA5pB,QAAQ6B,MACN,0DADF,MAVJ,wDA/SF,gIAgUE,WACE+c,EACAmL,EACAzb,EACAmb,GAJF,iEAMEzpB,QAAQC,IAAR,2BACsB8pB,EADtB,eAC2CnL,EAD3C,0BAC6D6K,QAD7D,IAC6DA,OAD7D,EAC6DA,EAAe9N,KAG5EsC,KAAK+L,sBAVP,gDAhUF,8FA6UE,WACE/L,KAAKgM,0BA9UT,4EAqVE,WAAsCF,GAAtC,iEACE9L,KAAKiM,gCADP,gDArVF,kGAyVE,cAzVF,gCA4VE,SAA2BroB,GACzBoc,KAAKkM,iBAAgB,GACrBlM,KAAK8J,gBAAe,KA9VxB,+BAiWE,WACE9J,KAAKwK,cAAa,GAClBxK,KAAKmM,eAAc,GACnBnM,KAAK0K,eAAc,KApWvB,4BAwWE,SACuB0B,GACrBpM,KAAKoM,YAAcA,IA1WvB,6BA6WE,SACwBC,GACtBrM,KAAKqM,aAAeA,IA/WxB,0BAkXE,SACqBC,GACnBtM,KAAKsM,UAAYA,IApXrB,2BAuXE,SACsBC,GACpBvM,KAAKuM,WAAaA,IAzXtB,2BA4XE,SACsBC,GACpBxM,KAAKwM,WAAaA,IA9XtB,mCAiYE,WAEExM,KAAKiK,mBAAmBwC,UAnY5B,qCAsYE,SAEEC,GAEA1M,KAAKiK,mBAAmB0C,QAAQD,OA1YpC,mEACGnD,MADH,yEACqD,KADrD,+DAEGA,MAFH,yEAEsD,KAFtD,4CAGGA,MAHH,yEAGmC,KAHnC,6CAIGA,MAJH,yEAIoC,KAJpC,mDAOGA,MAPH,yEAUMA,aAAW,IAAItZ,QAVrB,2CAaGsZ,MAbH,yEAgBMA,aAAW,IAAItZ,QAhBrB,0CAmBGsZ,MAnBH,yEAoBqB,KApBrB,2CAqBGA,MArBH,yEAqBkC,KArBlC,2CAsBGA,MAtBH,yEAsBkC,KAtBlC,4CA2BGC,MA3BH,s9BC7BaoD,GAA6D,CACxEjyB,QAAS,GACTkD,OAAQ,GACRvC,KAAM,GACN4mB,SAAU,EACV9R,cAAc,GCEHyc,IAAb,GA+VGnF,aAAO,6BA/VV,GAgYGA,aAAO,qBAhYV,cAyDE,WACU9sB,EACRkyB,GACC,0BAFOlyB,8BAER,qmCACAktB,aAAe9H,MAcfA,KAAKzP,cAAgB,GACrByP,KAAK+M,WAAa,GAClB/M,KAAKgN,aAAe,GACpBhN,KAAKiN,eAAiBnY,KAAUC,KAAK,GACrCiL,KAAKkN,oBAAsBpY,KAAUC,KAAK,GAC1CiL,KAAKmN,mBAAqBrY,KAAUC,KAAK,GACzCiL,KAAKoN,mBAAqBtY,KAAUC,KAAK,GACzCiL,KAAKqN,aAAevY,KAAUC,KAAK,GACnCiL,KAAKsN,cAAgBxY,KAAUC,KAAK,GACpCiL,KAAKuN,YAAczY,KAAUC,KAAK,GAClCiL,KAAKwN,UAAY1Y,KAAUC,KAAK,GAChCiL,KAAKyN,sBAAwB3Y,KAAUC,KAAK,GAC5CiL,KAAK0N,yBAA2B5Y,KAAUC,KAAK,GAC/CiL,KAAK2N,UAAW,EAEhB3N,KAAKjgB,uBAAyB+sB,EAAoBnyB,QAClDqlB,KAAK3K,mBAAqByX,EAAoB5K,SAC9ClC,KAAK7F,eAAiB2S,EAAoBxxB,KAC1C0kB,KAAK5F,iBAAmB0S,EAAoBjvB,OAG5CmiB,KAAKqF,UAAYvQ,KAAUC,KAAK,GAChCiL,KAAK4N,qBAAuB9Y,KAAUC,KAAK,GAC3CiL,KAAK6N,oBAAsB/Y,KAAUC,KAAK,GAC1CiL,KAAKvmB,aAAeqb,KAAUC,KAAK,GACnCiL,KAAK8N,eAAiBhZ,KAAUC,KAAK,GAGrCiL,KAAK+N,gBAAkBjZ,KAAUC,KAAK,GAGtCiL,KAAK/f,gBAAiB,EA1G1B,6CAoCE,WAkBE,MAjBoC,CAClCqQ,OAAQ0P,KAAKzP,cACb0c,eAAgBjN,KAAKiN,eACrBS,yBAA0B1N,KAAK0N,yBAC/BR,oBAAqBlN,KAAKkN,oBAC1BS,SAAU3N,KAAK2N,SACfF,sBAAuBzN,KAAKyN,sBAC5BJ,aAAcrN,KAAKqN,aACnBC,cAAetN,KAAKsN,cACpBC,YAAavN,KAAKuN,YAClBxtB,uBAAwBigB,KAAKjgB,uBAC7BsV,mBAAoBP,KAAUC,KAAKiL,KAAK3K,oBACxC+X,mBAAoBpN,KAAKoN,mBACzBD,mBAAoBnN,KAAKmN,mBACzBK,UAAWxN,KAAKwN,aAnDtB,kCA8GE,SACEvpB,EACA+pB,EACAC,GAEAjO,KAAKkO,0BACHjqB,EACA+pB,EACAC,KAtHN,oCA0HE,SAA8BhuB,GAC5B+f,KAAKmO,kBAAkBluB,KA3H3B,oCAiIE,WACE,OAAI+f,KAAK/f,gBAAkB+f,KAAK/e,qBAAuB,GACrDc,QAAQC,IAAR,UAAege,KAAK5F,iBAApB,qBAGE4F,KAAK/e,qBAAuB+e,KAAKhP,mBAETgP,KAAK/O,yBAIxB,IA5Ib,6BAmJE,WAEE,OAAO1O,WACLyP,KAAOyD,MAAM2Y,YAAYpO,KAAKwN,UAAWxN,KAAK3K,uBAtJpD,2BA6JE,WAEE,OAAO2K,KAAKlH,kBAAoBkH,KAAKhP,qBA/JzC,2CAkKE,WAEE,OAAOzO,WACLyP,KAAOyD,MAAM2Y,YAAYpO,KAAKvmB,aAAcumB,KAAK3K,uBArKvD,8BAyKE,WAEE,OAAO9S,WACLyP,KAAOyD,MAAM2Y,YAAYpO,KAAKuN,YAAavN,KAAK3K,uBA5KtD,gCAgLE,WAEE,OAAO9S,WACLyP,KAAOyD,MAAM2Y,YACXpO,KAAK6N,oBACL7N,KAAK3K,uBArLb,qCA0LE,WAEE,OAAO2K,KAAKqF,YA5LhB,uCA+LE,WAEE,OAAO9iB,WACLyP,KAAOyD,MAAM2Y,YACXpO,KAAKnL,0BACLmL,KAAKiN,mBApMb,8BAyME,WAEE,OAAO1qB,WACLyP,KAAOyD,MAAM2Y,YAAYpO,KAAKqN,aAAcrN,KAAK3K,uBA5MvD,gCAgNE,WAEE,OAAO9S,WACLyP,KAAOyD,MAAM2Y,YACXpO,KAAK4N,qBACL5N,KAAK3K,uBArNb,8BA0NE,WAGE,OAAO9S,WACLyP,KAAOyD,MAAM2Y,YACXpO,KAAK+N,gBACL,GAAK/N,KAAK3K,uBAhOlB,iCAqOE,WAEE,OAAO2K,KAAKqO,mBAAqBrO,KAAKhP,qBAvO1C,mCA0OE,WAEE,OAAOgP,KAAK/e,qBAAuB+e,KAAKhP,qBA5O5C,iCA+OE,WAEE,OAAOgP,KAAKsO,mBAAqBtO,KAAKhP,qBAjP1C,mCAoPE,WAEE,OAAOgP,KAAK7e,qBAAuB6e,KAAKhP,qBAtP5C,8BA4PE,WAEE,MAA8B,KAAvBgP,KAAKzP,gBA9PhB,mCAiQE,WAGE,OAAOhO,WACLyP,KAAOyD,MAAM2Y,YAAYpO,KAAK0N,yBAFP,OAnQ7B,qCAyQE,WAGE,OAAOnrB,WACLyP,KAAOyD,MAAM2Y,YAAYpO,KAAKmN,mBAFH,OA3QjC,qCAiRE,WAGE,OAAO5qB,WACLyP,KAAOyD,MAAM2Y,YAAYpO,KAAKoN,mBAFH,OAnRjC,4BA4RE,WAEE,IAAMmB,EAAevO,KAAKplB,4BAA4B8tB,cAEtD,OAAO1I,KAAKwO,0BAA4BD,IAhS5C,4BAsSE,WAEE,IAAMA,EAAevO,KAAKplB,4BAA4B8tB,cAEtD,OAAO1I,KAAKyO,0BAA4BF,IA1S5C,kCAgTE,WAEE,OAA+B,IAAxBvO,KAAK0O,mBAlThB,kCAwTE,WAEE,OAA+B,IAAxB1O,KAAK2O,mBA1ThB,+BAgUE,WAEE,OAAO3O,KAAK/e,qBAAuB+e,KAAK0O,mBAlU5C,gCAwUE,WAEE,OAAO1O,KAAK4O,wBAA0B5O,KAAK2O,mBA1U/C,gCAgVE,WAEE,OAAO3O,KAAK6O,oBAAsB7O,KAAK8O,uBAlV3C,2BAqVE,WACE,OAAO9O,KAAK8N,eAAeiB,GAAG,KAtVlC,iCAyVE,SAA2BC,GACzB,OAAOA,EAAWhP,KAAKhP,qBA1V3B,uCA+VE,SAEE/M,EACA+pB,EACAC,GAEAjO,KAAKzP,cAAgBtM,EAAWqM,OAChC0P,KAAKiN,eAAiBhpB,EAAWgpB,eAIjCjN,KAAKkN,oBAAsBjpB,EAAWipB,oBACtClN,KAAKmN,mBAAqBlpB,EAAWkpB,mBACrCnN,KAAKoN,mBAAqBnpB,EAAWmpB,mBACrCpN,KAAKqN,aAAeppB,EAAWopB,aAC/BrN,KAAKsN,cAAgBrpB,EAAWqpB,cAChCtN,KAAKuN,YAActpB,EAAWspB,YAC9BvN,KAAKwN,UAAYvpB,EAAWupB,UAC5BxN,KAAK0N,yBAA2BzpB,EAAWypB,yBAC3C1N,KAAK2N,SAAW1pB,EAAW0pB,SAG3B3N,KAAKqF,UAAY2I,EAAe3I,UAChCrF,KAAK4N,qBAAuBI,EAAeJ,qBAC3C5N,KAAK6N,oBAAsBG,EAAeH,oBAC1C7N,KAAKvmB,aAAeu0B,EAAev0B,aACnCumB,KAAK8N,eAAiBE,EAAeF,eAGrC9N,KAAK+N,gBAAkBE,EAAsBF,kBA5XjD,+BAgYE,SAC0B9tB,GACxB+f,KAAK/f,eAAiBA,EAElB+f,KAAK/f,gBACP8B,QAAQC,IAAR,UACKge,KAAK5F,iBADV,4CAC8D4F,KAAKiP,4BAtYzE,mDAEG1F,MAFH,yGAGGA,MAHH,2GAIGA,MAJH,6GAKGA,MALH,kHAMGA,MANH,iHAOGA,MAPH,iHAQGA,MARH,2GASGA,MATH,4GAUGA,MAVH,0GAWGA,MAXH,wGAYGA,MAZH,oHAaGA,MAbH,uHAcGA,MAdH,uGAeGA,MAfH,qHAiBGA,MAjBH,iHAkBGA,MAlBH,6GAmBGA,MAnBH,+GAoBGA,MApBH,wGAwBGA,MAxBH,mHAyBGA,MAzBH,kHA0BGA,MA1BH,2GA2BGA,MA3BH,6GA4BGA,MA5BH,8GA+BGA,MA/BH,6GAkCGA,MAlCH,sGAoCGC,MApCH,+HAiIGA,MAjIH,sIAmJGA,MAnJH,6HA6JGA,MA7JH,2IAkKGA,MAlKH,8IAyKGA,MAzKH,mIAgLGA,MAhLH,0IA0LGA,MA1LH,iJA+LGA,MA/LH,0IAyMGA,MAzMH,mIAgNGA,MAhNH,mIA0NGA,MA1NH,oIAqOGA,MArOH,yIA0OGA,MA1OH,yIA+OGA,MA/OH,yIAoPGA,MApPH,sIA4PGA,MA5PH,sIAiQGA,MAjQH,6IAyQGA,MAzQH,+IAiRGA,MAjRH,sIA4RGA,MA5RH,6HAsSGA,MAtSH,mIAgTGA,MAhTH,yIAwTGA,MAxTH,sIAgUGA,MAhUH,oIAwUGA,MAxUH,qIAgVGA,MAhVH,gIAqVGA,MArVH,wWCmBa0F,IAAb,GA8oBGxH,aAAO,kBA9oBV,GAmpBGA,aAAO,mBAnpBV,GAwpBGA,aAAO,gBAxpBV,GA8pBGA,aAAO,gBA9pBV,GAoqBGA,aAAO,oCApqBV,GA2qBGA,aAAO,oBA3qBV,GAqrBGA,aAAO,kBArrBV,cAqPE,WACU7sB,EACAvF,EACA65B,EACRC,GACC,IAAD,iCAJQv0B,+BAIR,KAHQvF,cAGR,KAFQ65B,yBAER,y6BATMvF,2BASN,OAPMyF,wBAON,EACAvH,aAAe9H,MACfA,KAAKtC,GAAK0R,EAAmB1R,GAC7BsC,KAAK1kB,KAAO8zB,EAAmB9zB,KAC/B0kB,KAAKb,kBAAoBiQ,EAAmBjQ,kBAC5Ca,KAAK9O,mBAAqBke,EAAmBle,mBAC7C8O,KAAKxkB,WAAa4zB,EAAmB5zB,WAErCwkB,KAAK1b,aAAaqoB,QAAQyC,EAAmBrsB,QAC7Cid,KAAKhQ,yBAAyB2c,QAC5B,IAAI1c,IACF+P,KAAK1b,aAAalB,KAAI,SAACmB,GAAD,MAAgB,CAACA,EAAW5J,QAAS4J,QAG/Dyb,KAAKrP,wBACHye,EAAmBzR,4BACrBqC,KAAKwC,IAAM4M,EAAmB5M,IAC9BxC,KAAKuC,uBAAyB6M,EAAmB7M,uBAOjDvC,KAAKqP,mBAAqB,IAAI/K,GAC5BtE,KAAKb,kBACLa,KAAKnlB,6BAA6B0oB,kBAIpCvD,KAAKngB,cAAc8sB,QACjB3M,KAAK1b,aAAalB,KAChB,SAACmB,GAAD,OACE,IAAIsoB,GAAkBhyB,EAA8B0J,OAU1Dyb,KAAK4J,sBAAwB5B,cAC3B,iBAAM,CACJ,EAAKntB,6BAA6B8lB,QAClC,EAAK9lB,6BAA6BI,eAHD,uCAKnC,iCAAAkD,EAAA,gFAAQwiB,EAAR,KAAiBhmB,EAAjB,KACE,EAAKmvB,gBAAe,GADtB,SAEQ,EAAKC,sCAETpJ,EACAhmB,GALJ,OAOE,EAAKmvB,gBAAe,GAPtB,2CALmC,sDAcnC,CACE3B,iBAAiB,IApTzB,yCAgDE,WAcE,MAbkC,CAChCxH,QAAS,GACThD,4BAA6BiP,GAC7BzN,kBAAmBa,KAAKb,kBACxBjO,mBAAoB8O,KAAK9O,mBACzBqR,uBAAwBvC,KAAKuC,uBAC7BC,IAAKxC,KAAKwC,IACVlnB,KAAM0kB,KAAK1kB,KACXE,WAAYwkB,KAAKxkB,WACjBuH,OAAQid,KAAK1b,aACboZ,GAAIsC,KAAKtC,MA3Df,mCAkEE,WACE,IADsE,EAChEta,EAAM,IAAI6M,IADsD,eAE9C+P,KAAKngB,eAFyC,IAEtE,2BAA4C,CAAC,IAApCH,EAAmC,QAC1C0D,EAAIksB,IAAI5vB,EAAYK,uBAAwBL,IAHwB,8BAKtE,OAAO0D,IAvEX,wBA0EE,WAGE,OAAOb,WACLyP,KAAOyD,MAAM2Y,YAAYpO,KAAKuP,UAFN,OA5E9B,mCAkFE,WAEE,IAD2C,EACvCC,EAAiB,EADsB,eAGnBxP,KAAKngB,eAHc,IAG3C,2BAA4C,CAC1C2vB,GAD0C,QACZP,uBAJW,8BAO3C,OAAOO,IA1FX,wCA6FE,WAEE,IADgD,EAC5CC,EAAwB,EADoB,eAGxBzP,KAAKngB,eAHmB,IAGhD,2BAA4C,CAC1C4vB,GAD0C,QACL7a,yBAJS,8BAOhD,OAAO6a,IArGX,mCAwGE,WAEE,IAD2C,EACvCC,EAAiB,EADsB,eAGnB1P,KAAKngB,eAHc,IAG3C,2BAA4C,CAC1C6vB,GAD0C,QACZC,uBAJW,8BAO3C,OAAOD,IAhHX,wCAmHE,WAEE,IADgD,EAC5CE,EAAwB,EADoB,eAGxB5P,KAAKngB,eAHmB,IAGhD,2BAA4C,CAC1C+vB,GAD0C,QACLhB,yBAJS,8BAOhD,OAAOgB,IA3HX,4BAiIE,WAEE,IADoC,EAChCC,EAAmB,EADa,eAGZ7P,KAAKngB,eAHO,IAGpC,2BAA4C,CAC1CgwB,GAD0C,QACVhB,qBAJE,8BAOpC,OAAOgB,IAzIX,6BA+IE,WAEE,IADqC,EACjCC,EAAmB,EADc,eAGb9P,KAAKngB,eAHQ,IAGrC,2BAA4C,CAC1CiwB,GAD0C,QACVhB,sBAJG,8BAOrC,OAAOgB,IAvJX,gCA6JE,WAEE,IADwC,EACpCC,EAAqB,EADe,eAGhB/P,KAAKngB,eAHW,IAGxC,2BAA4C,CAI1CkwB,GAJ0C,QAIRxpB,sBAPI,8BAUxC,OAAOwpB,IAxKX,kBA2KE,WAQE,IAAMC,EAAoBhQ,KAAKzZ,qBAS/B,OAAOypB,GAJLA,EAAoB,EAChBhQ,KAAK1W,6BACL0W,KAAKzW,gCA1Lf,oCA+LE,WAEE,IAD4C,EACxC0mB,EAAsB,EADkB,eAGpBjQ,KAAKngB,eAHe,IAG5C,2BAA4C,CAC1CowB,GAD0C,QACPpnB,0BAJO,8BAO5C,OAAOonB,IAvMX,gCA0ME,WAEE,OAAiC,IAA1BjQ,KAAKkQ,qBA5MhB,8BA+ME,WAEE,OAAOlQ,KAAKzW,6BAA+ByW,KAAKnX,2BAjNpD,gCAoNE,WAGE,IAAM0lB,EAAejH,GAAsB,GAC3C,OAAOtH,KAAKmQ,8BAAgC5B,IAxNhD,4BA2NE,WACE,OAAOhsB,WACLyP,KAAOyD,MAAM2Y,YACXpO,KAAKoQ,iBACLpQ,KAAKrP,wBAAwBuR,aA/NrC,8BAoOE,WACE,OAAO3f,WACLyP,KAAOyD,MAAM2Y,YACXpO,KAAKqQ,mBACLrQ,KAAKrP,wBAAwBuR,aAxOrC,oCA6OE,WACE,OAAOlC,KAAKsQ,4BA9OhB,0FA0TE,WACE3P,EACA4K,GAFF,qEAIMA,EAJN,0CAMYvL,KAAKuQ,mBAAmB5P,EAAS4K,GAN7C,uDAQMvL,KAAK2L,mBAAL,MACA5pB,QAAQ6B,MACN,4DADF,MATN,yDA1TF,gIAgVE,uGACSoc,KAAKuQ,mBACVvQ,KAAKnlB,6BAA6B8lB,QAClCX,KAAKnlB,6BAA6BI,cAHtC,gDAhVF,6HAuVE,WAAiC0lB,EAAiBmL,GAAlD,wEAQE9L,KAAKwQ,wBAAwBnM,OAAM,SAAChiB,GAAD,OACjCN,QAAQ6B,MAAR,6CAAoDvB,EAAEiT,gBAGxD0K,KAAKyQ,0BAA0B3E,GAAgBzH,OAAM,SAAChiB,GAAD,OACnDN,QAAQ6B,MAAR,sCAA6CvB,EAAEiT,gBAbnD,SAqBQ0K,KAAK0Q,kBAAkBrM,OAAM,SAAChiB,GAAD,OACjCN,QAAQ6B,MAAR,kCAAyCvB,EAAEiT,gBAtB/C,OA0BE0K,KAAK2Q,kCAAkCtM,OAAM,SAAChiB,GAAD,OAC3CN,QAAQ6B,MAAR,8CAAqDvB,EAAEiT,gBAIzD0K,KAAK4Q,sBACH9E,EACA9L,KAAKb,mBACLkF,OAAM,SAAChiB,GAAD,OACNN,QAAQ6B,MAAR,wCAA+CitB,KAAKC,UAAUzuB,QAnClE,gDAvVF,wHAiYE,8FACQ2d,KAAK4L,qBADb,gDAjYF,gIAqYE,oGAC0B5L,KAAKmP,uBAAuB4B,6BAClD/Q,KAAKtC,IAFT,OACQsT,EADR,OAKEhR,KAAKiR,aAAaD,GALpB,gDArYF,iIA8YE,WAA6BrxB,GAA7B,mBAAAxB,EAAA,0DACQ+yB,EAAqBlR,KAAK5b,yBAER+sB,IAAIxxB,GAH9B,sBAIU,IAAIwhB,MAAJ,8BAAiCxhB,IAJ3C,cAOQD,EAAcwxB,EAAmB7sB,IACrC1E,GARJ,SAUmBqgB,KAAKqP,mBAAmBtK,aAAa,CACpDrlB,EAAY6Q,gBAXhB,cAUQ6gB,EAVR,gBAaQA,EAAGzhB,KAAK,GAbhB,wBAeQqQ,KAAKuQ,mBACTvQ,KAAKnlB,6BAA6B8lB,QAClCX,KAAKnlB,6BAA6BI,aAjBtC,iDA9YF,iIAmaE,WAA4B0E,GAA5B,mBAAAxB,EAAA,0DACQ+yB,EAAqBlR,KAAK5b,yBAER+sB,IAAIxxB,GAH9B,sBAIU,IAAIwhB,MAAJ,8BAAiCxhB,IAJ3C,cAOQD,EAAcwxB,EAAmB7sB,IACrC1E,GARJ,SAUmBqgB,KAAKqP,mBAAmBrK,WACvCtlB,EAAY6Q,eAXhB,cAUQ6gB,EAVR,gBAaQA,EAAGzhB,KAAK,GAbhB,wBAeQqQ,KAAKuQ,mBACTvQ,KAAKnlB,6BAA6B8lB,QAClCX,KAAKnlB,6BAA6BI,aAjBtC,iDAnaF,sIAwbE,WACEsV,GADF,sBAAApS,EAAA,sEAGmB6hB,KAAKqP,mBAAmBtK,aAAa,CAACxU,IAHzD,cAGQ6gB,EAHR,QAMKzhB,OAAOpb,KAAV,sBAAe,sBAAA4J,EAAA,sEACP,EAAKoyB,mBACT,EAAK11B,6BAA6B8lB,QAClC,EAAK9lB,6BAA6BI,aAHvB,4CANjB,kBAaSm2B,GAbT,gDAxbF,qIAwcE,WACE7gB,GADF,sBAAApS,EAAA,sEAGmB6hB,KAAKqP,mBAAmBrK,WAAWzU,GAHtD,cAGQ6gB,EAHR,QAMKzhB,OAAOpb,KAAV,sBAAe,sBAAA4J,EAAA,sEACP,EAAKoyB,mBACT,EAAK11B,6BAA6B8lB,QAClC,EAAK9lB,6BAA6BI,aAHvB,4CANjB,kBAaSm2B,GAbT,gDAxcF,iIAwdE,mCAAAjzB,EAAA,sEACmB6hB,KAAKqP,mBAAmBgC,6BACvCrR,KAAKnlB,6BAA6BI,aAFtC,cACQm2B,EADR,QAMKzhB,OAAOpb,KAAV,sBAAe,sBAAA4J,EAAA,sEACP,EAAKoyB,mBACT,EAAK11B,6BAA6B8lB,QAClC,EAAK9lB,6BAA6BI,aAHvB,4CANjB,kBAaSm2B,GAbT,gDAxdF,gIA0eE,WACEtF,EACAwF,GAFF,4EAKIxF,GACAwF,GACAA,IAAqBvP,IACrB/B,KAAK1qB,YAAYi8B,gCARrB,gCAUgCvR,KAAK1qB,YAAYk8B,oBAAoBC,iBAC/DH,EACAxF,GAZN,OAUU4F,EAVV,OAeI1R,KAAK2R,iBAAiBD,GAf1B,sBAiBI3vB,QAAQ6vB,KAAK,sCAjBjB,gDA1eF,6HAkgBE,oGACwB5R,KAAKqP,mBAAmBzK,gBADhD,OACQC,EADR,OAGE7E,KAAK6R,eAAehN,GAHtB,gDAlgBF,oIAwgBE,WAAuChrB,GAAvC,0EACOA,GAAYmmB,KAAK1qB,YAAYi8B,+BADpC,iEAKuCvR,KAAK1qB,YAAYk8B,oBAAoBM,4BACxE9R,KAAKrP,wBAAwBhW,QAC7BqlB,KAAKb,kBACLtlB,GARJ,OAKQk4B,EALR,OAWE/R,KAAKgS,mBAAmBD,GAX1B,gDAxgBF,uFAqjBE,SAA2BnuB,GACzBoc,KAAKkM,iBAAgB,GACrBlM,KAAK8J,gBAAe,KAvjBxB,oFA0jBE,yGACQmI,EAAgBjS,KAAKkS,aAIJD,EAAc92B,OALvC,yCAMW4G,QAAQC,IAAR,gDANX,UAOcge,KAAK1qB,YAAYi8B,+BAP/B,yCAQWxvB,QAAQC,IAAI,qCARvB,uBAY4Bge,KAAK1qB,YAAYk8B,oBAAoBW,kBAC7DF,GAbJ,cAYQG,EAZR,iBAoBkCpS,KAAK1qB,YAAYk8B,oBAAoBa,kBACnEJ,EACAjS,KAAKnlB,6BAA6BI,aAtBtC,eAoBQo3B,EApBR,iBA0B0CrS,KAAK1qB,YAAYk8B,oBAAoBc,yBAC3EL,GA3BJ,QA+BE,IALMM,EA1BR,kBA+BWC,GACP,IAAMvuB,EAAamuB,EAAYI,GACzBxE,EAAiBqE,EAAkBG,GACnCC,EAAyBF,EAA0BC,GACrDE,EAAsB,EAAK7yB,cAAcC,MAC3C,SAACJ,GAAD,OACEA,EAAYK,yBACZkE,EAAWlE,0BAsBf,GAjBG2yB,GACDzuB,EAAWlE,yBAA2BgiB,KAEtChgB,QAAQC,IAAI,uCACZD,QAAQC,IAAR,iCAC4B,EAAKnC,cAAcuD,KAC3C,SAAC1D,GAAD,OAAiBA,EAAYK,4BAIjC2yB,EAAsB,EAAK7yB,cAAcC,MAAK,SAACJ,GAAD,MAC5C,CAACsiB,GAA2BD,IAAc4Q,SACxCjzB,EAAYK,4BAKd2yB,EAAqB,CACvBA,EAAoBE,qBAClB3uB,EACA+pB,EACAyE,GAGF,IAAMI,EAAuB,EAAK1vB,gBAAgBwvB,SAChDD,EAAoBniB,eAEtBmiB,EAAoBI,uBAAuBD,QAE3C9wB,QAAQC,IAAR,2CACsCiC,EAAWlE,0BA1C5CyyB,EAAI,EAAGA,EAAIJ,EAAYj3B,OAAQq3B,IAAM,EAArCA,GA/BX,iDA1jBF,kFA8oBE,SACuBpG,GACrBpM,KAAKoM,YAAcA,IAhpBvB,6BAmpBE,SACwBC,GACtBrM,KAAKqM,aAAeA,IArpBxB,0BAwpBE,SACqB0G,GACnB/S,KAAKwC,IAAMuQ,EAAYvQ,IACvBxC,KAAKuC,uBAAyBwQ,EAAYxQ,yBA3pB9C,gCA8pBE,SAC2ByQ,GACzBhT,KAAKoQ,iBAAmB4C,EAAYh0B,QACpCghB,KAAKqQ,mBAAqB2C,EAAYC,YAjqB1C,8CAoqBE,SAEE9C,GAEAnQ,KAAKmQ,8BAAgCA,IAxqBzC,8BA2qBE,SACyBuB,GACvB3vB,QAAQC,IAAR,wBAA6B0vB,EAAcnC,YAC3CxtB,QAAQC,IAAR,uBAA4B0vB,EAAcwB,YAC1ClT,KAAKuP,UAAYmC,EAAcnC,UAC/BvP,KAAKkT,UAAYxB,EAAcwB,UAC/BlT,KAAK7c,gBAAgBwpB,QAAQ+E,EAAcyB,WAC3CpxB,QAAQC,IAAR,yBAA8B0vB,EAAcyB,cAlrBhD,4BAqrBE,SACuBC,GACrBpT,KAAKkS,WAAWvF,QAAQyG,KAvrB5B,yCA0rBE,SACEtG,GAcA,MAZiC,CAC/BxxB,KAAMwxB,EAAoBxxB,KAC1BuC,OAAQivB,EAAoBjvB,OAC5BlD,QAASmyB,EAAoBnyB,QAC7BunB,SAAU4K,EAAoB5K,SAC9B9R,aAAc0c,EAAoB1c,aAElClQ,UAAW,EACXE,UAAW,EACXizB,aAAc,OAtsBpB,iDACG9J,MADH,yEACqC,KADrC,6CAEGA,MAFH,yEAEsC,KAFtC,mCAIGA,MAJH,mGAKGA,MALH,gHAMGA,MANH,iHAOGA,MAPH,yGAQGA,MARH,kGAUGA,MAVH,qHAWGA,MAXH,wHAcGA,MAdH,yEAc0D,KAd1D,6CAiBGA,MAjBH,yEAkB6DA,aAAW,OAlBxE,yDAmBGA,MAnBH,yEAoB6BA,aACzB,IAAItZ,QArBR,2CA6BGsZ,MA7BH,yEA6BqDA,aAAW,OA7BhE,8CA+BGA,MA/BH,yEA+BmEA,aAC/D,OAhCJ,wDAoCGA,MApCH,yEAqCsDqD,MArCtD,8DAsCGrD,MAtCH,yEAsC8C,KAtC9C,iDAuCGA,MAvCH,yEAuCwCA,aAAWzU,KAAUC,KAAK,OAvClE,mDAwCGwU,MAxCH,yEAwC0CA,aAAWzU,KAAUC,KAAK,OAxCpE,0CA2CGwU,MA3CH,yEA2CiCA,aAAWzU,KAAUC,KAAK,OA3C3D,0CA4CGwU,MA5CH,yEA4CiCA,aAAWzU,KAAUC,KAAK,OA5C3D,gDA8CGwU,MA9CH,yEA8CiEA,aAAW,OA9C5E,oCAgDGC,MAhDH,0HAkEGA,MAlEH,gIA0EGA,MA1EH,gIAkFGA,MAlFH,gJA6FGA,MA7FH,gJAwGGA,MAxGH,gJAmHGA,MAnHH,yIAiIGA,MAjIH,8HA+IGA,MA/IH,kIA6JGA,MA7JH,uHA2KGA,MA3KH,2HA+LGA,MA/LH,yIA0MGA,MA1MH,mIA+MGA,MA/MH,mIAoNGA,MApNH,iIA2NGA,MA3NH,+HAoOGA,MApOH,uIA6OGA,MA7OH,o/BCvBa8J,IAAb,GA2IG5L,aAAO,2BA3IV,GAgJGA,aAAO,2BAhJV,GAqJGA,aAAO,+BArJV,GA4JGA,aAAO,6BA5JV,GAiKGA,aAAO,mBAjKV,cA4BE,WACU7sB,EACAvF,EACA65B,GACP,0BAHOt0B,+BAGR,KAFQvF,cAER,KADQ65B,yBACR,qPACArH,aAAe9H,MAEfA,KAAKuT,kBAnCT,6CAeE,WAEE,OADcvT,KAAKwT,sBAAsBpwB,KAAI,SAACS,GAAD,OAAaA,EAAQ4vB,YAhBtE,yBAoBE,WAA0D,IAAD,OAKvD,OAJsBzT,KAAKwT,sBAAsB1zB,MAC/C,SAAC+D,GAAD,OAAaA,EAAQ6Z,KAAO,EAAKa,4BAtBvC,oCAsCE,SAA8BvC,GAA0C,IAAD,EACrE,iBAAOgE,KAAKwT,sBAAsB1zB,MAAK,SAAC4zB,GAAD,OAAOA,EAAEhW,KAAO1B,YAAvD,QAAqE,OAvCzE,oEA0CE,sBAAA7d,EAAA,6DACE6hB,KAAK2T,iBAAgB,GADvB,SAIQ3T,KAAK4T,uBAJb,OAOE5T,KAAK6T,uBAIL7T,KAAK8T,qBAGL9T,KAAK2T,iBAAgB,GAdvB,gDA1CF,+HA2DE,oGAC6B3T,KAAKmP,uBAAuB4E,oCADzD,OACQC,EADR,OAEEhU,KAAKiU,4BAA4BD,GAFnC,gDA3DF,wFAgEE,WAAgC,IAAD,OACvBE,EAAWlU,KAAKd,yBAAyB9b,KAAI,SAAC2b,GAAD,OACjD,EAAKoV,aAAapV,MAGpBiB,KAAKoU,yBAAyBF,KArElC,gCA2EE,WAEElU,KAAKwT,sBAAsBa,SAAQ,SAACxwB,GAAD,OAAaA,EAAQywB,kBA7E5D,8BAgFE,SACElS,GAQA,OAN+B,2BAC1BA,GAD0B,IAE7BI,IAAK,EACLD,uBAAwB,MAtF9B,0BA4FE,SAAqBH,GAEnB,IAAMmS,EAAyB,2BAC1BnS,GAD0B,IAE7BI,IAAK,EACLD,uBAAwB,IAY1B,OARgB,IAAI2M,GAClBlP,KAAKnlB,6BACLmlB,KAAK1qB,YACL0qB,KAAKmP,uBAELoF,KA1GN,yBAiHE,SAAmBC,GACjBxU,KAAKyU,0BAA0BD,KAlHnC,sCA2IE,SACiCE,GAC/B1U,KAAKwT,sBAAsB7G,QAAQ+H,KA7IvC,qCAgJE,SACgCC,GAC9B3U,KAAK2U,oBAAoBhI,QAAQgI,KAlJrC,yCAqJE,SAEEzV,GAEAc,KAAKd,yBAAyByN,QAAQzN,KAzJ1C,uCA4JE,SACkCX,GAChCyB,KAAKzB,uBAAyBA,IA9JlC,6BAiKE,SACwBjC,GACtB0D,KAAK1D,UAAYA,MAnKrB,+CACGiN,MADH,yEACmC,KADnC,yDAEGA,MAFH,yEAG0EA,aACtE,OAJJ,oDAMGA,MANH,yEAO+DA,aAAW,OAP1E,sDASGA,MATH,yEAU2DA,aAAW,OAVtE,uDAYGA,MAZH,wEAamC,MAbnC,wCAeGC,MAfH,oHAoBGA,MApBH,yxBCJaoL,IAAb,GA2FGlN,aAAO,qBA3FV,GAiGGA,aAAO,uBAjGV,cAsBE,aAAe,4JACbI,aAAe9H,MAvBnB,sDAME,WACE,MAA+B,iBAAxBA,KAAK6U,iBAPhB,+BAUE,WACE,MAA+B,iBAAxB7U,KAAK6U,iBAXhB,mCAcE,WACE,MAA+B,qBAAxB7U,KAAK6U,iBAfhB,kCAkBE,WACE,MAA+B,oBAAxB7U,KAAK6U,iBAnBhB,6BA4BE,SAAuBC,GACrB9U,KAAK+U,qBAAqB,eAAgBD,KA7B9C,6BAgCE,SAAuBE,GACrBhV,KAAK+U,qBAAqB,eAAgBC,KAjC9C,iCAoCE,SAA2BA,GACzBhV,KAAK+U,qBAAqB,mBAAoBC,KArClD,gCAwCE,WACEhV,KAAKiV,kBAAkB,qBAzC3B,kCA6CE,SACEC,EACAhlB,GAGA8P,KAAKmV,oBAAoBjlB,GACzB8P,KAAKiV,kBAAkBC,KAnD3B,6BAyDE,WACMlV,KAAKvD,qBACPuD,KAAKiV,kBAAkB,UA3D7B,6BAkEE,WACMjV,KAAKrD,qBACPqD,KAAKiV,kBAAkB,UApE7B,iCA2EE,WACMjV,KAAKnD,yBACPmD,KAAKiV,kBAAkB,UA7E7B,gCAoFE,WACMjV,KAAKhD,wBACPgD,KAAKiV,kBAAkB,UAtF7B,+BA2FE,SAC0BJ,GACxB9yB,QAAQC,IAAR,+BAAoC6yB,IACpC7U,KAAK6U,eAAiBA,IA9F1B,iCAiGE,SAC4B3kB,GAC1B8P,KAAK9P,iBAAmBA,MAnG5B,qDACGqZ,MADH,wEACgC,kBADhC,+CAGGA,MAHH,wEAGiD,UAHjD,iDAIGA,MAJH,wEAIyC,MAJzC,iDAMGC,MANH,mIAUGA,MAVH,uIAcGA,MAdH,0IAkBGA,MAlBH,mW,UCOa4L,GAAb,WAGE,WACEC,EACQ9R,GACP,0BADOA,mBACR,KALM+R,0BAKN,EACAtV,KAAKsV,qBAAuB,IAAI7R,KAC9B4R,EACAE,GAAiB5R,IACjBJ,GAVN,8DAcE,SAAiCiS,GAC/BzzB,QAAQC,IAAR,2CAAgDwzB,IACjB,KAA3BA,GACFzzB,QAAQC,IAAI,sCAGdge,KAAKsV,qBAAuB,IAAI7R,KAC9B+R,EACAD,GAAiB5R,IACjB3D,KAAKuD,oBAvBX,mEA2BE,WAAqBhT,GAArB,SAAApS,EAAA,6DACO6hB,KAAKyV,iBACR1zB,QAAQC,IAAI,0CAFhB,KAISghB,GAJT,SAKUhD,KAAKsV,qBAAqBI,WAAWC,eAAeplB,GAL9D,4GA3BF,6HAoCE,WACEqlB,GADF,eAAAz3B,EAAA,yDAIO6hB,KAAKyV,gBAJZ,uBAKI1zB,QAAQC,IAAI,0CALhB,kBAMW,IANX,uBAQyBge,KAAKsV,qBAAqBI,WAAWvD,kBAC1DyD,GATJ,cAQQC,EARR,yBAYSA,EAASzyB,KAAI,SAAC0yB,GAAD,OAAa9S,GAA8B8S,OAZjE,gDApCF,6HAmDE,WACEF,EACA/7B,GAFF,eAAAsE,EAAA,yDAKO6hB,KAAKyV,gBALZ,uBAMI1zB,QAAQC,IAAI,0CANhB,kBAOW,IAPX,uBASyBge,KAAKsV,qBAAqBI,WAAWrD,kBAC1DuD,EACA/7B,GAXJ,cASQg8B,EATR,yBAcSA,EAASzyB,KAAI,SAAC0yB,GAAD,OAAa9S,GAA8B8S,OAdjE,gDAnDF,sIAoEE,WACEF,GADF,eAAAz3B,EAAA,yDAIO6hB,KAAKyV,gBAJZ,uBAKI1zB,QAAQC,IAAI,iDALhB,kBAMW,IANX,uBAQyBge,KAAKsV,qBAAqBI,WAAWpD,yBAC1DsD,GATJ,cAQQC,EARR,yBAYSA,EAASzyB,KAAI,SAAC0yB,GAAD,OAAa9S,GAA8B8S,OAZjE,gDApEF,4HAmFE,WACEC,EACAl8B,GAFF,uBAAAsE,EAAA,yDAKO6hB,KAAKyV,gBALZ,uBAMI1zB,QAAQC,IAAI,yCANhB,kBAOW,CACLkxB,UAAWpe,KAAUC,KAAK,GAC1Bwa,UAAWza,KAAUC,KAAK,GAC1Boe,UAAW,KAVjB,uBAaiCnT,KAAKsV,qBAAqB7D,iBACvDsE,EACAl8B,GAfJ,cAaQm8B,EAbR,qBAiB4CA,EAjB5C,GAiBS7C,EAjBT,KAiBoB5D,EAjBpB,KAiB+B2D,EAjB/B,uBAmBS,CACLC,YACA5D,YACA2D,cAtBJ,gDAnFF,yIA6GE,WACE+C,EACAF,EACAl8B,GAHF,eAAAsE,EAAA,yDAMO6hB,KAAKyV,gBANZ,uBAOI1zB,QAAQC,IAAI,oDAPhB,kBAQW,CACLhD,QAAS8V,KAAUC,KAAK,GACxBke,UAAWne,KAAUC,KAAK,GAC1BmhB,MAAOphB,KAAUC,KAAK,KAX5B,cAeEhT,QAAQC,IAAR,oDACAD,QAAQC,IAAI,CAAEi0B,cACdl0B,QAAQC,IAAI,CAAE+zB,uBACdh0B,QAAQC,IAAI,CAAEnI,YAlBhB,SAoBsCmmB,KAAKsV,qBAAqBI,WAAWS,0BACvEF,EACAF,EACAl8B,GAvBJ,cAoBQu8B,EApBR,yBA0BSA,GA1BT,iDA7GF,sFA0IE,WAIE,OAHAr0B,QAAQC,IAAR,mCAC8Bge,KAAKsV,qBAAqB36B,UAEX,KAAtCqlB,KAAKsV,qBAAqB36B,UA9IrC,yBAiJE,WACE,IAAKqlB,KAAKyV,cACR,MAAM,IAAItU,MAAJ,6CAnJZ,KCHakV,GAA4B,CAAC,KAAM,OACnCC,GAA2B,CAZN,EACZ,KAqBTC,GAA+D,CAC1E,EAAK,CACHlB,oBAAqB,6CACrB3X,GAAI,GAEN,IAAO,CACL2X,oBAAqB,6CACrB3X,GAAI,MCiBK8Y,IAAb,GAoHG9O,aAAO,kBApHV,GAyHGA,aAAO,mBAzHV,GA8HGA,aAAO,gBA9HV,GAmIGA,aAAO,iBAnIV,GAwIGA,aAAO,iBAxIV,GA6IGA,aAAO,uBA7IV,GAmJGA,aAAO,0BAnJV,cAmCE,WACU7sB,GACP,IAAD,iCADQA,+BACR,qaAJM47B,2BAIN,EACAzW,KAAKyW,sBAAwBzO,cAC3B,iBAAM,CAAC,EAAKntB,6BAA6B8lB,WADN,uCAEnC,+BAAAxiB,EAAA,gFAAQwiB,EAAR,KACE,EAAKmJ,gBAAe,GADtB,SAEQ,EAAK4M,6BAA6B/V,GAF1C,OAGE,EAAKmJ,gBAAe,GAHtB,2CAFmC,sDAOnC,CACE3B,iBAAiB,IA9CzB,iEAeE,WAEE,MAAoC,KAA7BnI,KAAKqV,sBAjBhB,+BAoBE,WAEE,OAAIrV,KAAKuR,+BACA,IAAI6D,GACTpV,KAAKqV,oBACLrV,KAAKnlB,6BAA6B0oB,kBAI7B,OA7Bb,iFAyDE,WAA2C5C,GAA3C,uEACE5e,QAAQC,IAAR,mBAAwB2e,IAExB5e,QAAQC,IAAR,sBAA2B8kB,GAA6BnG,KAQlDgW,EAA2B3W,KAAK4W,4BAA4BjW,GAElEX,KAAK6W,uBAAuBF,GAG5B3W,KAAK8W,oBAAoBhQ,GAA6BnG,IAAY,OAhBpE,gDAzDF,mIAkFE,WAAsCmL,GAAtC,iEACE9L,KAAKiM,gCADP,gDAlFF,kGAsFE,cAtFF,yCAwFE,SAAoCtL,GAElC,OADA5e,QAAQC,IAAR,+BAAoC2e,IAChC0V,GAAa1D,SAAShS,GACjBoW,GAAeC,aACbV,GAAY3D,SAAShS,GACvB4V,GAAqB5V,GAA0B0U,sBACpB,IAAxB1U,GAIV5e,QAAQ6B,MAAR,kCAAyC+c,EAAzC,oBAA4DA,EAA5D,MAFO,MAhGb,gCAwGE,SAA2B/c,GACzBoc,KAAKkM,iBAAgB,GACrBlM,KAAK8J,gBAAe,KA1GxB,+BA6GE,WACE9J,KAAKwK,cAAa,GAClBxK,KAAKmM,eAAc,GACnBnM,KAAK0K,eAAc,KAhHvB,4BAoHE,SACuB0B,GACrBpM,KAAKoM,YAAcA,IAtHvB,6BAyHE,SACwBC,GACtBrM,KAAKqM,aAAeA,IA3HxB,0BA8HE,SACqBC,GACnBtM,KAAKsM,UAAYA,IAhIrB,2BAmIE,SACsBC,GACpBvM,KAAKuM,WAAaA,IArItB,2BAwIE,SACsBC,GACpBxM,KAAKwM,WAAaA,IA1ItB,iCA6IE,SAC4Bnc,GAC1BtO,QAAQC,IAAR,6BAAkCqO,IAClC2P,KAAK3P,iBAAmBA,IAhJ5B,oCAmJE,SAC+BglB,GAC7BtzB,QAAQC,IAAR,sCAA2CqzB,IAC3CrV,KAAKqV,oBAAsBA,MAtJ/B,mEACG9L,MADH,yEACqD,KADrD,+DAEGA,MAFH,yEAEsD,KAFtD,4CAGGA,MAHH,yEAGmC,KAHnC,6CAIGA,MAJH,yEAIoC,KAJpC,iDAMGA,MANH,wEAMwC,SANxC,oDAOGA,MAPH,wEAO2C,MAP3C,0CAUGA,MAVH,yEAWqB,KAXrB,2CAYGA,MAZH,yEAYkC,KAZlC,2CAaGA,MAbH,yEAakC,KAblC,4DAeGC,MAfH,8IAoBGA,MApBH,q9BCeEyN,aAAU,CACRC,eAAgB,aClDpB,IAAMpT,GAAoBqT,OAAezX,SACnC0X,GCwBC,SAAuBtT,GAC5B,IAAMP,EAAmBM,GAAoBC,GACvCuT,EAsDCC,GApDP,MAAO,CACLC,+BAAgC,IAAI9X,GAClCqE,GAEFqL,uBAAwB,IAAIhN,GAC5BqV,2BAA4B,IAAInU,GAC9BgU,EAAUI,oBACVlU,GAIFmU,oBAAqB,IAAIhS,GAAoBnC,GAC7CoU,qBAAsB,IAAI/Q,GAAsBrD,IDxCnCqU,CAAc9T,IACzB+T,GC4CC,SACL/T,EACAwT,GAEA,IAAM/T,EAAmBM,GAAoBC,GAE7C,MAAO,CACLgU,uBAAwB,IAAIxT,GAC1BgT,EAAmBnY,kBACnBoE,IDrDawU,CAAgBjU,GAAkB,CACnD3E,kBAAmB4C,KAKfiW,GDFC,SACLrQ,EACAwH,EACAzF,EACAC,GAGA,IAAM9uB,EAA+B,IAAI4sB,GACvCE,GAGIryB,EAAc,IAAIkhC,GAAY37B,GAE9BzF,EAAuB,IAAIk+B,GAC/Bz4B,EACAvF,EACA65B,GAmBF,MARwB,CACtBt0B,+BACA3F,aAVmB,IAAIu0B,GACvB5uB,EACAvF,EACAF,EACAs0B,EACAC,GAMAv0B,uBACAE,cACAE,YAAa,IAAIo/B,IC9BNqD,CACbb,GAASG,+BACTH,GAASjI,uBACTiI,GAASM,oBACTN,GAASO,sBAGEO,GAAapjC,IAAMsB,MAAa,SAACC,GAC5C,OACE,cAAC,IAAD,mDAAc2hC,IAAYZ,IAAcS,IAAxC,aACE,cAACM,EAAA,EAAD,CAAgBC,aAAW,EAA3B,SACE,cAACC,EAAA,EAAD,CAAexiC,MAAOwpB,GAAtB,SACE,cAACJ,GAAD,cE5BVqZ,IAAS9b,OACP,cAAC,IAAM+b,WAAP,UACE,cAACL,GAAD,MAEFM,SAASC,eAAe,SAM1BrkC,M","file":"static/js/main.7500fc7f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from \"react\";\nimport { MobXProviderContext } from \"mobx-react\";\nimport { IStores } from \"./stores\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { AccountStore } from \"./AccountStore\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { TLNContractsAddresses } from \"../services/Services\";\nimport { ModalsStore } from \"./ModalsStore\";\nimport { SingleCTokenStore } from \"./multiInstanceStores/SingleCTokenStore\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { SystemStore } from \"./SystemStore\";\n\nexport function useStores(): IStores {\n  // @ts-ignore\n  return React.useContext(MobXProviderContext);\n}\n\nexport function useCryptoWalletIntegrationStore(): CryptoWalletConnectionStore {\n  return useStores().cryptoWalletIntegrationStore;\n}\n\nexport function useAccountStore(): AccountStore {\n  return useStores().accountStore;\n}\n\nexport function useLendingNetworksStore(): LendingNetworksStore {\n  return useStores().lendingNetworksStore;\n}\n\nexport function useSystemStore(): SystemStore {\n  return useStores().systemStore;\n}\n\nexport function useModalsStore(): ModalsStore {\n  return useStores().modalsStore;\n}\n\nexport function useActiveLendingNetworkStore(): SingleLNStore | undefined {\n  return useStores().lendingNetworksStore.activeLNStore;\n}\n\nexport function useCTokenStoreByBaseAsset(\n  baseAssetAddress: string\n): SingleCTokenStore | undefined {\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLN = lendingNetworksStore.activeLNStore;\n  const cTokenStore = activeLN?.cTokensStores.find(\n    (cTokenStore) => cTokenStore.underlyingAssetAddress === baseAssetAddress\n  );\n  return cTokenStore;\n}\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { DetailedHTMLProps } from \"react\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    margin: \"0 auto\",\n    paddingRight: \"1.33rem\",\n    paddingLeft: \"1.33rem\",\n    maxWidth: \"82rem\",\n  },\n}));\n\nexport const ContentContainer = React.memo<\n  IProps &\n    DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\n>((props) => {\n  const { children, ...rest } = props;\n  const classes = useStyles();\n\n  return (\n    <div className={classes.contentContainer} {...rest}>\n      {children}\n    </div>\n  );\n});\n","// export const BRAND_MAIN_COLOR = \"#00D395\";\n// export const BRAND_MAIN_COLOR = \"#00D395\";\n// export const BRAND_MAIN_COLOR = \"#31E5A6\";\nexport const BRAND_MAIN_COLOR = \"#83dbe3\";\n// export const BRAND_MAIN_COLOR = \"#ff8906\";\n\n// export const AFFIRMATIVE_GREEN_COLOR = \"#00D395\";\n// export const DEAFFIRMATIVE_RED_COLOR = \"#f96d6d\";\nexport const AFFIRMATIVE_GREEN_COLOR = \"#31E5A6\";\nexport const DEAFFIRMATIVE_RED_COLOR = \"#E53170\";\n\n// export const BACKGROUND_DARK_COLOR = \"#0f0e17\";\nexport const BACKGROUND_DARK_COLOR = \"#211f33\";\nexport const BACKGROUND_LIGHT_COLOR = \"#fffefe\";\n\nexport const TEXT_ON_DARK = \"#fffffe\";\nexport const TEXT_ON_LIGHT = \"#2e2f3e\";\n\nexport const GRAYISH_TEXT = \"#AAB8C1\";\n","import { makeStyles, Typography, Grid, Hidden } from \"@material-ui/core\";\nimport React from \"react\";\nimport clsx from \"clsx\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCryptoWalletIntegrationStore,\n  useLendingNetworksStore,\n  useModalsStore,\n} from \"../../store/storeHooks\";\nimport { ContentContainer } from \"../structure/ContentContainer\";\nimport { Link } from \"react-router-dom\";\nimport Color from \"color\";\nimport {\n  BACKGROUND_DARK_COLOR,\n  BACKGROUND_LIGHT_COLOR,\n  GRAYISH_TEXT,\n  TEXT_ON_DARK,\n} from \"../../theme/themeConstants\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    padding: \"1rem 0\",\n    // background: \"#070A0E\",\n    backgroundColor: theme.palette.background.default,\n    minHeight: \"80px\",\n  },\n  alignedRow: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  logoLink: {\n    minWidth: 127,\n    height: 27,\n    backgroundImage: `url(${process.env.PUBLIC_URL}/images/compound-logo.svg)`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"contain\",\n    backgroundColor: \"transparent\",\n  },\n\n  // Placeholder until we will have our logo ready\n  logoLinkText: {\n    // minWidth: 127,\n    height: 27,\n    fontWeight: \"bold\",\n    // color: \"white\",\n    color: Color.rgb(theme.palette.primary.main).darken(0.1).hex(),\n    textDecoration: \"none\",\n    fontSize: 20,\n    // backgroundImage: `url(${process.env.PUBLIC_URL}/images/compound-logo.svg)`,\n    // backgroundRepeat: \"no-repeat\",\n    // backgroundSize: \"contain\",\n    // backgroundColor: \"transparent\",\n\n    // fill: \"transparent\",\n\n    // background: `linear-gradient to bottom, ${theme.palette.primary.main} 0%, ${theme.palette.primary.main} 100%`,\n    // background: \"linear-gradient to bottom, red 0%, red 1000%\",\n    textAlign: \"center\",\n    // stroke: \"red\",\n    // strokeWidth: \"12px\",\n    // fill: \"white\",\n    transition: \"200ms\",\n\n    borderColor: theme.palette.primary.main,\n    // paddingRight: \"0.5rem\",\n    // paddingLeft: \"0.5rem\",\n\n    \"&:hover\": {\n      // color: theme.palette.primary.light,\n      // color: Color.rgb(theme.palette.primary.main).lighten(0.25).hex(),\n      fontSize: 21,\n      // paddingBottom: \"5px\",\n      // paddingBottom: \"2rem\",\n      // borderBottom: \"1px solid\",\n      // borderTop: \"1px solid\",\n      // opacity: 0.8,\n      // stroke: \"black\",\n      // strokeWidth: \"12px\",\n      // textShadow: `1px 0 0 ${GRAYISH_TEXT}, 0 1px 0 ${GRAYISH_TEXT}, 1px 0 0 ${GRAYISH_TEXT}, 0 -1px 0 ${GRAYISH_TEXT}`,\n      // borderRight: `1px solid ${Color.rgb(theme.palette.primary.main)\n      //   .lighten(0.3)\n      //   .hex()}`,\n      // borderLeft: `1px solid ${Color.rgb(theme.palette.primary.main)\n      //   .lighten(0.3)\n      //   .hex()}`,\n      // borderRadius: \"5%\",\n    },\n  },\n  lnLinkText: {\n    minWidth: 127,\n    height: 27,\n    // color: \"rgba(256,256,256,0.5)\",\n    color: TEXT_ON_DARK,\n    // color: theme.palette.primary.dark,\n    textDecoration: \"none\",\n    fontSize: 20,\n    // backgroundImage: `url(${process.env.PUBLIC_URL}/images/compound-logo.svg)`,\n    // backgroundRepeat: \"no-repeat\",\n    // backgroundSize: \"contain\",\n    // backgroundColor: \"transparent\",\n    textAlign: \"center\",\n    transition: \"200ms\",\n\n    \"&:hover\": {\n      fontSize: 21,\n      // paddingBottom: \"2rem\",\n      // borderBottom: \"1px solid\",\n      // borderTop: \"1px solid\",\n      // color: \"white\",\n      // borderRight: \"1px solid white\",\n      // borderLeft: \"1px solid white\",\n    },\n  },\n  actions: {\n    minHeight: \"3rem\",\n    justifyContent: \"flex-end\",\n    // color: \"#CFD8DC\",\n    color: TEXT_ON_DARK,\n  },\n  headerButtonLike: {\n    // border: `5px solid ${Color.rgb(theme.palette.background.default)\n    //   .lighten(0.9)\n    //   .hex()}`,\n    backgroundColor: Color.rgb(theme.palette.background.default)\n      .lighten(0.9)\n      .hex(),\n    border: `3px solid ${theme.palette.background.default}`,\n    borderRadius: \"5%\",\n    \"&:hover\": {\n      borderColor: Color.rgb(theme.palette.background.default)\n        .lighten(0.9)\n        .hex(),\n      backgroundColor: theme.palette.background.default,\n      color: theme.palette.primary.light,\n      // background: \"#1d2b38\",\n      // background: Color.rgb(theme.palette.background.default)\n      //   .lighten(0.9)\n      //   .hex(),\n    },\n  },\n  tokenBalance: {\n    // backgroundColor: \"#f25f4c\",\n    // border: \"1px solid #fffffe\",\n\n    // background: \"#141E27\",\n    // backgroundColor: Color.rgb(theme.palette.background.default)\n    //   .darken(0.1)\n    //   .hex(),\n\n    // borderRadius: \"3px\",\n    cursor: \"pointer\",\n    padding: \"0.43rem 0.665rem\",\n    display: \"flex\",\n    alignItems: \"center\",\n    letterSpacing: \"1px\",\n    fontSize: \"12px\",\n    fontWeight: 600,\n    textTransform: \"none\",\n  },\n\n  account: {\n    // background: \"#141E27\",\n    borderRadius: \"3px\",\n    cursor: \"pointer\",\n    padding: \"0.665rem\",\n    marginLeft: \"1.33rem\",\n    letterSpacing: \"1px\",\n    fontSize: \"12px\",\n    fontWeight: 600,\n    textTransform: \"none\",\n  },\n\n  // DEV_NOTE : All of these 'icon' classes can be moved to a common file\n  tokenIcon: {\n    marginLeft: \"0.25rem\",\n    height: \"1.25rem\",\n    width: \"1.25rem\",\n    minHeight: \"1.25rem\",\n    minWidth: \"1.25rem\",\n  },\n  // TODO : CRITICAL : Make this generic\n  iconComp: {\n    backgroundImage: `url(${process.env.PUBLIC_URL}/tokens/asset_WFUSE.svg)`,\n  },\n  icon: {\n    flexShrink: 0,\n    display: \"inline-block\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\",\n    backgroundSize: \"contain\",\n    borderRadius: \"50%\",\n  },\n\n  logoLetter: {\n    transition: \"200ms\",\n  },\n  letterO: {\n    // margin: \"0.3rem\",\n    color: \"#feb276\",\n    // stroke: \"2px #feb276\",\n    // textShadow:\n    //   \"-2px -2px 0 #feb276, 2px -2px 0 #feb276, -2px 2px 0 #feb276, 2px 2px #feb276\",\n    // textShadow: `-1px -1px 0 ${BACKGROUND_LIGHT_COLOR}, 1px -1px 0 ${BACKGROUND_LIGHT_COLOR}, -1px 1px 0 ${BACKGROUND_LIGHT_COLOR}, 1px 1px 0 ${BACKGROUND_LIGHT_COLOR}`,\n  },\n  letterL: {\n    color: \"#80dae3\",\n    // textShadow:\n    //   \"-2px -2px 0 #80dae3, 2px -2px 0 #80dae3, -2px 2px 0 #80dae3, 2px 2px #80dae3\",\n    // textShadow: `-2px -2px 0 ${BACKGROUND_DARK_COLOR}, 2px -2px 0 ${BACKGROUND_DARK_COLOR}, -2px 2px 0 ${BACKGROUND_DARK_COLOR}, 2px 2px ${BACKGROUND_DARK_COLOR}`,\n  },\n  letterA: {\n    color: \"#5053d4\",\n    // textShadow:\n    //   \"-2px -2px 0 #5053d4, 2px -2px 0 #5053d4, -2px 2px 0 #5053d4, 2px 2px #5053d4\",\n    // textShadow: `-2px -2px 0 ${BACKGROUND_DARK_COLOR}, 2px -2px 0 ${BACKGROUND_DARK_COLOR}, -2px 2px 0 ${BACKGROUND_DARK_COLOR}, 2px 2px ${BACKGROUND_DARK_COLOR}`,\n  },\n}));\n\nexport const Header = observer<React.FunctionComponent<IProps>>((props) => {\n  const classes = useStyles();\n\n  const cryptoWalletConnectionStore = useCryptoWalletIntegrationStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLn = lendingNetworksStore.activeLNStore;\n\n  const walletText = cryptoWalletConnectionStore.isConnectedToWallet\n    ? summarizeAddress(cryptoWalletConnectionStore.mainAddress)\n    : \"Connect\";\n\n  const hasActiveLn = !!activeLn;\n  const activeLnName = activeLn?.name;\n  const linkToLnPage = activeLn?.lnHomePage || \"/\";\n  const incentiveTokenBalance = activeLn?.compBalanceUnits || 0;\n\n  return (\n    <header className={classes.header}>\n      <ContentContainer>\n        <Grid\n          container\n          direction=\"row\"\n          alignItems=\"center\"\n          style={\n            {\n              // alignItems: \"center\",\n              // alignContent: \"center\",\n            }\n          }\n        >\n          {/* Logo */}\n          <Grid item xs={6} sm={3} className={classes.alignedRow}>\n            {/* TODO : Add Project logo here */}\n            {/*<Link className={classes.logoLink} to=\"/\" />*/}\n            <Link className={classes.logoLinkText} to=\"/\">\n              <span className={clsx([classes.letterO, classes.logoLetter])}>\n                O\n              </span>\n              <span className={clsx([classes.letterL, classes.logoLetter])}>\n                L\n              </span>\n              <span className={clsx([classes.letterA, classes.logoLetter])}>\n                A\n              </span>\n            </Link>\n\n            {/* TODO : QUICK-HACK : ORGANIZE THIS*/}\n            {activeLnName && (\n              <a\n                className={classes.lnLinkText}\n                target=\"_blank\"\n                href={linkToLnPage}\n              >\n                {activeLnName}\n              </a>\n            )}\n            {/*{!activeLnName && (*/}\n            {/*  <span className={classes.lnLinkText}>All Networks</span>*/}\n            {/*)}*/}\n          </Grid>\n          {/* Empty spaces */}\n          {/* DEV_NOTE : Place holder for the navigations */}\n          <Hidden xsDown>\n            <Grid item xs={6}></Grid>\n          </Hidden>\n\n          <Grid\n            className={clsx(classes.alignedRow, classes.actions)}\n            item\n            xs={12}\n            sm={3}\n          >\n            {/* Token balance */}\n            {hasActiveLn && (\n              <div\n                className={clsx([\n                  classes.headerButtonLike,\n                  classes.tokenBalance,\n                ])}\n                onClick={() => modalsStore.showIncentiveModal()}\n              >\n                {incentiveTokenBalance.toFixed(4).toLocaleString()}\n                <div\n                  className={clsx(\n                    classes.tokenIcon,\n                    classes.iconComp,\n                    classes.icon\n                  )}\n                />\n              </div>\n            )}\n\n            {/* Address */}\n            {/* DEV_NOTE : Hides on mobile to keep original UX*/}\n            {/*<Hidden xsDown>*/}\n            <a\n              className={clsx(classes.headerButtonLike, classes.account)}\n              onClick={() => cryptoWalletConnectionStore.askToConnect()}\n            >\n              <span />\n              {walletText}\n            </a>\n            {/*</Hidden>*/}\n          </Grid>\n        </Grid>\n      </ContentContainer>\n    </header>\n  );\n});\n\n/**\n * QuicknDirty\n */\nfunction summarizeAddress(address: string): string {\n  return `${address.substring(0, 3)}...${address.substring(\n    address.length - 3,\n    address.length\n  )}`;\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nexport const useCommonClasses = makeStyles((theme) => ({\n  mobileHide: {\n    [theme.breakpoints.down(\"xs\")]: {\n      display: \"none !important\",\n    },\n  },\n  mobileOnly: {\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none !important\",\n    },\n  },\n  label: {\n    // fontFamily: 'Haas Grot Text R',\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n\n  textRight: {\n    textAlign: \"right\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  icon: {\n    flexShrink: 0,\n    display: \"inline-block\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\",\n    backgroundSize: \"contain\",\n    borderRadius: \"50%\",\n    width: \"1.8rem\",\n    height: \"1.8rem\",\n    minWidth: \"1.8rem\",\n    minHeight: \"1.8rem\",\n  },\n}));\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { BACKGROUND_LIGHT_COLOR } from \"../../theme/themeConstants\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  panel: {\n    background: BACKGROUND_LIGHT_COLOR,\n    boxShadow: \"0px 2px 4px rgb(16 21 24 / 5%)\",\n    borderRadius: \"4px\",\n    // marginBottom: \"1.33rem\",\n    height: \"100%\",\n    width: \"100%\",\n  },\n}));\n\nexport const Panel = React.memo<IProps>((props) => {\n  const classes = useStyles();\n\n  return <div className={classes.panel}>{props.children}</div>;\n});\n","import React, { useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport { useCommonClasses } from \"../../theme/commonClasses\";\nimport { makeStyles } from \"@material-ui/core\";\n\ninterface IProps {\n  symbol: string;\n  extraClasses?: string[];\n}\n\nconst PUBLIC_URL = process.env.PUBLIC_URL;\n\nconst useStyles = makeStyles((theme) => ({\n  token: {\n    // \"&:hover\": {\n    //   animation: \"$turn 3000ms linear\",\n    // },\n  },\n\n  \"@keyframes turn\": {\n    \"0%\": {\n      transform: \"rotateY(0deg)\",\n    },\n    // \"25%\": {\n    //   transform: \"rotateY(-180deg)\",\n    // },\n    \"50%\": {\n      transform: \"rotateY(-360deg)\",\n    },\n    // \"75%\": {\n    //   transform: \"rotateY(180deg)\",\n    // },\n    \"100%\": {\n      transform: \"rotateY(0deg)\",\n    },\n  },\n  \"@keyframes return\": {\n    \"100%\": {\n      transform: \"rotateY(0deg)\",\n    },\n  },\n}));\n\nexport const TokenIcon = React.memo<IProps>((props) => {\n  const { symbol, extraClasses } = props;\n  const classes = useStyles();\n  const commonClasses = useCommonClasses();\n\n  const classesForSpan = useMemo(() => {\n    const safeExtraClasses = extraClasses || [];\n    return clsx([commonClasses.icon, classes.token, ...safeExtraClasses]);\n  }, [classes.token, commonClasses.icon, extraClasses]);\n\n  return (\n    <span\n      className={classesForSpan}\n      style={{\n        backgroundImage: `url(${PUBLIC_URL}/tokens/asset_${symbol}.svg)`,\n        backgroundSize: \"contain\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    />\n  );\n});\n","import React, { useCallback, useMemo } from \"react\";\nimport { Grid, makeStyles, Switch } from \"@material-ui/core\";\nimport { TMarketType } from \"./types\";\nimport clsx from \"clsx\";\nimport { useCommonClasses } from \"../../../../theme/commonClasses\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { TokenIcon } from \"../../../../components/icons/TokenIcon\";\nimport {\n  BRAND_MAIN_COLOR,\n  TEXT_ON_LIGHT,\n} from \"../../../../theme/themeConstants\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCryptoWalletIntegrationStore,\n  useCTokenStoreByBaseAsset,\n} from \"../../../../store/storeHooks\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport Color from \"color\";\n\ninterface IProps {\n  assetSummary: TAssetInMarketParameters;\n  unitsInWallet: number;\n  marketType: TMarketType;\n\n  onCollateralableChange: (\n    baseAssetAddress: string,\n    newCollaterableValue: boolean\n  ) => void;\n\n  onAssetSelected: (baseAssetAddress: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  // TODO : Consider making this global\n  a: {\n    color: \"inherit\",\n    letterSpacing: \"1px\",\n    // fontSize: \"12px\",\n    // fontWeight: 700,\n    textRransform: \"uppercase\",\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n  },\n  asset: {\n    // display: \"flex\",\n    // alignItems: \"center\",\n    // borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    // padding: \"1.25rem 1.75rem\",\n    // fontSize: \"1rem\",\n    // fontWeight: 500,\n    // textTransform: \"capitalize\",\n    // letterSpacing: 0,\n    // transition: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    // padding: \"1.25rem 1.75rem\",\n    padding: \"1.25rem 1.75rem\",\n    borderLeft: \"2px solid transparent\",\n    paddingLeft: \"1.625rem\",\n    textTransform: \"none\",\n    fontSize: \"1rem\",\n    fontWeight: 500,\n    letterSpacing: 0,\n    transition: \"none\",\n    color: TEXT_ON_LIGHT,\n\n    \"&:hover\": {\n      borderLeft: `2px solid ${BRAND_MAIN_COLOR}`,\n      // color: \"#141E27\",\n      color: Color.rgb(TEXT_ON_LIGHT).darken(0.3).hex(),\n      fontWeight: \"bolder\",\n    },\n\n    height: \"6rem\",\n  },\n\n  list_icon: {\n    width: \"2.25rem\",\n    height: \"2.25rem\",\n  },\n\n  identity: {\n    alignItems: \"center\",\n  },\n\n  identity_icon: {\n    marginRight: \"1rem\",\n  },\n\n  identity_balance: {\n    flex: \"1 1\",\n    marginRight: \"0.25rem\",\n    overflow: \"hidden\",\n  },\n\n  balance: {\n    \"& > div\": {\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n    },\n  },\n\n  balanceSubtitle: {\n    display: \"block\",\n    marginTop: \"9px\",\n    color: \"#AAB8C1\",\n    fontSize: \"0.9em\",\n  },\n}));\n\nexport const AssetPanelRow = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const classes = useStyles();\n    const commonClasses = useCommonClasses();\n    const {\n      marketType,\n      assetSummary,\n      // cTokenMeta,\n      onCollateralableChange,\n      onAssetSelected,\n    } = props;\n\n    const { address } = assetSummary;\n\n    const {\n      name,\n      symbol,\n      // amountInWallet,\n      // isCollateralable,\n      // supplyApy,\n      // usdLiquidity,\n    } = assetSummary;\n\n    const cTokenStore = useCTokenStoreByBaseAsset(address);\n\n    const isCollaterable = cTokenStore?.isCollaterable;\n\n    // console.log({ supplyRatePerBlock: supplyRatePerBlock });\n\n    const borrowApy = cTokenStore?.borrowApyInPercentages || 0;\n    const supplyApy = cTokenStore?.supplyApyInPercentages || 0;\n\n    const usdCashLiquidity = cTokenStore?.cTokenCashInUSD || 0;\n    const walletBalanceInUnits =\n      cTokenStore?.accountUnderlyingBalanceInUnits || 0;\n\n    const liquidityUSDInScale = amountToSumInScale(usdCashLiquidity);\n\n    const supplyInUnits = cTokenStore?.accountSupplyInUnits || 0;\n    const borrowInUnits = cTokenStore?.accountBorrowInUnits || 0;\n\n    const isSupply = marketType === \"supply\";\n    const ApyToDisplay = isSupply ? supplyApy : borrowApy;\n    const unitsToDisplay = isSupply ? supplyInUnits : borrowInUnits;\n    const unitsText = isSupply ? \"Supplied\" : \"Borrowed\";\n    const showActionUnits = unitsToDisplay > 0;\n\n    const onCollateralSwitch = useCallback(\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        onCollateralableChange(address, event.target.checked);\n      },\n      [address, onCollateralableChange]\n    );\n\n    const onAssetInteractionRequested = useCallback(\n      (event: React.MouseEvent<HTMLAnchorElement>) => {\n        if (cTokenStore?.hasBeenInitialized) {\n          onAssetSelected(address);\n        } else {\n          console.log(`Asset interation: cTokenStore not yet initialised`);\n        }\n      },\n      [address, cTokenStore?.hasBeenInitialized, onAssetSelected]\n    );\n\n    const collateralLiquidityOrLoading = useMemo(() => {\n      const collateralOrLiquidity =\n        marketType === \"supply\" ? (\n          // <input type=\"checkbox\" />\n          //  TODO : Add a proper toggle component\n          <Switch\n            checked={isCollaterable}\n            onChange={onCollateralSwitch}\n            // Preventing toggle-click from being intercepted by the row's 'onClick'\n            onClick={(e) => e.stopPropagation()}\n          />\n        ) : (\n          <div>\n            $\n            {parseFloat(\n              liquidityUSDInScale.units.toLocaleString()\n            ).toLocaleString()}\n            {liquidityUSDInScale.scaleUnit}\n          </div>\n        );\n\n      return cTokenStore?.hasBeenInitialized ? (\n        collateralOrLiquidity\n      ) : (\n        <Skeleton animation=\"wave\" />\n      );\n    }, [\n      cTokenStore?.hasBeenInitialized,\n      isCollaterable,\n      liquidityUSDInScale.scaleUnit,\n      liquidityUSDInScale.units,\n      marketType,\n      onCollateralSwitch,\n    ]);\n\n    return (\n      <a\n        className={clsx([classes.a, classes.asset])}\n        onClick={onAssetInteractionRequested}\n      >\n        {/* Asset (+APY subtitle) */}\n        <Grid container item xs={4} sm={4} className={classes.identity}>\n          <TokenIcon\n            symbol={symbol}\n            extraClasses={[classes.identity_icon, classes.list_icon]}\n          />\n          <div className={clsx([classes.balance, classes.identity_balance])}>\n            <div>{name}</div>\n            <span\n              className={clsx([\n                commonClasses.mobileOnly,\n                classes.balanceSubtitle,\n              ])}\n            >\n              {ApyToDisplay}%\n            </span>\n          </div>\n        </Grid>\n\n        {/* APY (mobile hidden) */}\n        <Grid\n          item\n          xs={1}\n          sm={3}\n          className={clsx([commonClasses.mobileHide, commonClasses.textCenter])}\n        >\n          <div className={clsx([classes.balance])}>\n            {cTokenStore?.hasBeenInitialized ? (\n              <div>{(+ApyToDisplay.toFixed(2)).toLocaleString()}%</div>\n            ) : (\n              <Skeleton animation={\"wave\"} />\n            )}\n          </div>\n        </Grid>\n\n        {/* Wallet */}\n        <Grid item xs={4} sm={3} className={clsx([commonClasses.textCenter])}>\n          <div className={clsx([classes.balance])}>\n            <div>\n              {walletBalanceInUnits.toLocaleString()} {symbol}\n            </div>\n            {showActionUnits && (\n              <span\n                className={clsx([\n                  // commonClasses.mobileOnly,\n                  classes.balanceSubtitle,\n                ])}\n              >\n                {(+unitsToDisplay.toFixed(3)).toLocaleString()} {unitsText}\n              </span>\n            )}\n          </div>\n        </Grid>\n\n        {/* Collateral / Liquidity */}\n        <Grid item xs={4} sm={2} className={clsx([commonClasses.textRight])}>\n          <div className={clsx([classes.balance])}>\n            {collateralLiquidityOrLoading}\n          </div>\n        </Grid>\n      </a>\n    );\n  }\n);\n\ntype TNumericalScaleUnit = \"M\" | \"K\";\ntype TSumInScale = {\n  scaleUnit: TNumericalScaleUnit;\n  units: number;\n};\n\nfunction amountToSumInScale(amount: number): TSumInScale {\n  let scaleUnit: TNumericalScaleUnit = \"M\";\n  let scaleDivider = 1_000_000;\n\n  // TODO : Play with this threshold\n  if (amount < 500_000) {\n    scaleUnit = \"K\";\n    scaleDivider = 1_000;\n  }\n\n  const sumInScale: TSumInScale = {\n    scaleUnit,\n    units: amount / scaleDivider,\n  };\n\n  return sumInScale;\n}\n","import React, { FunctionComponent, SFC } from \"react\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\nimport { TAssetInMarketGist, TMarketType } from \"./types\";\nimport { useCommonClasses } from \"../../../../theme/commonClasses\";\nimport { Panel } from \"../../../../components/panel/Panel\";\nimport { AssetPanelRow } from \"./AssetPanelRow\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TCTokenMetadata } from \"../../../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { TEXT_ON_LIGHT } from \"../../../../theme/themeConstants\";\n\ninterface IProps {\n  header: string;\n  marketType: TMarketType;\n  assetsInMarket: TAssetInMarketParameters[];\n  // Symbol -> balanceInUnits\n  userBalancesInUnits: Record<string, number>;\n  marketsUserIsIn: string[];\n\n  /**\n   *  Asset 'collateral' flag toggle is clicked (user want to add/remove asset from being used as collateral)\n   */\n  onCollateralableChange: (\n    baseAssetAddress: string,\n    newCollaterableValue: boolean\n  ) => void;\n\n  /**\n   *  Asset row is clicked (user want to interact with this asset's market)\n   */\n  onAssetSelected: (baseAssetAddress: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  panelHeader: {\n    display: \"flex\",\n    flexFlow: \"inherit\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    fontSize: \"1.1rem\",\n    padding: \"1rem 1.75rem\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    color: TEXT_ON_LIGHT,\n  },\n  zeroMargin: {\n    margin: 0,\n  },\n  assetsList: {},\n  panelLabels: {\n    // display: \"flex\",\n    padding: \"1rem 1.75rem\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    alignItems: \"center\",\n  },\n  assets: {},\n}));\n\n// export const MarketsPanel = React.memo<IProps>((props) => {\nexport const MarketsPanel: FunctionComponent<IProps> = (props) => {\n  const classes = useStyles();\n  const commonClasses = useCommonClasses();\n  const {\n    header,\n    marketType,\n    assetsInMarket,\n    userBalancesInUnits,\n    marketsUserIsIn,\n    onCollateralableChange,\n    onAssetSelected,\n  } = props;\n\n  console.log(`Building markets panel ${header}`);\n\n  return (\n    <Panel>\n      <div className={classes.panelHeader}>\n        <h4 className={classes.zeroMargin}>{header}</h4>\n      </div>\n      <div className={classes.assetsList}>\n        <Grid container direction={\"row\"} className={classes.panelLabels}>\n          {/* Asset */}\n          <Grid item xs={4} sm={4}>\n            <label className={commonClasses.label}>Asset</label>\n          </Grid>\n\n          {/* APY */}\n          <Grid\n            className={clsx([\n              commonClasses.textCenter,\n              commonClasses.mobileHide,\n            ])}\n            item\n            xs={false}\n            sm={3}\n          >\n            <label className={clsx([commonClasses.label])}>APY</label>\n          </Grid>\n\n          {/* WALLET */}\n          <Grid className={commonClasses.textCenter} item xs={4} sm={3}>\n            <label\n              className={clsx([commonClasses.label, commonClasses.textRight])}\n            >\n              Wallet\n            </label>\n          </Grid>\n\n          {/* Collateral/Liquidity */}\n          <Grid className={commonClasses.textRight} item xs={4} sm={2}>\n            <label\n              className={clsx([commonClasses.label, commonClasses.textRight])}\n            >\n              {marketType === \"supply\" ? \"Collateral\" : \"Liquidity\"}\n            </label>\n          </Grid>\n        </Grid>\n\n        <div className={classes.assets}>\n          {assetsInMarket.map((asset) => (\n            <AssetPanelRow\n              marketType={marketType}\n              assetSummary={asset}\n              unitsInWallet={userBalancesInUnits[asset.symbol] || 0}\n              key={asset.symbol}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onAssetSelected}\n            />\n          ))}\n        </div>\n      </div>\n    </Panel>\n  );\n};\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { observer } from \"mobx-react\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { SingleLNStore } from \"../../../../store/multiInstanceStores/SingleLNStore\";\nimport { MarketsPanel } from \"./MarketsPanel\";\nimport { ContentContainer } from \"../../../../components/structure/ContentContainer\";\nimport {\n  useAccountStore,\n  useActiveLendingNetworkStore,\n  useModalsStore,\n} from \"../../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TCTokenMetadata } from \"../../../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\n\nconst useStyles = makeStyles((theme) => ({\n  interfaceContainer: {\n    \"--alertHeight\": \"0px\",\n    // TODO : Understand this calculation\n    minHeight: \"calc(100vh - 82px - 23rem + 34px - var(--alertHeight))\",\n  },\n  row: {\n    display: \"flex\",\n    flexFlow: \"row wrap\",\n    marginRight: \"-0.665rem\",\n    marginLeft: \"-0.665rem\",\n  },\n  marketsColumn: {\n    flexBasis: \"100%\",\n    padding: \"0 0.665rem\",\n    // DEV_NOTE : Original : @media (min-width: 40em)\n    [theme.breakpoints.up(\"sm\")]: {\n      flexBasis: \"50%\",\n      maxWidth: \"50%\",\n    },\n\n    // Same as 'Panel'\n    marginBottom: \"1.33rem\",\n  },\n}));\n\ninterface IProps {}\nexport const MarketsSection: React.FC<IProps> = observer((props) => {\n  const classes = useStyles();\n  const [error, setError] = React.useState<string | null>(null);\n\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lnStore = useActiveLendingNetworkStore();\n\n  const onCollateralableChange = useCallback(\n    async (baseAssetAddress: string, newCollaterableValue: boolean) => {\n      modalsStore.showCollateralModal(baseAssetAddress);\n      // if (!lnStore) {\n      //   return;\n      // }\n      //\n      // // TODO : Make this tx handling better\n      // if (newCollaterableValue) {\n      //   console.log(`Entered market request - ${baseAssetAddress}`);\n      //   await lnStore.enterMarket(baseAssetAddress);\n      //   console.log(\"Entered market\");\n      // } else {\n      //   await lnStore.exitMarket(baseAssetAddress);\n      //   console.log(\"Left market\");\n      // }\n    },\n    [modalsStore]\n  );\n\n  const getPayloadForMarketInteractionModal = useCallback(\n    (baseAssetAddress: string) => {\n      if (!lnStore) {\n        return {\n          cTokenMeta: undefined,\n          assetParameters: undefined,\n        };\n      }\n      const cTokenStore = lnStore.baseAssetsToCTokenStore.get(baseAssetAddress);\n      const assetParameters = lnStore.assetsParams.find(\n        (assetParam) => assetParam.address === baseAssetAddress\n      );\n\n      if (!assetParameters) {\n        console.error(`No asset parameters found for ${baseAssetAddress}`);\n      } else if (!cTokenStore) {\n        console.error(`No cToken meta found for ${baseAssetAddress}`);\n      }\n\n      const payload: {\n        assetParameters: TAssetInMarketParameters | undefined;\n        cTokenMeta: TCTokenMetadata | undefined;\n      } = {\n        assetParameters,\n        cTokenMeta: undefined,\n      };\n\n      return payload;\n    },\n    [lnStore]\n  );\n\n  const onSupplyAssetSelected = useCallback(\n    (baseAssetAddress: string) => {\n      modalsStore.showSupplyModal(baseAssetAddress);\n    },\n    [modalsStore]\n  );\n\n  const onBorrowAssetSelected = useCallback(\n    (baseAssetAddress: string) => {\n      modalsStore.showBorrowModal(baseAssetAddress);\n    },\n    [modalsStore]\n  );\n\n  // React.useEffect(() => {\n  //   if (lendingNetworkStore && lendingNetworkStore.tokens === null) {\n  //     let cancel = false;\n  //     const fetch = async () => {\n  //       if (!cancel) {\n  //         try {\n  //           await lendingNetworkStore.loadCTokenMetadata();\n  //         } catch (e) {\n  //           setError(\n  //             `Unable to fetch the tokens data of network \"${lendingNetworkStore.id}\"`\n  //           );\n  //         }\n  //       }\n  //     };\n  //\n  //     fetch();\n  //     return () => {\n  //       cancel = true;\n  //     };\n  //   }\n  // }, [lendingNetworkStore]);\n\n  // if (lendingNetworkStore.assetsGists === null) {\n  //   return <div style={{ color: \"white\" }}>Loading tokens meta data...</div>;\n  // }\n\n  if (error) {\n    return <Typography style={{ color: \"white\" }}>Error: {error}</Typography>;\n  }\n\n  if (!lnStore) {\n    return <Typography style={{ color: \"white\" }}>Initializing...</Typography>;\n  }\n\n  return (\n    <ContentContainer>\n      <section>\n        <div className={clsx([classes.interfaceContainer, classes.row])}>\n          {/* Supply(/Withdraw) */}\n          <div className={classes.marketsColumn}>\n            <MarketsPanel\n              header={\"Supply Markets\"}\n              marketType={\"supply\"}\n              assetsInMarket={lnStore.assetsParams}\n              userBalancesInUnits={accountStore.symbolsToUnits}\n              marketsUserIsIn={lnStore.marketsUserIsIn}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onSupplyAssetSelected}\n            />\n          </div>\n          {/* Borrow(/Repay) */}\n          <div className={classes.marketsColumn}>\n            <MarketsPanel\n              header={\"Borrow Markets\"}\n              marketType={\"borrow\"}\n              assetsInMarket={lnStore.assetsParams}\n              userBalancesInUnits={accountStore.symbolsToUnits}\n              marketsUserIsIn={lnStore.marketsUserIsIn}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onBorrowAssetSelected}\n            />\n          </div>\n        </div>\n      </section>\n    </ContentContainer>\n  );\n});\n","import React from \"react\";\n// @ts-ignore\nimport AnimatedNumber from \"animated-number-react\";\n\ninterface IProps {\n  value: number;\n}\n\nfunction standardSumFormat(n: number) {\n  return (+n.toFixed(2)).toLocaleString();\n}\n\nexport const AnimatedNumberText = React.memo<IProps>((props) => {\n  const { value } = props;\n\n  return <AnimatedNumber value={value} formatValue={standardSumFormat} />;\n});\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\nimport { AnimatedNumberText } from \"../../../../components/AnimatedNumberText/AnimatedNumberText\";\n\ninterface IProps {\n  titleText: string;\n  sum: number;\n  isSupply: boolean;\n  alignLeft: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  headline: {\n    fontSize: \"1.6rem\",\n    fontWeight: 300,\n    color: \"#ffffff\",\n    marginTop: \"0.7rem\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  textLeft: {\n    textAlign: \"left\",\n  },\n  label: {\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n  supply: {\n    color: AFFIRMATIVE_GREEN_COLOR,\n  },\n  borrow: {\n    // color: \"#9669ED\",\n    // color: \"#ff8906\",\n    color: \"#f25f4c\",\n  },\n}));\n\nexport const BalanceHeadline = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { titleText, sum, isSupply, alignLeft } = props;\n\n  return (\n    <div className={alignLeft ? classes.textLeft : classes.textCenter}>\n      <label\n        className={clsx([\n          classes.label,\n          isSupply ? classes.supply : classes.borrow,\n        ])}\n      >\n        {titleText}\n      </label>\n      {/* TODO : Add the digits CSS */}\n      <div className={classes.headline}>\n        $\n        <AnimatedNumberText value={sum} />\n        {/*{sum.toLocaleString()}*/}\n      </div>\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { useRef } from \"react\";\nimport useHover from \"@react-hook/hover\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\nimport Color from \"color\";\n\ninterface IProps {\n  netApy: number;\n  totalYearlyChangeUsd: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  netApyWrapper: {\n    // TODO : decrease by 20 when in small screen\n    height: \"140px\",\n    width: \"140px\",\n    position: \"relative\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    [theme.breakpoints.down(\"xs\")]: {\n      height: \"120px\",\n      width: \"120px\",\n    },\n  },\n  netApy: {},\n  netApyDescription: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    margin: \"0.1875rem\",\n    // backgroundColor: \"#070A0E\",\n    backgroundColor: theme.palette.background.default,\n    borderRadius: \"50%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: \"0.25rem\",\n\n    \"&:hover\": {\n      // backgroundColor: \"rgba(20, 30, 39, 0.98)\",\n      backgroundColor: Color.rgb(theme.palette.background.default)\n        .lighten(0.2)\n        .hex(),\n    },\n  },\n  netApyDescription_Active: {\n    backgroundColor: \"rgba(20, 30, 39, 0.98)\",\n  },\n  label: {\n    textAlign: \"center\",\n    color: \"#657786\",\n\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    // color: \"#AAB8C1\",\n  },\n  label_active: {\n    color: \"white\",\n  },\n  headline: {\n    fontWeight: 300,\n    color: \"#ffffff\",\n    marginTop: \"0.7rem\",\n  },\n  headline_inactive: {\n    fontSize: \"1.6rem\",\n  },\n  headline_active: {\n    color: \"#F9FAFB\",\n    fontSize: \"12px\",\n    textAlign: \"center\",\n  },\n}));\n\nexport const NetApy: React.FC<IProps> = (props) => {\n  const classes = useStyles();\n  const { netApy, totalYearlyChangeUsd } = props;\n\n  // TODO : Add 'click detect' to keep same behavior on mobile\n  const hoverTargetRef = useRef<HTMLDivElement>(null);\n  const isHovering = useHover(hoverTargetRef);\n\n  const isEarning = netApy > 0;\n  const apyOrApr = isEarning ? \"APY\" : \"APR\";\n  const apyDirectionMessage = `Net ${apyOrApr}`;\n  const earnedOrPaid = isEarning ? \"earned interest\" : \"paid interest\";\n\n  const netApyStringified = (+netApy.toFixed(2)).toLocaleString();\n  const totalYearlyChangeUsdStringified = (+totalYearlyChangeUsd.toFixed(\n    2\n  )).toLocaleString();\n\n  const labelText = isHovering\n    ? `${totalYearlyChangeUsdStringified} $`\n    : apyDirectionMessage;\n  const headlineText = isHovering\n    ? // ? \"Interest earned and paid, plus TOKEN\"\n      `Anticipated yearly ${earnedOrPaid}`\n    : `${netApyStringified}%`;\n\n  return (\n    <div className={classes.netApyWrapper} ref={hoverTargetRef}>\n      <div className={classes.netApy}>\n        <svg viewBox=\"0 0 140 140\" width=\"100%\">\n          <path\n            d=\"M 70 70 L  70 0 A 70 70 0 0 1 70 0 Z\"\n            stroke=\"transparent\"\n            fill=\"#9669ED\"\n          />\n          <path\n            d=\"M 70 70 L  70 0 A 70 70 0 1 1 69.99956017702848 1.381744718642608e-9 Z\"\n            stroke=\"transparent\"\n            fill={AFFIRMATIVE_GREEN_COLOR}\n          />\n        </svg>\n      </div>\n      <div\n        className={clsx([\n          classes.netApyDescription,\n          isHovering ? classes.netApyDescription_Active : false,\n        ])}\n      >\n        <label\n          className={clsx([\n            classes.label,\n            isHovering ? classes.label_active : false,\n          ])}\n        >\n          {labelText}\n        </label>\n        <div\n          className={clsx([\n            classes.headline,\n            isHovering ? classes.headline_active : classes.headline,\n          ])}\n        >\n          {headlineText}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Grid, Hidden, makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { BalanceHeadline } from \"./BalanceHeadline\";\nimport { NetApy } from \"./NetApy\";\n\ninterface IProps {\n  supplyBalanceUsd: number;\n  borrowBalanceUsd: number;\n  netApy: number;\n  totalYearlyChangeUsd: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  content: {},\n  row: {\n    marginRight: \"-0.665rem\",\n    marginLeft: \"-0.665rem\",\n  },\n  alignMiddle: {\n    alignItems: \"center\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  column: {\n    padding: \"0 0.665rem\",\n  },\n}));\n\nexport const BalancesAndApy = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    borrowBalanceUsd,\n    supplyBalanceUsd,\n    netApy,\n    totalYearlyChangeUsd,\n  } = props;\n\n  return (\n    <div className={classes.content}>\n      {/* Large */}\n      <Hidden xsDown>\n        <Grid\n          container\n          direction={\"row\"}\n          className={clsx([classes.row, classes.alignMiddle])}\n        >\n          <Grid\n            className={classes.column}\n            item\n            container\n            direction={\"column\"}\n            xs={5}\n          >\n            <BalanceHeadline\n              sum={supplyBalanceUsd}\n              titleText={\"Supply balance\"}\n              isSupply={true}\n              alignLeft={false}\n            />\n          </Grid>\n\n          <Grid\n            className={classes.column}\n            container\n            item\n            direction={\"column\"}\n            xs={2}\n          >\n            <NetApy\n              netApy={netApy}\n              totalYearlyChangeUsd={totalYearlyChangeUsd}\n            />\n          </Grid>\n\n          <Grid\n            className={classes.column}\n            container\n            item\n            direction={\"column\"}\n            xs={5}\n          >\n            <BalanceHeadline\n              sum={borrowBalanceUsd}\n              titleText={\"Borrow balance\"}\n              isSupply={false}\n              alignLeft={false}\n            />\n          </Grid>\n        </Grid>\n      </Hidden>\n\n      {/* Mobile */}\n      <Hidden smUp>\n        <Grid\n          container\n          direction={\"row\"}\n          className={clsx([classes.row, classes.alignMiddle])}\n        >\n          <Grid className={classes.column} item xs={4}>\n            <NetApy\n              netApy={netApy}\n              totalYearlyChangeUsd={totalYearlyChangeUsd}\n            />\n          </Grid>\n\n          <Grid className={classes.column} item xs={8}>\n            <BalanceHeadline\n              sum={0}\n              titleText={\"Supply balance\"}\n              isSupply={true}\n              alignLeft={true}\n            />\n            <BalanceHeadline\n              sum={0}\n              titleText={\"Borrow balance\"}\n              isSupply={false}\n              alignLeft={true}\n            />\n          </Grid>\n        </Grid>\n      </Hidden>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\nimport { AnimatedNumberText } from \"../../../../components/AnimatedNumberText/AnimatedNumberText\";\n\ninterface IProps {\n  usedBorrowPercentage: number;\n  collateralPotentialInUSD: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  limitBar: {\n    display: \"flex\",\n    marginTop: \"3.25rem\",\n  },\n  label: {\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n  limitBarLabel: {\n    color: \"#657786\",\n    // marginTop: \"0.7rem\",\n    // marginRight: \"0.625rem\",\n    marginTop: \"0.7rem\",\n    marginRight: \"0.625rem\",\n    \"&:last-of-type\": {\n      marginRight: 0,\n      marginLeft: \"0.625rem\",\n    },\n  },\n  progressBarWrapper: {\n    position: \"relative\",\n    flex: \"1 1\",\n  },\n  progress_bar_green: {\n    display: \"flex\",\n    backgroundColor: AFFIRMATIVE_GREEN_COLOR,\n  },\n  progress: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: \"1 1\",\n    height: \"5px\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    backgroundColor: \"rgba(40, 49, 55, 0.1)\",\n    borderRadius: \"100px\",\n    marginTop: \"1rem\",\n  },\n  dark_clear: {\n    background: \"rgba(54, 61, 68, 0.5)\",\n  },\n  thin: {\n    height: \"3px\",\n  },\n  progress_bar_percent_label: {\n    display: \"inline-block\",\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    width: \"100%\",\n  },\n  p: {\n    position: \"relative\",\n    float: \"right\",\n    marginRight: \"-0.7rem\",\n    color: \"#ffffff\",\n    padding: \"0.3rem 0.3rem 0.25rem 0.25rem\",\n    backgroundColor: \"#070A0E\",\n  },\n  small: {\n    fontSize: \"12px\",\n  },\n  progress_bar_hover_space: {\n    display: \"inline-block\",\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    width: \"100%\",\n    height: \"10px\",\n    marginTop: \"1rem\",\n  },\n}));\n\nexport const BorrowLimitBar = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { usedBorrowPercentage, collateralPotentialInUSD } = props;\n\n  // TODO : Add tooltip\n\n  return (\n    <div className={classes.limitBar}>\n      <label className={clsx([classes.label, classes.limitBarLabel])}>\n        Borrow Limit (<AnimatedNumberText value={usedBorrowPercentage} />\n        %)\n      </label>\n      <div className={classes.progressBarWrapper}>\n        {/*<div className=\"progress dark-clear thin\">*/}\n        <div\n          className={clsx([classes.progress, classes.dark_clear, classes.thin])}\n        >\n          <div\n            role=\"progressbar\"\n            aria-valuemin={0}\n            aria-valuemax={100}\n            className={classes.progress_bar_green}\n            style={{ width: `${usedBorrowPercentage}%` }}\n          />\n        </div>\n\n        <div className={classes.progress_bar_percent_label}>\n          <div\n            style={{\n              minWidth: \"1%\",\n              maxWidth: \"99%\",\n              width: `${usedBorrowPercentage}%`,\n            }}\n          >\n            {/*<p className={clsx([classes.p, classes.small])}>*/}\n            {/*  {usedBorrowPercentage.toFixed(2)}%*/}\n            {/*</p>*/}\n          </div>\n        </div>\n\n        <div className={classes.progress_bar_hover_space}></div>\n      </div>\n      <label className={clsx([classes.label, classes.limitBarLabel])}>\n        $\n        <AnimatedNumberText value={collateralPotentialInUSD} />\n        {/*{\" \"}*/}\n        {/*$ {collateralPotentialInUSD.toFixed(2)}*/}\n      </label>\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { BalancesAndApy } from \"./BalancesAndApy\";\nimport { BorrowLimitBar } from \"./BorrowLimitBar\";\n\ninterface IProps {\n  supplyBalanceUsd: number;\n  borrowBalanceUsd: number;\n  netApy: number;\n  totalYearlyChangeUsd: number;\n\n  // Borrow limit\n  usedBorrowPercentage: number;\n  collateralPotentialInUSD: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  balancesTotal: {\n    position: \"relative\",\n    maxWidth: \"60em\",\n    margin: \"0 auto\",\n    [theme.breakpoints.down(\"xs\")]: {\n      margin: \"0 1.33rem\",\n    },\n  },\n}));\n\nexport const BalancesTotal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n\n  const {\n    supplyBalanceUsd,\n    netApy,\n    totalYearlyChangeUsd,\n    borrowBalanceUsd,\n    usedBorrowPercentage,\n    collateralPotentialInUSD,\n  } = props;\n\n  return (\n    <div className={classes.balancesTotal}>\n      <BalancesAndApy\n        netApy={netApy}\n        totalYearlyChangeUsd={totalYearlyChangeUsd}\n        supplyBalanceUsd={supplyBalanceUsd}\n        borrowBalanceUsd={borrowBalanceUsd}\n      />\n      <BorrowLimitBar\n        usedBorrowPercentage={usedBorrowPercentage}\n        collateralPotentialInUSD={collateralPotentialInUSD}\n      />\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { BalancesTotal } from \"./BalancesTotal\";\nimport { useActiveLendingNetworkStore } from \"../../../../store/storeHooks\";\nimport { observer } from \"mobx-react\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  hero: {\n    // background: \"#070A0E\",\n    backgroundColor: theme.palette.background.default,\n    marginBottom: \"-3.75rem\",\n    padding: \"1.2635rem 0 7.315rem\",\n  },\n}));\n\nexport const BorrowOverview = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const classes = useStyles();\n\n    const lnStore = useActiveLendingNetworkStore();\n\n    const supplyBalanceUsd = lnStore?.totalAccountSupplyBalanceUsd || 0;\n    const borrowBalanceUsd = lnStore?.totalAccountBorrowBalanceUsd || 0;\n    const netApy = lnStore?.netApy || 0;\n    const totalYearlyChangeUsd = lnStore?.totalYearlyChangeUsd || 0;\n    const collateralPotentialInUSD = lnStore?.collateralPotentialInUSD || 0;\n    const usedBorrowPercentage = lnStore?.usedBorrowPercentage || 0;\n\n    return (\n      <section className={clsx(classes.hero)}>\n        <BalancesTotal\n          supplyBalanceUsd={supplyBalanceUsd}\n          borrowBalanceUsd={borrowBalanceUsd}\n          netApy={netApy}\n          totalYearlyChangeUsd={totalYearlyChangeUsd}\n          usedBorrowPercentage={usedBorrowPercentage}\n          collateralPotentialInUSD={collateralPotentialInUSD}\n        />\n      </section>\n    );\n  }\n);\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { SingleLNStore } from \"../../../store/multiInstanceStores/SingleLNStore\";\nimport { MarketsSection } from \"./markets/MarketsSection\";\nimport { BorrowOverview } from \"./overview/BorrowOverview\";\nimport { useActiveLendingNetworkStore } from \"../../../store/storeHooks\";\n\ninterface IProps {}\n\nexport const MainLendingNetworkTab = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    return (\n      <>\n        <BorrowOverview />\n        <MarketsSection />\n      </>\n    );\n  }\n);\n","import React from \"react\";\nimport { Button, makeStyles } from \"@material-ui/core\";\n\ninterface IProps {\n  text: string;\n  onClick: () => void;\n  disabled?: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({}));\n\nexport const ModalActionButton = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { text, onClick, disabled } = props;\n\n  console.log(\"Building button\");\n\n  return (\n    <Button\n      variant={\"contained\"}\n      fullWidth\n      disabled={disabled}\n      onClick={onClick}\n      color={\"primary\"}\n    >\n      {text}\n    </Button>\n  );\n});\n","import React from \"react\";\nimport {\n  Collapse,\n  Fade,\n  Grow,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { TokenIcon } from \"../../../../icons/TokenIcon\";\nimport { AnimatedNumberText } from \"../../../../AnimatedNumberText/AnimatedNumberText\";\n\nexport type TRatesRow = {\n  label: string;\n  value: number;\n  valuePrefix?: string;\n  valueSuffix?: string;\n  tokenSymbol?: string;\n\n  // Predicted value\n  displayPredictedValues?: boolean;\n  predictedValue?: number;\n};\n\ninterface IProps {\n  title: string;\n  subTitle?: string;\n\n  rateRows: TRatesRow[];\n\n  // Styling\n  bottomBorder?: boolean;\n}\n\nconst GRAYISH_TEXT = \"#AAB8C1\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    // alignItems: \"stretch\",\n  },\n\n  rateRow: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"start\",\n    alignItems: \"center\",\n    padding: \"0.5rem\",\n  },\n\n  bottomBorder: {\n    borderBottom: \"1px solid #CCD6DD\",\n  },\n  heavyBottomBorder: {\n    borderBottom: \"1px solid rgb(20, 30, 39)\",\n  },\n  symbolIcon: {\n    marginRight: \"0.25rem\",\n  },\n  labelText: {\n    // Push to the right\n    color: GRAYISH_TEXT,\n  },\n  valueText: {\n    // Push to the right\n    // marginLeft: \"auto\",\n    color: theme.palette.text.primary,\n  },\n}));\n\nexport const BaseRates = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { title, subTitle, rateRows, bottomBorder } = props;\n\n  const arrowText = \"->\";\n\n  return (\n    <div\n      className={clsx([\n        classes.container,\n        bottomBorder ? classes.heavyBottomBorder : null,\n      ])}\n    >\n      <Typography>{title}</Typography>\n      {subTitle && <Typography variant={\"caption\"}>{subTitle}</Typography>}\n      {rateRows.map((rateRow, index) => {\n        const isLast = index === rateRows.length;\n        const predictedValue = rateRow?.predictedValue || 0;\n\n        return (\n          <div\n            className={clsx([\n              classes.rateRow,\n              isLast ? null : classes.bottomBorder,\n            ])}\n            key={`${rateRow.tokenSymbol}_${rateRow.label}`}\n          >\n            {rateRow.tokenSymbol && (\n              <TokenIcon\n                symbol={rateRow.tokenSymbol}\n                extraClasses={[classes.symbolIcon]}\n              />\n            )}\n            {/* Label */}\n            <Typography className={classes.labelText}>\n              {rateRow.label}\n            </Typography>\n            <div></div>\n            <Typography\n              className={classes.valueText}\n              style={{ marginLeft: \"auto\" }}\n            >\n              {(+rateRow.value.toFixed(2)).toLocaleString()}\n              {\"  \"}\n              {!rateRow.displayPredictedValues && rateRow.valueSuffix}\n            </Typography>\n\n            {rateRow.displayPredictedValues && (\n              <>\n                <Typography className={classes.valueText}>\n                  {\"   \"}\n                  {arrowText}\n                  {/*{rateRow.valuePrefix}*/}\n                  {(+predictedValue.toFixed(2)).toLocaleString()}\n                  {\"  \"}\n                  {rateRow.valueSuffix}\n                </Typography>\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import React, { useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { BaseRates, TRatesRow } from \"./BaseRates\";\n\ninterface IProps {\n  actionName: string;\n  assetSymbol: string;\n  assetSupplyApy: number;\n  distributionAssetSymbol: string;\n  distributionAssetApy: number;\n}\n\nexport const ActionRates = React.memo<IProps>((props) => {\n  const {\n    actionName,\n    assetSymbol,\n    assetSupplyApy,\n    distributionAssetSymbol,\n    distributionAssetApy,\n  } = props;\n\n  const rateRows = useMemo<TRatesRow[]>(() => {\n    const firstRow: TRatesRow = {\n      label: `${actionName} APY`,\n      tokenSymbol: assetSymbol,\n      value: assetSupplyApy,\n      valueSuffix: \"%\",\n    };\n    const secondRow: TRatesRow = {\n      label: \"Distribution APY\",\n      tokenSymbol: distributionAssetSymbol,\n      value: distributionAssetApy,\n      valueSuffix: \"%\",\n    };\n\n    return [firstRow, secondRow];\n  }, [\n    actionName,\n    assetSupplyApy,\n    assetSymbol,\n    distributionAssetApy,\n    distributionAssetSymbol,\n  ]);\n\n  return <BaseRates title={`${actionName} Rates`} rateRows={rateRows} />;\n});\n","import React, { useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { BaseRates, TRatesRow } from \"./BaseRates\";\n\ninterface IProps {\n  limitOrBalance: \"Limit\" | \"Balance\";\n  borrowLimitUsd: number;\n  borrowLimitUsedPercentage: number;\n  predictedBorrowLimitUsd: number;\n  predictedBorrowLimitPercentage: number;\n  displayPredictedValues?: boolean;\n  note?: string;\n}\n\nexport const BorrowLimitRates = React.memo<IProps>((props) => {\n  const {\n    limitOrBalance,\n    borrowLimitUsd,\n    borrowLimitUsedPercentage,\n    predictedBorrowLimitUsd,\n    predictedBorrowLimitPercentage,\n    displayPredictedValues,\n    note,\n  } = props;\n\n  const rateRows = useMemo<TRatesRow[]>(() => {\n    const firstRow: TRatesRow = {\n      label: `Borrow ${limitOrBalance}`,\n      value: borrowLimitUsd,\n      valueSuffix: \"$\",\n      displayPredictedValues: displayPredictedValues,\n      predictedValue: predictedBorrowLimitUsd,\n    };\n    const secondRow: TRatesRow = {\n      label: \"Borrow Limit Used\",\n      value: borrowLimitUsedPercentage,\n      valueSuffix: \"%\",\n      displayPredictedValues: displayPredictedValues,\n      predictedValue: predictedBorrowLimitPercentage,\n    };\n\n    return [firstRow, secondRow];\n  }, [\n    borrowLimitUsd,\n    borrowLimitUsedPercentage,\n    displayPredictedValues,\n    limitOrBalance,\n    predictedBorrowLimitPercentage,\n    predictedBorrowLimitUsd,\n  ]);\n\n  const title = \"Borrow Limit\";\n  const subTitle = note;\n\n  return (\n    <BaseRates\n      title={title}\n      subTitle={subTitle}\n      rateRows={rateRows}\n      bottomBorder\n    />\n  );\n});\n","import React from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport {\n  BRAND_MAIN_COLOR,\n  GRAYISH_TEXT,\n  TEXT_ON_LIGHT,\n} from \"../../../theme/themeConstants\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\n\nexport type TTxWaitingStage = \"USER_APPROVAL\" | \"CONFIRMATION\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n\n  txWaitingStage: TTxWaitingStage;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  txWaitingPanel: {\n    position: \"relative\",\n    width: \"30rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    // color: \"#141E27\",\n    color: TEXT_ON_LIGHT,\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  messageContainer: {\n    // paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    textAlign: \"center\",\n\n    color: GRAYISH_TEXT,\n  },\n}));\n\nexport const TxWaitingModal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { open, closeModal, txWaitingStage } = props;\n  const theme = useTheme();\n\n  const isWaitingForUserApproval = txWaitingStage === \"USER_APPROVAL\";\n  const isWaitingForTxConfirmation = txWaitingStage === \"CONFIRMATION\";\n  const title = isWaitingForUserApproval\n    ? \"Please confirm the transaction\"\n    : // : \"Waiting for the transaction to be mined\";\n      \"Waiting for transaction confirmation\";\n\n  const message = isWaitingForUserApproval\n    ? \"Please approve the tx in your wallet.\"\n    : \"This might take a few moments\";\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.txWaitingPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h6\"} className={classes.title}>\n              {title}\n            </Typography>\n          </div>\n\n          <div className={classes.messageContainer}>\n            <Loader\n              type={isWaitingForUserApproval ? \"ThreeDots\" : \"Rings\"}\n              color={theme.palette.primary.main}\n            />\n            <Typography>{message}</Typography>\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","import React, { ReactNode, useMemo } from \"react\";\nimport {\n  Button,\n  Collapse,\n  Fade,\n  Grid,\n  Grow,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n  Zoom,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport clsx from \"clsx\";\nimport { TokenIcon } from \"../../../icons/TokenIcon\";\nimport { IReactComponent } from \"mobx-react/src/types/IReactComponent\";\nimport { ModalFooter, TModalFooterMessagePayload } from \"./ModalFooter\";\nimport { ModalActionButton } from \"./ModalActionButton\";\nimport { ActionRates } from \"./rates/ActionRates\";\nimport {\n  BACKGROUND_LIGHT_COLOR,\n  BRAND_MAIN_COLOR,\n  TEXT_ON_LIGHT,\n} from \"../../../../theme/themeConstants\";\nimport { BorrowLimitRates } from \"./rates/BorrowLimitRates\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../../txWaitingModal/TxWaitingModal\";\nimport Color from \"color\";\n\nexport type TZeroOrOne = 0 | 1;\n\nexport interface IMarketModalCommonStatePayload {\n  // Tabs\n  currentTabIndex: TZeroOrOne;\n  onTabIndexChange: (newIndex: TZeroOrOne) => void;\n  tab0Title: string;\n  tab1Title: string;\n\n  // Assets\n  actionAssetSymbol: string;\n  actionAssetName: string;\n  distributionAssetSymbol: string;\n\n  // Borrow Limit (optional)\n  currentBorrowLimit?: number;\n  usedBorrowLimitPercentage?: number;\n\n  // TX waiting\n  waitingForUserApproval?: boolean;\n  waitingForTxConfirmation?: boolean;\n}\n\nexport interface IMarketModalPerTabStatePayload {\n  // Message or input component\n  messageOrInput: ReactNode;\n  showInputActionButton: boolean;\n  inputActionButtonActive: boolean;\n  inputActionButtonText: string;\n  onInputActionButtonPressed?: () => void;\n\n  // Action Rates\n  actionName: \"Borrow\" | \"Supply\";\n  actionApy: number;\n  distributionApy: number;\n\n  // Borrow Limit (optional)\n  showBorrowLimit?: boolean;\n  showPredictedBorrowLimits?: boolean;\n  borrowLimitAfterChange?: number;\n  usedBorrowLimitPercentageAfterChange?: number;\n  borrowLimitNote?: string;\n\n  // Action button\n  actionButtonActive: boolean;\n  actionButtonText: string;\n  actionButtonDisabledText?: string;\n  actionButtonOnClick: () => void;\n\n  // Footer\n  footerMessagesPayloads: TModalFooterMessagePayload[];\n  // footerTitle: string | string[];\n  // footerTokenAmount: number;\n}\n\n// DEV_NOTE : To make it easier to build in parent components\nexport interface IMarketModalStatePayload\n  extends IMarketModalCommonStatePayload,\n    IMarketModalPerTabStatePayload {}\n\ninterface IProps extends IMarketModalStatePayload {\n  open: boolean;\n  closeModal: () => void;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    color: TEXT_ON_LIGHT,\n  },\n  // paper: {\n  //   backgroundColor: theme.palette.background.paper,\n  //   // border: \"2px solid #000\",\n  //   boxShadow: theme.shadows[5],\n  //   padding: theme.spacing(20, 4, 3),\n  // },\n  marketInteractionPanel: {\n    position: \"relative\",\n    width: \"25.5rem\",\n    maxWidth: \"100%\",\n    backgroundColor: BACKGROUND_LIGHT_COLOR,\n  },\n  panelHeader: {\n    width: \"100%\",\n    // color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {},\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  tabBody: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    // backgroundColor: \"#ffffff\",\n    backgroundColor: new Color(BACKGROUND_LIGHT_COLOR)\n      .mix(Color.rgb([0, 0, 0]), 0.02)\n      .hex(),\n  },\n}));\n\nexport const MarketInteractionModal = React.memo<IProps>((props) => {\n  const {\n    open,\n    closeModal,\n\n    // Input/message\n    messageOrInput,\n    inputActionButtonText,\n    onInputActionButtonPressed,\n    showInputActionButton,\n    inputActionButtonActive,\n\n    // Assets\n    actionAssetSymbol,\n    actionAssetName,\n    distributionAssetSymbol,\n\n    // Tabs\n    currentTabIndex,\n    onTabIndexChange,\n    tab0Title,\n    tab1Title,\n\n    // Action Rates\n    actionName,\n    actionApy,\n    distributionApy,\n\n    // Borrow Limits (Optional)\n    showBorrowLimit,\n    showPredictedBorrowLimits,\n    currentBorrowLimit,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentage,\n    usedBorrowLimitPercentageAfterChange,\n    borrowLimitNote,\n\n    // Action button\n    actionButtonActive,\n    actionButtonText,\n    actionButtonDisabledText,\n    actionButtonOnClick,\n\n    // Footer\n    footerMessagesPayloads,\n\n    // TX Waiting\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n  } = props;\n\n  const classes = useStyles();\n\n  const isSupply = actionName === \"Supply\";\n  const isBorrow = actionName === \"Borrow\";\n\n  const formattedMessages = useMemo(() => {}, []);\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n      />\n    );\n  }\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.marketInteractionPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Quick-n-Dirty Market icon */}\n          <TokenIcon\n            symbol={actionAssetSymbol}\n            extraClasses={[classes.tokenIcon, classes.upperLeftCorner]}\n          />\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h5\"} className={classes.title}>\n              {actionAssetName}\n            </Typography>\n          </div>\n\n          {/* Input or message */}\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {messageOrInput}\n\n            {showInputActionButton && (\n              <Button\n                color={\"primary\"}\n                style={{ marginRight: \"1.5rem\", maxHeight: \"3rem\" }}\n                variant={\"outlined\"}\n                onClick={onInputActionButtonPressed}\n                disabled={!inputActionButtonActive}\n              >\n                <Typography variant={\"body2\"}>\n                  {inputActionButtonText}\n                </Typography>\n              </Button>\n            )}\n          </div>\n\n          {/* Tabs */}\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n            }}\n          >\n            <div\n              style={{\n                flex: 1,\n                textAlign: \"center\",\n                borderBottom:\n                  currentTabIndex === 0\n                    ? `2px solid ${BRAND_MAIN_COLOR}`\n                    : \"none\",\n              }}\n            >\n              <Button fullWidth onClick={() => onTabIndexChange(0)}>\n                <Typography>{tab0Title}</Typography>\n              </Button>\n            </div>\n            <div\n              style={{\n                flex: 1,\n                textAlign: \"center\",\n                borderBottom:\n                  currentTabIndex === 1\n                    ? `2px solid ${BRAND_MAIN_COLOR}`\n                    : \"none\",\n              }}\n            >\n              <Button fullWidth onClick={() => onTabIndexChange(1)}>\n                <Typography>{tab1Title}</Typography>\n              </Button>\n            </div>\n          </div>\n\n          {/* Tab Body */}\n          <div className={classes.tabBody}>\n            {/* Modal action rates */}\n            <ActionRates\n              actionName={actionName}\n              assetSupplyApy={actionApy}\n              assetSymbol={actionAssetSymbol}\n              distributionAssetApy={distributionApy}\n              distributionAssetSymbol={distributionAssetSymbol}\n            />\n            <br />\n\n            {/* Borrow limit rates */}\n            {showBorrowLimit && (\n              <>\n                <br />\n                <BorrowLimitRates\n                  limitOrBalance={isBorrow ? \"Balance\" : \"Limit\"}\n                  borrowLimitUsd={currentBorrowLimit || 0}\n                  borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}\n                  predictedBorrowLimitPercentage={\n                    usedBorrowLimitPercentageAfterChange || 0\n                  }\n                  predictedBorrowLimitUsd={borrowLimitAfterChange || 0}\n                  displayPredictedValues={showPredictedBorrowLimits}\n                  note={borrowLimitNote}\n                />\n                <br />\n              </>\n            )}\n\n            <br />\n            {/* Action button */}\n            <ModalActionButton\n              onClick={actionButtonOnClick}\n              text={\n                actionButtonActive || !actionButtonDisabledText\n                  ? actionButtonText\n                  : actionButtonDisabledText\n              }\n              disabled={!actionButtonActive}\n            />\n\n            <br />\n            <br />\n\n            {/* DEV_NOTE : Footer inside of body to keep same padding easily */}\n            {/*{footerMessagesPayloads.map((footerMessagesPayload) => (*/}\n            {/*  <>*/}\n            {/*    <ModalFooter*/}\n            {/*      key={footerMessagesPayload.title}*/}\n            {/*      title={footerMessagesPayload.title}*/}\n            {/*      tokenAmount={footerMessagesPayload.tokenAmount}*/}\n            {/*      tokenSymbol={footerMessagesPayload.tokenSymbol}*/}\n            {/*    />*/}\n            {/*    <br key={`br_${footerMessagesPayload.title}`} />*/}\n            {/*  </>*/}\n            {/*))}*/}\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","// DEV_NOTE : Taken from typeless library 'eth-json-rpc-errors';\nexport const JSON_RPC_ERROR_CODES = {\n  rpc: {\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603,\n  },\n  provider: {\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n  },\n};\n","import { ContractTransaction } from \"ethers\";\nimport { useCallback, useState } from \"react\";\nimport { JSON_RPC_ERROR_CODES } from \"../../../constants/ethereumErrorCodes\";\n\nexport type TTxCreatingFunction = () =>\n  | Promise<ContractTransaction>\n  | undefined;\n\nexport function useTxWaitingLogic(\n  txCreatingFunction: TTxCreatingFunction,\n  closeModal: () => void\n) {\n  const {\n    waitingForTxConfirmation,\n    waitingForUserApproval,\n    setWaitingForTxConfirmation,\n    setWaitingForUserApproval,\n  } = useTxWaitingStateExplicit();\n\n  const wrappedTxBuildingFunction = useTxWaitingLogicExplicit(\n    txCreatingFunction,\n    closeModal,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation\n  );\n\n  return {\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n    wrappedTxBuildingFunction,\n  };\n}\n\nexport function useTxWaitingStateExplicit() {\n  const [waitingForUserApproval, setWaitingForUserApproval] = useState(false);\n  const [waitingForTxConfirmation, setWaitingForTxConfirmation] = useState(\n    false\n  );\n\n  return {\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation,\n  };\n}\n\n/**\n * Wraps a call to a tx creating function with some UX logic of waiting for user approval and tx confirmation\n */\nexport function useTxWaitingLogicExplicit(\n  txCreatingFunction: TTxCreatingFunction,\n  closeModal: () => void,\n  setWaitingForUserApproval: (val: boolean) => void,\n  setWaitingForTxConfirmation: (val: boolean) => void\n) {\n  const wrappedTxBuildingFunction = useCallback(async () => {\n    let contractTx: ContractTransaction | undefined;\n\n    // We are going to ask the user to approve tx\n    setWaitingForUserApproval(true);\n\n    try {\n      contractTx = await txCreatingFunction();\n\n      // We are after user approval, let's wait for the tx to be mined\n      setWaitingForTxConfirmation(true);\n\n      const receipt = await contractTx?.wait();\n      console.log(receipt);\n    } catch (e) {\n      if (e.code === JSON_RPC_ERROR_CODES.provider.userRejectedRequest) {\n        // User denied tx\n        console.log(\"User denied tx\");\n      } else {\n        // TODO : Have a more user-friendly error communication.\n        // DEV_NOTE :\n        closeModal();\n        throw e;\n      }\n    } finally {\n      // No matter what, we ain't waiting after this line\n      setWaitingForUserApproval(false);\n      setWaitingForTxConfirmation(false);\n    }\n  }, [\n    closeModal,\n    setWaitingForTxConfirmation,\n    setWaitingForUserApproval,\n    txCreatingFunction,\n  ]);\n\n  return wrappedTxBuildingFunction;\n}\n","import {\n  useAccountStore,\n  useLendingNetworksStore,\n  useModalsStore,\n  useSystemStore,\n} from \"../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { SingleCTokenStore } from \"../../../store/multiInstanceStores/SingleCTokenStore\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { TZeroOrOne } from \"./base/MarketInteractionModal\";\nimport { ethers } from \"ethers\";\nimport { useTxWaitingLogicExplicit } from \"../txWaitingModal/txWaitingHooks\";\n\nexport function useMarketInteractionModalBase() {\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const systemStore = useSystemStore();\n  const activeLNStore = lendingNetworksStore.activeLNStore;\n  const assetAddressToParamsMap =\n    activeLNStore?.assetBaseAddressToParams ||\n    new Map<string, TAssetInMarketParameters>();\n  const assetBaseAddress = modalsStore.assetBaseAddress;\n\n  const assetParams = assetAddressToParamsMap.get(assetBaseAddress);\n  const isNativeCoin = assetParams?.symbol === systemStore.nativeCoinSymbol;\n\n  const cTokenStore = activeLNStore?.baseAssetsToCTokenStore.get(\n    assetBaseAddress\n  );\n\n  const cToken = cTokenStore?.cTokenAddress || \"\";\n\n  const supplyTokenSymbol = assetParams?.symbol || \"\";\n  const supplyTokenName = assetParams?.name || \"\";\n  const distributionTokenSymbol =\n    activeLNStore?.distributionAssetParams.symbol || \"NONE\";\n\n  const walletBalance = cTokenStore?.accountUnderlyingBalanceInUnits || 0;\n  const hasWalletBalance = walletBalance > 0;\n  const needToApprove = !isNativeCoin; // False for native\n\n  const pricePerUnitUsd = cTokenStore?.underlyingUsdPrice || 0;\n  const collateralFactorInUnits = cTokenStore?.collateralFactorInUnits || 0;\n  const maximillionAddress = activeLNStore?.maximillionAddress || \"\";\n  const currentLiquidityCashUsd = activeLNStore?.liquidityUsd || 0;\n  // const currentBorrowLimitUsd = activeLNStore?.collateralPotentialInUSD || 0;\n\n  const usedBorrowPercentage = activeLNStore?.usedBorrowPercentage || 0;\n  const totalAccountBorrowBalanceUsd =\n    activeLNStore?.totalAccountBorrowBalanceUsd || 0;\n  const collateralPotentialInUSD = activeLNStore?.collateralPotentialInUSD || 0;\n  const priceCalculationDecimals = activeLNStore?.priceCalculationDecimals || 6;\n\n  const distributionAssetApy = activeLNStore?.distributionAssetApy || 0;\n  const supplyApy = cTokenStore?.supplyApyInPercentages || 0;\n  const borrowApy = cTokenStore?.borrowApyInPercentages || 0;\n\n  // Can they borrow more ?\n  const currentLiquidityUsd = activeLNStore?.liquidityUsd || 0;\n  const hasAvailableLiquidity = currentLiquidityUsd > 0; // True means user can borrow&withdraw\n\n  // How many units can the user borrow more\n  const liquidityInAssetUnits = currentLiquidityUsd / pricePerUnitUsd;\n\n  const isCollaterable = cTokenStore?.isCollaterable || false;\n\n  return {\n    accountStore,\n    modalsStore,\n    lendingNetworksStore,\n    activeLNStore,\n    assetBaseAddress,\n    maximillionAddress,\n    isNativeCoin,\n    cTokenStore,\n    cToken,\n    supplyTokenSymbol,\n    supplyTokenName,\n    distributionTokenSymbol,\n    isCollaterable,\n    collateralPotentialInUSD,\n\n    walletBalance,\n    hasWalletBalance,\n    needToApprove,\n\n    priceCalculationDecimals,\n    pricePerUnitUsd,\n    collateralFactorInUnits,\n    currentLiquidityCashUsd,\n    // currentBorrowLimitUsd,\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n\n    distributionAssetApy,\n    supplyApy,\n    borrowApy,\n\n    hasAvailableLiquidity,\n    liquidityInAssetUnits,\n  };\n}\n\nexport function useMarketInteractionModalTabsState() {\n  const [activeTabIndex, setActiveTabIndex] = useState<TZeroOrOne>(0);\n\n  const borrowTabIndex = 0;\n  const repayTabIndex = 1;\n  const tab0Title = \"Borrow\";\n  const tab1Title = \"Repay\";\n\n  const isBorrow = activeTabIndex === borrowTabIndex;\n  const isRepay = activeTabIndex === repayTabIndex;\n\n  return {\n    activeTabIndex,\n    setActiveTabIndex,\n  };\n}\n\nexport function useMarketInteractionActiveTabState(activeTabIndex: TZeroOrOne) {\n  return [activeTabIndex === 0, activeTabIndex === 1];\n}\n\nexport function useOnEnableClicked(\n  cToken: string,\n  assetBaseAddress: string,\n  closeModal: () => void,\n  setWaitingForUserApproval: (val: boolean) => void,\n  setWaitingForTxConfirmation: (val: boolean) => void\n) {\n  const accountStore = useAccountStore();\n\n  const createEnableTx = useCallback(() => {\n    return accountStore.approveErc20Usage(\n      assetBaseAddress,\n      cToken,\n      ethers.constants.MaxUint256\n    );\n  }, [accountStore, assetBaseAddress, cToken]);\n\n  const wrappedEnableTx = useTxWaitingLogicExplicit(\n    createEnableTx,\n    closeModal,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation\n  );\n\n  const onEnableClicked = useCallback(async () => {\n    if (!cToken) {\n      return console.log(\"No CToken Address\");\n    }\n\n    await wrappedEnableTx();\n\n    console.log(`Enable button clicked`);\n    await console.log(`Enable is done !`);\n  }, [cToken, wrappedEnableTx]);\n\n  return onEnableClicked;\n}\n\n/**\n *\n * @param currentBorrowLimitUsd\n * @param totalAccountBorrowBalanceUsd sum of all active borrows in USD\n * @param actionInUnits DEV_NOTE : Units should be negative for actions that reduce collateral (borrow/withdraw)\n * @param unitPriceInUsd\n * @param collateralFactorInUnits\n */\nexport function useCalculateChangeInBorrowLimits(\n  currentBorrowLimitUsd: number,\n  totalAccountBorrowBalanceUsd: number,\n  actionInUnits: number,\n  unitPriceInUsd: number,\n  collateralFactorInUnits: number,\n  // Indicates the decimals used to calculate the prices in the smart contract.\n  // This will prevent js float calculation from interfering.\n  // For example, when withdrawing maximum amount, the float rounding\n  // could cause the app to think that this will lead to shortfall\n  // (because the value will we an something like -1e14.\n  pricePrecision: number\n) {\n  const priceSensitivizer = buildSensitivizer(pricePrecision);\n  const actionEffectInUsd = priceSensitivizer(actionInUnits * unitPriceInUsd);\n\n  const collateralValueOfActionEffect = priceSensitivizer(\n    actionEffectInUsd * collateralFactorInUnits\n  );\n\n  const borrowLimitAfterChange = priceSensitivizer(\n    currentBorrowLimitUsd + collateralValueOfActionEffect\n  );\n\n  const usedBorrowLimitPercentageAfterChange =\n    priceSensitivizer(totalAccountBorrowBalanceUsd / borrowLimitAfterChange) *\n    100;\n\n  const actionLeadsToShortfall = usedBorrowLimitPercentageAfterChange > 100;\n\n  return {\n    actionEffectInUsd,\n    actionLeadsToShortfall,\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  };\n}\n\n/**\n *\n * @param currentBorrowLimitUsd\n * @param totalAccountBorrowBalanceUsd sum of all active borrows in USD\n * @param actionInUnits DEV_NOTE : Units should be negative for actions that reduce collateral (borrow/withdraw)\n * @param unitPriceInUsd\n * @param collateralFactorInUnits\n */\nexport function useCalculateChangeInBorrowLimitsForBorrow(\n  collateralPotentialInUSD: number,\n  currentBorrowLimitUsd: number,\n  totalAccountBorrowBalanceUsd: number,\n  actionInUnits: number,\n  unitPriceInUsd: number,\n  // Indicates the decimals used to calculate the prices in the smart contract.\n  // This will prevent js float calculation from interfering.\n  // For example, when withdrawing maximum amount, the float rounding\n  // could cause the app to think that this will lead to shortfall\n  // (because the value will we an something like -1e14.\n  pricePrecision: number\n) {\n  const priceSensitivizer = buildSensitivizer(pricePrecision);\n  const actionEffectInUsd = priceSensitivizer(actionInUnits * unitPriceInUsd);\n\n  const collateralValueOfActionEffect = actionEffectInUsd;\n\n  const borrowLimitAfterChange = priceSensitivizer(\n    currentBorrowLimitUsd + collateralValueOfActionEffect\n    // currentBorrowLimitUsd\n  );\n\n  const totalAccountBorrowBalanceUsdAfterAction =\n    totalAccountBorrowBalanceUsd + Math.abs(actionEffectInUsd);\n\n  const usedBorrowLimitPercentageAfterChange =\n    priceSensitivizer(\n      totalAccountBorrowBalanceUsdAfterAction / collateralPotentialInUSD\n    ) * 100;\n\n  const actionLeadsToShortfall = usedBorrowLimitPercentageAfterChange > 100;\n\n  return {\n    actionEffectInUsd,\n    actionLeadsToShortfall,\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  };\n}\n\nexport function useCalculateChangeInBorrowBalance(\n  collateralPotentialInUSD: number,\n  totalAccountBorrowBalanceUsd: number,\n  actionInUnits: number,\n  unitPriceInUsd: number,\n  // Indicates the decimals used to calculate the prices in the smart contract.\n  // This will prevent js float calculation from interfering.\n  // For example, when withdrawing maximum amount, the float rounding\n  // could cause the app to think that this will lead to shortfall\n  // (because the value will we an something like -1e14.\n  pricePrecision: number\n) {\n  const priceSensitivizer = buildSensitivizer(pricePrecision);\n  const actionEffectInUsd = priceSensitivizer(actionInUnits * unitPriceInUsd);\n\n  const borrowBalanceAfterChange = priceSensitivizer(\n    totalAccountBorrowBalanceUsd + actionEffectInUsd\n    // currentBorrowLimitUsd\n  );\n\n  const totalAccountBorrowBalanceUsdAfterAction =\n    totalAccountBorrowBalanceUsd + Math.abs(actionEffectInUsd);\n\n  const usedBorrowLimitPercentageAfterChange =\n    priceSensitivizer(\n      totalAccountBorrowBalanceUsdAfterAction / collateralPotentialInUSD\n    ) * 100;\n\n  const actionLeadsToShortfall = usedBorrowLimitPercentageAfterChange > 100;\n\n  return {\n    actionEffectInUsd,\n    actionLeadsToShortfall,\n    borrowBalanceAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  };\n}\n\nexport function usePriceInSensitivity(price: number, sensitivity: number) {\n  return useMemo(() => {\n    return sensitivizePrice(price, sensitivity);\n  }, [price, sensitivity]);\n}\n\nexport function useSensitivizer(sensitivity: number) {\n  return useCallback(\n    (price: number) => {\n      return sensitivizePrice(price, sensitivity);\n    },\n    [sensitivity]\n  );\n}\n\nexport function buildSensitivizer(sensitivity: number) {\n  return (price: number) => {\n    return sensitivizePrice(price, sensitivity);\n  };\n}\n\nfunction sensitivizePrice(price: number, sensitivity: number): number {\n  return parseFloat(price.toFixed(sensitivity));\n}\n","import React from \"react\";\nimport { Fade, makeStyles, Typography } from \"@material-ui/core\";\nimport { TokenIcon } from \"../../../../icons/TokenIcon\";\n\ninterface IProps {\n  tokenSymbol: string;\n  message: string;\n  subMessage?: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"100%\",\n    paddingTop: \"1rem\",\n    padding: \"2.5rem\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  largeIcon: {\n    width: \"3rem\",\n    height: \"3rem\",\n  },\n  fadeIn: {\n    transition: \"500ms\",\n    \"&:hover\": {\n      // animation: \"$fadeIn 300ms\",\n      // border: \"1px solid red\",\n      backgroundColor: theme.palette.primary.main,\n      // padding: `2.0rem`,\n      // height: \"3.5rem\",\n      // width: \"3.5rem\",\n    },\n  },\n\n  \"@keyframes fadeIn\": {\n    // from: { opacity: 1 },\n    // to: { opacity: 0 },\n    \"0%\": {\n      // opacity: 1,\n    },\n    \"100%\": {\n      // opacity: 0,\n    },\n  },\n}));\n\nexport const MainModalMessage = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { tokenSymbol, message, subMessage } = props;\n\n  return (\n    <div className={classes.container}>\n      <TokenIcon\n        symbol={tokenSymbol}\n        extraClasses={[classes.largeIcon, classes.fadeIn]}\n      />\n      <br />\n      {/*<Typography variant={\"h6\"}>Message ${tokenSymbol}</Typography>*/}\n      <Typography>{message}</Typography>\n      {subMessage && (\n        <>\n          <Typography variant={\"body2\"}>{subMessage}</Typography>{\" \"}\n        </>\n      )}\n    </div>\n  );\n});\n","import React, {\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  IMarketModalCommonStatePayload,\n  IMarketModalPerTabStatePayload,\n  IMarketModalStatePayload,\n  MarketInteractionModal,\n  TZeroOrOne,\n} from \"./base/MarketInteractionModal\";\nimport { Button, Input, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport { BigNumber, ethers } from \"ethers\";\nimport {\n  useCalculateChangeInBorrowLimits,\n  useMarketInteractionActiveTabState,\n  useMarketInteractionModalBase,\n  useMarketInteractionModalTabsState,\n  useOnEnableClicked,\n} from \"./marketInteractionModalHooks\";\nimport { MainModalMessage } from \"./base/mainModalMessage/MainModalMessage\";\nimport {\n  useTxWaitingLogicExplicit,\n  useTxWaitingStateExplicit,\n} from \"../txWaitingModal/txWaitingHooks\";\nimport { TModalFooterMessagePayload } from \"./base/ModalFooter\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const SupplyModal = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const { open, closeModal } = props;\n\n    const {\n      lendingNetworksStore,\n      cTokenStore,\n      modalsStore,\n      accountStore,\n      assetBaseAddress,\n      maximillionAddress,\n      activeLNStore,\n      isNativeCoin,\n      cToken,\n      isCollaterable,\n      collateralPotentialInUSD,\n\n      walletBalance,\n      hasWalletBalance,\n      needToApprove,\n\n      distributionTokenSymbol,\n      supplyTokenSymbol,\n      supplyTokenName,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      // currentBorrowLimitUsd,\n      collateralFactorInUnits,\n      usedBorrowPercentage,\n      totalAccountBorrowBalanceUsd,\n      distributionAssetApy,\n      borrowApy,\n      supplyApy,\n\n      hasAvailableLiquidity,\n      liquidityInAssetUnits,\n    } = useMarketInteractionModalBase();\n\n    const {\n      activeTabIndex,\n      setActiveTabIndex,\n    } = useMarketInteractionModalTabsState();\n\n    const {\n      waitingForUserApproval,\n      waitingForTxConfirmation,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n    } = useTxWaitingStateExplicit();\n\n    const [isSupply, isWithdraw] = useMarketInteractionActiveTabState(\n      activeTabIndex\n    );\n\n    const onEnableClicked = useOnEnableClicked(\n      cToken,\n      assetBaseAddress,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    // TODO : C.F.H : Follow the 'repay max' example\n    const [isAskingToWithdrawAll, setIsAskingToWithdrawAll] = useState(false);\n    const [supplyInputValue, setSupplyInputValue] = useState(0);\n    const [withdrawInputValue, setWithdrawInputValue] = useState(0);\n\n    useEffect(() => {\n      let newToken = cToken;\n      setIsAskingToWithdrawAll(false);\n    }, [cToken]);\n\n    const clearStateBeforeClose = useCallback(() => {\n      setSupplyInputValue(0);\n      setWithdrawInputValue(0);\n      closeModal();\n    }, [closeModal]);\n\n    // Constants\n    const tab0Title = \"Supply\";\n    const tab1Title = \"Withdraw\";\n\n    // TODO : Separate inputs for each usage / make a component\n    const inputComponent = useMemo(() => {\n      return (\n        <div\n          style={{\n            width: \"100%\",\n            padding: \"2.5rem\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Input\n            style={{ textAlign: \"center\" }}\n            inputProps={{ style: { textAlign: \"center\", appearance: \"none\" } }}\n            type={\"number\"}\n            title={\"Input\"}\n            name={\"Input\"}\n            value={isSupply ? supplyInputValue : withdrawInputValue}\n            onChange={(e) =>\n              isSupply\n                ? setSupplyInputValue(sanitizeNumericInput(e.target.value))\n                : setWithdrawInputValue(sanitizeNumericInput(e.target.value))\n            }\n          />\n        </div>\n      );\n    }, [isSupply, supplyInputValue, withdrawInputValue]);\n\n    // TODO : CRITICAL : Add test for 'some' approval (not unlimitted) as well\n    const hasApprovedERC20 = cTokenStore?.hasAnyAllowance;\n    const currentSupplyBalanceInUnits = cTokenStore?.accountSupplyInUnits || 0;\n    const currentSupplyBalanceInUsd = cTokenStore?.accountSupplyBalanceUsd || 0;\n    const currentSupplyBalanceInOTokens =\n      cTokenStore?.accountSupplyInOTokensRaw || BigNumber.from(0);\n    const hasSupplyBalance = currentSupplyBalanceInUnits > 0;\n    const hasBorrowBalance = totalAccountBorrowBalanceUsd > 0;\n\n    const onAskToWithdrawAllToggleClicked = useCallback(() => {\n      console.log(`set 'asking to withdraw all' to ${!isAskingToWithdrawAll}'`);\n      setIsAskingToWithdrawAll(!isAskingToWithdrawAll);\n    }, [isAskingToWithdrawAll]);\n\n    const createSupplyTx = () =>\n      accountStore.supplyToMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          supplyInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    const createWithdrwaTx = () =>\n      accountStore.withdrawFromMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          withdrawInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    const createWithdrawAllTx = useCallback(\n      () =>\n        // DEV_NOTE : In order to draw all, we draw by specific amount of all of the oTokens\n        accountStore.withdrawFromMarketByOTokens(\n          cToken,\n          currentSupplyBalanceInOTokens,\n          isNativeCoin,\n          maximillionAddress\n        ),\n      [\n        accountStore,\n        cToken,\n        currentSupplyBalanceInOTokens,\n        isNativeCoin,\n        maximillionAddress,\n      ]\n    );\n\n    console.log(\n      `Underlying decimals (${supplyTokenSymbol}) : ${cTokenStore?.underlyingDecimals}`\n    );\n\n    console.log(`Input value : ${withdrawInputValue.toString()}`);\n\n    const wrappedSupplyTx = useTxWaitingLogicExplicit(\n      createSupplyTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const wrappedWithdrawTx = useTxWaitingLogicExplicit(\n      createWithdrwaTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const wrappedWithdrawAllTx = useTxWaitingLogicExplicit(\n      createWithdrawAllTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const onSupplyClicked = useCallback(async () => {\n      console.log(`Supply button clicked`);\n\n      await wrappedSupplyTx();\n\n      console.log(`Supply is done !`);\n    }, [wrappedSupplyTx]);\n\n    const onWithdrawClicked = useCallback(async () => {\n      console.log(`Withdraw button clicked`);\n\n      // Withdraw all or just some ?\n      if (isAskingToWithdrawAll) {\n        await wrappedWithdrawAllTx();\n      } else {\n        await wrappedWithdrawTx();\n      }\n\n      console.log(`Withdraw is done !`);\n    }, [isAskingToWithdrawAll, wrappedWithdrawAllTx, wrappedWithdrawTx]);\n\n    console.log({ isAskingToWithdrawAll });\n    const messageOrInputComponent = useMemo<ReactNode>(() => {\n      if (isSupply) {\n        if (needToApprove && !hasApprovedERC20) {\n          // Message component - needs to approve\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Please approve ${supplyTokenSymbol} usage`}\n            />\n          );\n        } else {\n          // Input component - how much to supply ?\n          return inputComponent;\n        }\n      } else if (isWithdraw) {\n        if (isAskingToWithdrawAll) {\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Withdrawing all`}\n              subMessage={`~${(+currentSupplyBalanceInUnits.toFixed(\n                4\n              )).toLocaleString()}`}\n            />\n          );\n        } else {\n          // Input component - how much to withdraw ?\n          return inputComponent;\n        }\n      }\n\n      // Safe error\n      return <></>;\n    }, [\n      currentSupplyBalanceInUnits,\n      hasApprovedERC20,\n      inputComponent,\n      isAskingToWithdrawAll,\n      isSupply,\n      isWithdraw,\n      needToApprove,\n      supplyTokenSymbol,\n    ]);\n\n    const footerMessagePayloads = useMemo<TModalFooterMessagePayload[]>(() => {\n      const payloads: TModalFooterMessagePayload[] = [\n        {\n          title: `${supplyTokenSymbol} Price`,\n          tokenAmount: pricePerUnitUsd,\n          tokenSymbol: \"$\",\n        },\n        {\n          title: \"Currently Supplying\",\n          tokenAmount: currentSupplyBalanceInUnits,\n          tokenSymbol: supplyTokenSymbol,\n        },\n        {\n          title: \"Wallet Balance\",\n          tokenAmount: walletBalance,\n          tokenSymbol: supplyTokenSymbol,\n        },\n      ];\n\n      return payloads;\n    }, [\n      currentSupplyBalanceInUnits,\n      pricePerUnitUsd,\n      supplyTokenSymbol,\n      walletBalance,\n    ]);\n\n    // const isAskingToWithdrawAllAndCan = isAskingToWithdrawAll &&\n\n    // Must have wallet balance in this asset + Must approve (if needed)\n    const canSupply =\n      hasWalletBalance && (needToApprove ? hasApprovedERC20 : true);\n    const canWithdraw = hasSupplyBalance;\n\n    const borrowLimitNote = !isCollaterable\n      ? `Enable ${supplyTokenSymbol} as collateral to affect Borrow limit`\n      : undefined;\n\n    // Common payload part\n    const commonPayloadPart = useMemo<IMarketModalCommonStatePayload>(() => {\n      const commonModalState: IMarketModalCommonStatePayload = {\n        // Tabs\n        currentTabIndex: activeTabIndex,\n        onTabIndexChange: setActiveTabIndex,\n        tab0Title,\n        tab1Title,\n\n        // Assets\n        actionAssetSymbol: supplyTokenSymbol,\n        actionAssetName: supplyTokenName,\n        distributionAssetSymbol: distributionTokenSymbol,\n\n        // Borrow Limit (optional)\n        currentBorrowLimit: collateralPotentialInUSD,\n        usedBorrowLimitPercentage: usedBorrowPercentage,\n\n        // Tx Waiting\n        waitingForTxConfirmation,\n        waitingForUserApproval,\n      };\n\n      return commonModalState;\n    }, [\n      activeTabIndex,\n      collateralPotentialInUSD,\n      distributionTokenSymbol,\n      setActiveTabIndex,\n      supplyTokenName,\n      supplyTokenSymbol,\n      usedBorrowPercentage,\n      waitingForTxConfirmation,\n      waitingForUserApproval,\n    ]);\n\n    // Payload for supply\n    const marketModalStatePayloadForSupplyTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      const isSupplyInputValueValid = supplyInputValue > 0;\n      const isOfferingMoreThanWalletBalance = supplyInputValue > walletBalance;\n      const actionButtonTextForSupply = canSupply\n        ? \"Supply\"\n        : needToApprove\n        ? \"Approve\"\n        : \"No Balance\";\n\n      const activeButtonActive =\n        (isSupplyInputValueValid &&\n          canSupply &&\n          !isOfferingMoreThanWalletBalance) ||\n        (needToApprove && !hasApprovedERC20);\n      const actionButtonCbForSupply = canSupply\n        ? onSupplyClicked\n        : onEnableClicked;\n\n      let reasonForNotBeingAbleToWithdraw = undefined;\n      if (!hasWalletBalance) {\n        reasonForNotBeingAbleToWithdraw = \"No balance to supply\";\n      } else if (isOfferingMoreThanWalletBalance) {\n        reasonForNotBeingAbleToWithdraw = \"Exceeding wallet balance\";\n      } else if (!isSupplyInputValueValid) {\n        // No message\n        // reasonForNotBeingAbleToWithdraw = \"Invalid sum\";\n      }\n\n      const actionButtonDisabledText = reasonForNotBeingAbleToWithdraw;\n\n      // Calculate the changes to borrow limit (USD and % used)\n      const {\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimits(\n        collateralPotentialInUSD,\n        totalAccountBorrowBalanceUsd,\n        supplyInputValue,\n        pricePerUnitUsd,\n        collateralFactorInUnits,\n        priceCalculationDecimals\n      );\n\n      const showPredictedBorrowLimits =\n        isCollaterable && collateralValueOfActionEffect !== 0;\n\n      // Input action button\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: \"\",\n        showInputActionButton: false,\n        inputActionButtonActive: false,\n        onInputActionButtonPressed: undefined,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: supplyApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        // DEV_NOTE : We want to show the effect of both supply and withdraw on the borrow limits\n        showBorrowLimit: isWithdraw || canSupply,\n        borrowLimitAfterChange: borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange: usedBorrowLimitPercentageAfterChange,\n        showPredictedBorrowLimits,\n        borrowLimitNote,\n\n        // Action button\n        actionButtonActive: activeButtonActive,\n        actionButtonText: actionButtonTextForSupply,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForSupply,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      borrowLimitNote,\n      canSupply,\n      collateralFactorInUnits,\n      collateralPotentialInUSD,\n      distributionAssetApy,\n      footerMessagePayloads,\n      hasApprovedERC20,\n      hasWalletBalance,\n      isCollaterable,\n      isWithdraw,\n      messageOrInputComponent,\n      needToApprove,\n      onEnableClicked,\n      onSupplyClicked,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      supplyApy,\n      supplyInputValue,\n      totalAccountBorrowBalanceUsd,\n      walletBalance,\n    ]);\n\n    // Payload for withdraw\n    const marketModalStatePayloadForWithdrawTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      // If requesting to withdraw all, let's make sure the balances will remain ok\n      const withdrawUnitsForShortfallCalculationWhenCollaterized = isAskingToWithdrawAll\n        ? currentSupplyBalanceInUnits\n        : withdrawInputValue;\n\n      const withdrawUnitsForShortfallCalculation = isCollaterable\n        ? withdrawUnitsForShortfallCalculationWhenCollaterized\n        : 0;\n\n      // Calculate borrow limit (USD and % used) after requested withdraw\n      const {\n        actionLeadsToShortfall,\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimits(\n        collateralPotentialInUSD,\n        totalAccountBorrowBalanceUsd,\n        withdrawUnitsForShortfallCalculation * -1,\n        pricePerUnitUsd,\n        collateralFactorInUnits,\n        priceCalculationDecimals\n      );\n\n      // These params are needed but area calculated a bit differently for when asking to borrow all vs a specific amount\n      let reasonForNotBeingAbleToWithdraw = undefined;\n      let showPredictedBorrowLimits = false;\n      let withdrawButtonActive = false;\n\n      // Is asking to withdraw all ?\n      if (isAskingToWithdrawAll) {\n        showPredictedBorrowLimits = isCollaterable;\n\n        if (actionLeadsToShortfall) {\n          reasonForNotBeingAbleToWithdraw = \"Will cause shortfall\";\n        }\n\n        withdrawButtonActive = !actionLeadsToShortfall;\n      } else {\n        // Specific amount\n        const withdrawInputValid = withdrawInputValue > 0;\n        const isRequestingMoreThanSuppliedBalance =\n          withdrawInputValue > currentSupplyBalanceInUnits;\n\n        // Make sure the user does not fall into shortfall.\n        // DEV_NOTE : This is used to ensure that withdraw will be allowed when there is no borrow +\n        //            when this asset is not used as collateral\n        const isRequestLegal =\n          !actionLeadsToShortfall ||\n          !hasBorrowBalance ||\n          (hasBorrowBalance && !isCollaterable);\n\n        withdrawButtonActive =\n          canWithdraw &&\n          withdrawInputValid &&\n          !isRequestingMoreThanSuppliedBalance &&\n          isRequestLegal;\n\n        if (!hasSupplyBalance) {\n          reasonForNotBeingAbleToWithdraw = \"No balance to withdraw\";\n        } else if (isRequestingMoreThanSuppliedBalance) {\n          reasonForNotBeingAbleToWithdraw = \"Exceeding supplied balance\";\n        } else if (!withdrawInputValid) {\n          // No message\n          // reasonForNotBeingAbleToWithdraw = \"Invalid sum\";\n        }\n\n        showPredictedBorrowLimits =\n          isCollaterable && collateralValueOfActionEffect !== 0;\n      }\n\n      // General params\n      const actionButtonCbForWithdraw = onWithdrawClicked;\n      const actionButtonTextForWithdraw = \"Withdraw\";\n      const actionButtonDisabledText = reasonForNotBeingAbleToWithdraw;\n      const showWithdrawMax = hasSupplyBalance;\n      const isWithdrawMaxActive = hasSupplyBalance;\n      const withdrawAllToggleButtonText = isAskingToWithdrawAll\n        ? \"Cancel\"\n        : \"All\";\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: withdrawAllToggleButtonText,\n        showInputActionButton: showWithdrawMax,\n        inputActionButtonActive: isWithdrawMaxActive,\n        onInputActionButtonPressed: onAskToWithdrawAllToggleClicked,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: supplyApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: isWithdraw,\n        borrowLimitAfterChange,\n        showPredictedBorrowLimits,\n        usedBorrowLimitPercentageAfterChange,\n        borrowLimitNote,\n\n        // Action button\n        actionButtonActive: withdrawButtonActive,\n        actionButtonText: actionButtonTextForWithdraw,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForWithdraw,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      isAskingToWithdrawAll,\n      currentSupplyBalanceInUnits,\n      withdrawInputValue,\n      isCollaterable,\n      collateralPotentialInUSD,\n      totalAccountBorrowBalanceUsd,\n      pricePerUnitUsd,\n      collateralFactorInUnits,\n      priceCalculationDecimals,\n      onWithdrawClicked,\n      hasSupplyBalance,\n      messageOrInputComponent,\n      onAskToWithdrawAllToggleClicked,\n      supplyApy,\n      distributionAssetApy,\n      isWithdraw,\n      borrowLimitNote,\n      footerMessagePayloads,\n      hasBorrowBalance,\n      canWithdraw,\n    ]);\n\n    const statePerTabPayload = isSupply\n      ? marketModalStatePayloadForSupplyTab\n      : marketModalStatePayloadForWithdrawTab;\n\n    const marketModalStatePayload = useMemo<IMarketModalStatePayload>(() => {\n      const payload: IMarketModalStatePayload = {\n        ...commonPayloadPart,\n        ...statePerTabPayload,\n      };\n\n      return payload;\n    }, [commonPayloadPart, statePerTabPayload]);\n\n    return (\n      <MarketInteractionModal\n        open={open}\n        closeModal={clearStateBeforeClose}\n        {...marketModalStatePayload}\n      />\n    );\n  }\n);\n\nfunction sanitizeNumericInput(stringValueOfNumericInput?: string): number {\n  let safeString = stringValueOfNumericInput || \"0\";\n  // DEV_NOTE : Barbaric way\n  while (safeString.length > 1 && safeString.charAt(0) === \"0\") {\n    console.log(`Starts in 0 : ${safeString}`);\n    safeString = safeString.substring(1, safeString.length);\n    console.log(`After trim : ${safeString}`);\n  }\n\n  const parsedAsFloat = +safeString;\n  if (!stringValueOfNumericInput || isNaN(parsedAsFloat)) {\n    return 0;\n  }\n\n  return parsedAsFloat;\n}\n","import React, {\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  IMarketModalCommonStatePayload,\n  IMarketModalPerTabStatePayload,\n  IMarketModalStatePayload,\n  MarketInteractionModal,\n} from \"./base/MarketInteractionModal\";\nimport { Input } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport { BigNumber, ethers } from \"ethers\";\nimport {\n  useCalculateChangeInBorrowBalance,\n  useMarketInteractionActiveTabState,\n  useMarketInteractionModalBase,\n  useMarketInteractionModalTabsState,\n  useOnEnableClicked,\n} from \"./marketInteractionModalHooks\";\nimport { MainModalMessage } from \"./base/mainModalMessage/MainModalMessage\";\nimport {\n  useTxWaitingLogicExplicit,\n  useTxWaitingStateExplicit,\n} from \"../txWaitingModal/txWaitingHooks\";\nimport { TModalFooterMessagePayload } from \"./base/ModalFooter\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nconst ONATIVE_MAX_REPAY_FACTOR = 1.05;\n// Percentage in factor from max limit that is considered safe.\nconst SAFE_BORROW_FACTOR = 0.4;\n\nexport const BorrowModal = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const { open, closeModal } = props;\n\n    const {\n      lendingNetworksStore,\n      cTokenStore,\n      modalsStore,\n      accountStore,\n      assetBaseAddress,\n      maximillionAddress,\n      activeLNStore,\n      isNativeCoin,\n      cToken,\n      isCollaterable,\n\n      walletBalance,\n      needToApprove,\n      hasWalletBalance,\n\n      collateralPotentialInUSD,\n      distributionTokenSymbol,\n      supplyTokenSymbol,\n      supplyTokenName,\n      totalAccountBorrowBalanceUsd,\n      usedBorrowPercentage,\n      collateralFactorInUnits,\n      priceCalculationDecimals,\n      // currentBorrowLimitUsd,\n      pricePerUnitUsd,\n      distributionAssetApy,\n      borrowApy,\n      supplyApy,\n\n      liquidityInAssetUnits,\n      hasAvailableLiquidity,\n    } = useMarketInteractionModalBase();\n\n    const {\n      waitingForUserApproval,\n      waitingForTxConfirmation,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n    } = useTxWaitingStateExplicit();\n\n    const {\n      activeTabIndex,\n      setActiveTabIndex,\n    } = useMarketInteractionModalTabsState();\n\n    const [isBorrow, isRepay] = useMarketInteractionActiveTabState(\n      activeTabIndex\n    );\n\n    const onEnableClicked = useOnEnableClicked(\n      cToken,\n      assetBaseAddress,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const [isRepayingMax, setIsRepayingMax] = useState(false);\n    const [borrowInputValue, setBorrowInputValue] = useState(0);\n    const [repayInputValue, setRepayInputValue] = useState(0);\n\n    useEffect(() => {\n      let newToken = cToken;\n      setIsRepayingMax(false);\n    }, [cToken]);\n\n    const clearStateBeforeClose = useCallback(() => {\n      setBorrowInputValue(0);\n      setRepayInputValue(0);\n      closeModal();\n    }, [closeModal]);\n\n    // Constants\n    const tab0Title = \"Borrow\";\n    const tab1Title = \"Repay\";\n\n    // TODO : Separate inputs for each usage / make a component\n    const inputComponent = useMemo(() => {\n      return (\n        <div\n          style={{\n            width: \"100%\",\n            padding: \"2.5rem\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Input\n            style={{ textAlign: \"center\" }}\n            inputProps={{ style: { textAlign: \"center\" } }}\n            type={\"number\"}\n            title={\"Input\"}\n            name={\"Input\"}\n            value={isBorrow ? borrowInputValue : repayInputValue}\n            onChange={(e) =>\n              isBorrow\n                ? setBorrowInputValue(sanitizeNumericInput(e.target.value))\n                : setRepayInputValue(sanitizeNumericInput(e.target.value))\n            }\n          />\n        </div>\n      );\n    }, [borrowInputValue, isBorrow, repayInputValue]);\n\n    // TODO : CRITICAL : Add test for 'some' approval (not unlimitted) as well\n    const hasApprovedERC20 = cTokenStore?.hasAnyAllowance;\n    // Is our user borrowing this asset ?\n    const currentBorrowBalance = cTokenStore?.accountBorrowInUnits || 0;\n    const hasBorrowBalance = currentBorrowBalance > 0;\n    const needsToButNotYetApproved = needToApprove && !hasApprovedERC20;\n\n    const createBorrowTx = () =>\n      accountStore.borrowFromMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          borrowInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    const repayAmount = useMemo(() => {\n      if (isRepayingMax) {\n        if (isNativeCoin) {\n          // TODO : Go over this calculation and maybe use fixed decimals/from chain store + put the factor somewhere proper\n          return ethers.utils.parseUnits(\n            (currentBorrowBalance * ONATIVE_MAX_REPAY_FACTOR).toString(),\n            cTokenStore?.underlyingDecimals || 0\n          );\n        } else {\n          return ethers.constants.MaxUint256;\n        }\n      } else {\n        return ethers.utils.parseUnits(\n          repayInputValue.toString(),\n          cTokenStore?.underlyingDecimals || 0\n        );\n      }\n    }, [\n      cTokenStore?.underlyingDecimals,\n      currentBorrowBalance,\n      isNativeCoin,\n      isRepayingMax,\n      repayInputValue,\n    ]);\n\n    const createRepayTx = () =>\n      accountStore.repayToMarket(\n        cToken,\n        repayAmount,\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    const wrappedBorrowTx = useTxWaitingLogicExplicit(\n      createBorrowTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const wrappedRepayTx = useTxWaitingLogicExplicit(\n      createRepayTx,\n      closeModal,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const onBorrowClicked = useCallback(async () => {\n      if (!cToken) {\n        return console.log(\"No CToken Address\");\n      }\n\n      console.log(`Borrow button clicked`);\n      await wrappedBorrowTx();\n      console.log(`Borrow is done !`);\n    }, [cToken, wrappedBorrowTx]);\n    const onBorrowMaxSafeClicked = useCallback(async () => {\n      if (!cToken) {\n        return console.log(\"No CToken Address\");\n      }\n\n      const safeAmountInUsd = collateralPotentialInUSD * SAFE_BORROW_FACTOR;\n      const amountLeftToSafe = safeAmountInUsd - totalAccountBorrowBalanceUsd;\n\n      if (amountLeftToSafe < 0) {\n        console.log(\n          `Already over safe borrow amount : safe is : ${safeAmountInUsd} | borrowedUsd is ${totalAccountBorrowBalanceUsd}`\n        );\n        setBorrowInputValue(0);\n      } else {\n        const safeBorrowInUnits =\n          cTokenStore?.getUnitsForUsdValue(amountLeftToSafe) || 0;\n\n        // TODO : CRITICAL : Move to constants\n        // DEV_NOTE : Decided to round up to 6 ( the markets decimals are 8 - this leaves us some space + this is the lowest decimals for all base assets - so we can safely use it)\n        setBorrowInputValue(parseFloat(safeBorrowInUnits.toFixed(6)));\n      }\n    }, [\n      cToken,\n      cTokenStore,\n      collateralPotentialInUSD,\n      totalAccountBorrowBalanceUsd,\n    ]);\n\n    const onRepayClicked = useCallback(async () => {\n      console.log(`Repay button clicked`);\n      await wrappedRepayTx();\n      console.log(`Repay is done !`);\n    }, [wrappedRepayTx]);\n\n    // How many units does the cToken holds ?\n    const cTokenCashInUnits = cTokenStore?.cTokenCashInUnits || 0;\n\n    // Is borrowing from this asset ?\n    const accountBorrowInUnits = cTokenStore?.accountBorrowInUnits || 0;\n\n    // How much underlying (in USD) does the market hold ?\n    const cTokenCashInUsd = cTokenStore?.cTokenCashInUSD || 0;\n\n    const repayIsZero = repayInputValue === 0;\n    const hasEnoughToRepayAll = walletBalance > accountBorrowInUnits;\n    const canRepayMax = hasWalletBalance && hasEnoughToRepayAll && !repayIsZero;\n\n    const onSetRepayToMaxClicked = useCallback(() => {\n      console.log(\"set repay max\");\n      setIsRepayingMax(!isRepayingMax);\n    }, [isRepayingMax]);\n\n    const messageOrInputComponent = useMemo<ReactNode>(() => {\n      if (isRepay) {\n        if (needsToButNotYetApproved) {\n          // Message component - needs to approve\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Please approve ${supplyTokenSymbol} usage`}\n            />\n          );\n        } else if (isRepayingMax) {\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Repaying all (~${(+currentBorrowBalance.toFixed(\n                2\n              )).toLocaleString()})`}\n            />\n          );\n        } else {\n          // Input component - how much to supply ?\n          return inputComponent;\n        }\n      } else if (isBorrow) {\n        // Input component - how much to withdraw ?\n        return inputComponent;\n      }\n\n      // Safe error\n      return <></>;\n    }, [\n      currentBorrowBalance,\n      inputComponent,\n      isBorrow,\n      isRepay,\n      isRepayingMax,\n      needsToButNotYetApproved,\n      supplyTokenSymbol,\n    ]);\n\n    const footerMessagePayloads = useMemo<TModalFooterMessagePayload[]>(() => {\n      return [\n        {\n          title: `${supplyTokenSymbol} Price`,\n          tokenAmount: pricePerUnitUsd,\n          tokenSymbol: \"$\",\n        },\n        {\n          title: \"Currently Borrowing\",\n          tokenAmount: accountBorrowInUnits,\n          tokenSymbol: supplyTokenSymbol,\n        },\n        {\n          title: \"Wallet Balance\",\n          tokenAmount: walletBalance,\n          tokenSymbol: supplyTokenSymbol,\n        },\n      ];\n    }, [\n      accountBorrowInUnits,\n      pricePerUnitUsd,\n      supplyTokenSymbol,\n      walletBalance,\n    ]);\n\n    // // Must have active borrow in this asset + Must approve (if needed)\n    // const canRepay =\n    //   hasBorrowBalance && (needToApprove ? hasApprovedERC20 : true);\n\n    // TODO : Make sure this is a right assumption\n    // Either what the user is allowed to borrow, or everything there is.\n    const maxPossibleBorrow = Math.max(\n      liquidityInAssetUnits,\n      cTokenCashInUnits\n    );\n\n    // Common payload part\n    const commonPayloadPart = useMemo<IMarketModalCommonStatePayload>(() => {\n      const commonModalState: IMarketModalCommonStatePayload = {\n        // Tabs\n        currentTabIndex: activeTabIndex,\n        onTabIndexChange: setActiveTabIndex,\n        tab0Title,\n        tab1Title,\n\n        // Assets\n        actionAssetSymbol: supplyTokenSymbol,\n        actionAssetName: supplyTokenName,\n        distributionAssetSymbol: distributionTokenSymbol,\n\n        // Borrow Limit (optional)\n        // DEV_NOTE : This was a quick-fix, so the names were not changed. What\n        //            we want to show is the borrow balance (not limit)\n        currentBorrowLimit: totalAccountBorrowBalanceUsd,\n        usedBorrowLimitPercentage: usedBorrowPercentage,\n\n        // Tx Waiting\n        waitingForUserApproval,\n        waitingForTxConfirmation,\n      };\n\n      return commonModalState;\n    }, [\n      activeTabIndex,\n      distributionTokenSymbol,\n      setActiveTabIndex,\n      supplyTokenName,\n      supplyTokenSymbol,\n      totalAccountBorrowBalanceUsd,\n      usedBorrowPercentage,\n      waitingForTxConfirmation,\n      waitingForUserApproval,\n    ]);\n\n    // Payload for Borrow\n    const marketModalStatePayloadForBorrowTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      // Calculate the changes to borrow limit (USD and % used)\n      const {\n        actionLeadsToShortfall,\n        actionEffectInUsd,\n        usedBorrowLimitPercentageAfterChange,\n        borrowBalanceAfterChange,\n      } = useCalculateChangeInBorrowBalance(\n        collateralPotentialInUSD,\n        totalAccountBorrowBalanceUsd,\n        borrowInputValue, // Borrowing more will increase the borrow balance\n        pricePerUnitUsd,\n        priceCalculationDecimals\n      );\n\n      const isRequestingMoreThanCanBorrow =\n        borrowInputValue > maxPossibleBorrow;\n\n      const borrowUsdSum = actionEffectInUsd;\n      const isRequestingMoreThanMarketLiquidity =\n        borrowUsdSum > cTokenCashInUsd;\n\n      const canBorrow =\n        hasAvailableLiquidity &&\n        !isRequestingMoreThanCanBorrow &&\n        !isRequestingMoreThanMarketLiquidity &&\n        !actionLeadsToShortfall;\n\n      let reasonForNotBeingAbleToBorrow = undefined;\n      if (!hasAvailableLiquidity) {\n        reasonForNotBeingAbleToBorrow = \"Borrowing limit reached\";\n      } else if (isRequestingMoreThanCanBorrow) {\n        reasonForNotBeingAbleToBorrow = \"Requesting more than can borrow\";\n      } else if (isRequestingMoreThanMarketLiquidity) {\n        reasonForNotBeingAbleToBorrow = \"Exceeding market liquidity\";\n      } else if (actionLeadsToShortfall) {\n        reasonForNotBeingAbleToBorrow = \"Leads to shortfall\";\n      }\n\n      const actionButtonTextForBorrow = \"Borrow\";\n      const actionButtonDisabledText = reasonForNotBeingAbleToBorrow;\n\n      const activeButtonActive = canBorrow && borrowInputValue > 0;\n\n      const actionButtonCbForSupply = onBorrowClicked;\n\n      const showPredictedBorrowLimits = actionEffectInUsd !== 0;\n\n      const canBorrowMoreSafely =\n        usedBorrowPercentage < SAFE_BORROW_FACTOR * 100;\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: \"Max Safe\",\n        showInputActionButton: true,\n        inputActionButtonActive: canBorrowMoreSafely,\n        onInputActionButtonPressed: onBorrowMaxSafeClicked,\n\n        // Action Rates\n        actionName: \"Borrow\",\n        actionApy: borrowApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: true,\n        borrowLimitAfterChange: borrowBalanceAfterChange,\n        usedBorrowLimitPercentageAfterChange: usedBorrowLimitPercentageAfterChange,\n        showPredictedBorrowLimits,\n\n        // Action button\n        actionButtonActive: activeButtonActive,\n        actionButtonText: actionButtonTextForBorrow,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForSupply,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      borrowApy,\n      borrowInputValue,\n      cTokenCashInUsd,\n      collateralPotentialInUSD,\n      distributionAssetApy,\n      footerMessagePayloads,\n      hasAvailableLiquidity,\n      maxPossibleBorrow,\n      messageOrInputComponent,\n      onBorrowClicked,\n      onBorrowMaxSafeClicked,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      totalAccountBorrowBalanceUsd,\n      usedBorrowPercentage,\n    ]);\n\n    // Payload for repay\n    const marketModalStatePayloadForRepayTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      const isApproveDoneWith = needToApprove ? hasApprovedERC20 : true;\n\n      const isOfferingMoreThanWalletBalance = repayInputValue > walletBalance;\n      const isOfferingMoreThanHasBorrowed =\n        repayInputValue > accountBorrowInUnits;\n\n      // Must have enough wallet balance in this asset + Must approve (if needed)\n      const canRepay =\n        (hasWalletBalance &&\n          !isOfferingMoreThanWalletBalance &&\n          !isOfferingMoreThanHasBorrowed &&\n          !repayIsZero &&\n          isApproveDoneWith) ||\n        isRepayingMax;\n\n      const actionButtonActive = canRepay || needsToButNotYetApproved;\n      const actionButtonCbForRepay = needsToButNotYetApproved\n        ? onEnableClicked\n        : onRepayClicked;\n\n      let reasonForNotBeingAbleToRepay = undefined;\n      if (isOfferingMoreThanWalletBalance) {\n        reasonForNotBeingAbleToRepay = \"Exceeding wallet balance\";\n      } else if (isOfferingMoreThanHasBorrowed) {\n        reasonForNotBeingAbleToRepay = \"Exceeding borrowed amount\";\n      } else if (repayIsZero) {\n        // DEV_NOTE : Will be disabled with the call to action\n        reasonForNotBeingAbleToRepay = \"Repay\";\n      }\n\n      const actionButtonTextForRepay = canRepay\n        ? \"Repay\"\n        : needToApprove\n        ? \"Approve\"\n        : \"\";\n\n      const actionButtonDisabledText = reasonForNotBeingAbleToRepay;\n\n      // Calculate borrow limit (USD and % used) after requested withdraw\n      const {\n        usedBorrowLimitPercentageAfterChange,\n        actionEffectInUsd,\n        actionLeadsToShortfall,\n        borrowBalanceAfterChange,\n      } = useCalculateChangeInBorrowBalance(\n        collateralPotentialInUSD,\n        totalAccountBorrowBalanceUsd,\n        repayInputValue * -1, // Repaying will decrease the borrow balance\n        pricePerUnitUsd,\n        priceCalculationDecimals\n      );\n\n      const showPredictedBorrowLimits = actionEffectInUsd !== 0;\n\n      const inputActionButtonText = isRepayingMax ? \"Cancel\" : \"All\";\n      const showInputActionButton =\n        (isRepay || false) && !needsToButNotYetApproved && hasBorrowBalance;\n      const inputActionButtonActive = hasEnoughToRepayAll;\n      const onInputActionButtonPressed = onSetRepayToMaxClicked;\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText,\n        showInputActionButton,\n        onInputActionButtonPressed,\n        inputActionButtonActive,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: 4.56,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: showPredictedBorrowLimits,\n        borrowLimitAfterChange: borrowBalanceAfterChange,\n        showPredictedBorrowLimits,\n        usedBorrowLimitPercentageAfterChange,\n\n        // Action button\n        actionButtonActive: !!actionButtonActive,\n        actionButtonText: actionButtonTextForRepay,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForRepay,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      accountBorrowInUnits,\n      collateralPotentialInUSD,\n      distributionAssetApy,\n      footerMessagePayloads,\n      hasApprovedERC20,\n      hasBorrowBalance,\n      hasEnoughToRepayAll,\n      hasWalletBalance,\n      isRepay,\n      isRepayingMax,\n      messageOrInputComponent,\n      needToApprove,\n      needsToButNotYetApproved,\n      onEnableClicked,\n      onRepayClicked,\n      onSetRepayToMaxClicked,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      repayInputValue,\n      repayIsZero,\n      totalAccountBorrowBalanceUsd,\n      walletBalance,\n    ]);\n\n    const statePerTabPayload = isBorrow\n      ? marketModalStatePayloadForBorrowTab\n      : marketModalStatePayloadForRepayTab;\n\n    const marketModalStatePayload = useMemo<IMarketModalStatePayload>(() => {\n      const payload: IMarketModalStatePayload = {\n        ...commonPayloadPart,\n        ...statePerTabPayload,\n      };\n\n      return payload;\n    }, [commonPayloadPart, statePerTabPayload]);\n\n    return (\n      <MarketInteractionModal\n        open={open}\n        closeModal={clearStateBeforeClose}\n        {...marketModalStatePayload}\n      />\n    );\n  }\n);\n\nfunction sanitizeNumericInput(stringValueOfNumericInput?: string): number {\n  let safeString = stringValueOfNumericInput || \"0\";\n  // DEV_NOTE : Barbaric way\n  while (safeString.length > 1 && safeString.charAt(0) === \"0\") {\n    console.log(`Starts in 0 : ${safeString}`);\n    safeString = safeString.substring(1, safeString.length);\n    console.log(`After trim : ${safeString}`);\n  }\n\n  const parsedAsFloat = +safeString;\n  if (!stringValueOfNumericInput || isNaN(parsedAsFloat)) {\n    return 0;\n  }\n\n  return parsedAsFloat;\n}\n","import React from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { TokenIcon } from \"../../icons/TokenIcon\";\nimport { BRAND_MAIN_COLOR, GRAYISH_TEXT } from \"../../../theme/themeConstants\";\nimport { BorrowLimitRates } from \"../MarketInteractionModal/base/rates/BorrowLimitRates\";\nimport { ModalActionButton } from \"../MarketInteractionModal/base/ModalActionButton\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../txWaitingModal/TxWaitingModal\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n\n  actionAssetName: string;\n  actionAssetSymbol: string;\n\n  currentBorrowLimit: number;\n  usedBorrowLimitPercentage: number;\n  usedBorrowLimitPercentageAfterChange: number;\n  borrowLimitAfterChange: number;\n  showPredictedBorrowLimits: boolean;\n\n  actionName: string;\n  actionButtonActive: boolean;\n  actionButtonText: string;\n  actionButtonOnClick: () => void;\n\n  // TX waiting\n  waitingForUserApproval: boolean;\n  waitingForTxConfirmation: boolean;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  collateralInteractionPanel: {\n    position: \"relative\",\n    width: \"30rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  messageContainer: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    textAlign: \"center\",\n\n    color: GRAYISH_TEXT,\n  },\n\n  tabBody: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    backgroundColor: \"#ffffff\",\n  },\n}));\n\nexport const CollateralModal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    open,\n    closeModal,\n    actionAssetSymbol,\n    actionAssetName,\n\n    showPredictedBorrowLimits,\n    currentBorrowLimit,\n    usedBorrowLimitPercentage,\n    usedBorrowLimitPercentageAfterChange,\n    borrowLimitAfterChange,\n    actionName,\n    actionButtonActive,\n    actionButtonText,\n    actionButtonOnClick,\n\n    waitingForTxConfirmation,\n    waitingForUserApproval,\n  } = props;\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n      />\n    );\n  }\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.collateralInteractionPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Quick-n-Dirty Market icon */}\n          <TokenIcon\n            symbol={actionAssetSymbol}\n            extraClasses={[classes.tokenIcon, classes.upperLeftCorner]}\n          />\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h6\"} className={classes.title}>\n              {actionName} as collateral\n            </Typography>\n          </div>\n\n          <div className={classes.messageContainer}>\n            <Typography>\n              Each asset used as collateral increases your borrowing limit.{\" \"}\n              <br />\n              Be careful, this can subject the asset to being seized in\n              liquidation.\n              {/*Learn more.*/}\n            </Typography>\n          </div>\n\n          {/* Tab Body */}\n          <div className={classes.tabBody}>\n            {/* Borrow limit rates */}\n            <BorrowLimitRates\n              limitOrBalance={\"Limit\"}\n              borrowLimitUsd={currentBorrowLimit || 0}\n              borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}\n              predictedBorrowLimitPercentage={\n                usedBorrowLimitPercentageAfterChange || 0\n              }\n              predictedBorrowLimitUsd={borrowLimitAfterChange || 0}\n              displayPredictedValues={showPredictedBorrowLimits}\n            />\n\n            <br />\n            <br />\n\n            {/* Action button */}\n            <ModalActionButton\n              onClick={actionButtonOnClick}\n              text={actionButtonText}\n              disabled={!actionButtonActive}\n            />\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","import React, { useCallback, useMemo } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { CollateralModal } from \"./CollateralModal\";\nimport { useCalculateChangeInBorrowLimits } from \"../MarketInteractionModal/marketInteractionModalHooks\";\nimport { useCollateralModalState } from \"./collateralModalHooks\";\nimport { useTxWaitingLogic } from \"../txWaitingModal/txWaitingHooks\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../txWaitingModal/TxWaitingModal\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const ConnectedCollateralModal = observer<\n  React.FunctionComponent<IProps>\n>((props) => {\n  const { open, closeModal } = props;\n\n  const {\n    activeLNStore,\n    cToken,\n    accountSupplyInUnits,\n    underlyingName,\n    underlyingSymbol,\n    isCollaterable,\n\n    priceCalculationDecimals,\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n    currentBorrowLimitUsd,\n    collateralFactorInUnits,\n    pricePerUnitUsd,\n  } = useCollateralModalState();\n\n  const newCollaterableValue = !isCollaterable;\n  // Will the new state add or reduce potential collateral\n  const signMultiplier = newCollaterableValue ? 1 : -1;\n  const effectiveUnits = signMultiplier * accountSupplyInUnits;\n\n  const actionButtonText = newCollaterableValue\n    ? `Use ${underlyingSymbol} as collateral`\n    : `Remove ${underlyingSymbol} as collateral`;\n\n  const actionName = newCollaterableValue ? \"Enable\" : \"Remove\";\n\n  // Calculate the changes to borrow limit (USD and % used)\n  const {\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  } = useCalculateChangeInBorrowLimits(\n    currentBorrowLimitUsd,\n    totalAccountBorrowBalanceUsd,\n    effectiveUnits,\n    pricePerUnitUsd,\n    collateralFactorInUnits,\n    priceCalculationDecimals\n  );\n\n  // We always want to emphasis the change (even if it is 0)\n  const showPredictedBorrowLimits = true;\n\n  const actionButtonActive = true;\n\n  const txCreatingFunction = useMemo(() => {\n    if (newCollaterableValue) {\n      return () => activeLNStore?.enterMarketByCTokenAddress(cToken);\n    } else {\n      return () => activeLNStore?.exitMarketByCTokenAddress(cToken);\n    }\n  }, [activeLNStore, cToken, newCollaterableValue]);\n\n  const {\n    wrappedTxBuildingFunction,\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n  } = useTxWaitingLogic(txCreatingFunction, closeModal);\n\n  const onActionButtonClicked = useCallback(async () => {\n    await wrappedTxBuildingFunction();\n  }, [wrappedTxBuildingFunction]);\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n      />\n    );\n  }\n\n  return (\n    <CollateralModal\n      open={open}\n      closeModal={closeModal}\n      actionName={actionName}\n      actionButtonText={actionButtonText}\n      actionAssetName={underlyingName}\n      actionAssetSymbol={underlyingSymbol}\n      actionButtonActive={actionButtonActive}\n      actionButtonOnClick={onActionButtonClicked}\n      showPredictedBorrowLimits={showPredictedBorrowLimits}\n      borrowLimitAfterChange={borrowLimitAfterChange}\n      currentBorrowLimit={currentBorrowLimitUsd}\n      usedBorrowLimitPercentage={usedBorrowPercentage}\n      usedBorrowLimitPercentageAfterChange={\n        usedBorrowLimitPercentageAfterChange\n      }\n      waitingForUserApproval={waitingForUserApproval}\n      waitingForTxConfirmation={waitingForTxConfirmation}\n    />\n  );\n});\n","import {\n  useAccountStore,\n  useLendingNetworksStore,\n  useModalsStore,\n  useSystemStore,\n} from \"../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../services/lendingNetworksService/ILendingNetworksService\";\n\nexport function useCollateralModalState() {\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const systemStore = useSystemStore();\n  const activeLNStore = lendingNetworksStore.activeLNStore;\n\n  const assetAddressToParamsMap =\n    activeLNStore?.assetBaseAddressToParams ||\n    new Map<string, TAssetInMarketParameters>();\n  const assetBaseAddress = modalsStore.assetBaseAddress;\n\n  const assetParams = assetAddressToParamsMap.get(assetBaseAddress);\n  const isNativeCoin = assetParams?.symbol === systemStore.nativeCoinSymbol;\n\n  const cTokenStore = activeLNStore?.baseAssetsToCTokenStore.get(\n    assetBaseAddress\n  );\n\n  const cToken = cTokenStore?.cTokenAddress || \"\";\n  const underlyingName = cTokenStore?.underlyingName || \"\";\n  const underlyingSymbol = cTokenStore?.underlyingSymbol || \"\";\n  const accountSupplyInUnits = cTokenStore?.accountSupplyInUnits || 0;\n  const isCollaterable = cTokenStore?.isCollaterable || false;\n\n  const pricePerUnitUsd = cTokenStore?.underlyingUsdPrice || 0;\n  const collateralFactorInUnits = cTokenStore?.collateralFactorInUnits || 0;\n  const currentBorrowLimitUsd = activeLNStore?.liquidityUsd || 0;\n  const usedBorrowPercentage = activeLNStore?.usedBorrowPercentage || 0;\n  const totalAccountBorrowBalanceUsd =\n    activeLNStore?.totalAccountBorrowBalanceUsd || 0;\n\n  const priceCalculationDecimals = activeLNStore?.priceCalculationDecimals || 6;\n\n  return {\n    activeLNStore,\n    cToken,\n    underlyingName,\n    underlyingSymbol,\n    accountSupplyInUnits,\n    isCollaterable,\n\n    priceCalculationDecimals,\n    pricePerUnitUsd,\n    collateralFactorInUnits,\n    currentBorrowLimitUsd,\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n  };\n}\n","import React from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { TokenIcon } from \"../../icons/TokenIcon\";\nimport {\n  BRAND_MAIN_COLOR,\n  GRAYISH_TEXT,\n  TEXT_ON_LIGHT,\n} from \"../../../theme/themeConstants\";\nimport { ActionRates } from \"../MarketInteractionModal/base/rates/ActionRates\";\nimport { BorrowLimitRates } from \"../MarketInteractionModal/base/rates/BorrowLimitRates\";\nimport { ModalActionButton } from \"../MarketInteractionModal/base/ModalActionButton\";\nimport { ModalFooter } from \"../MarketInteractionModal/base/ModalFooter\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../txWaitingModal/TxWaitingModal\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n\n  incentiveTokenAddress: string;\n  incentiveTokenName: string;\n  incentiveTokenSymbol: string;\n\n  balanceInUnits: number;\n  unclaimedInUnits: number;\n\n  canClaim: boolean;\n  whyCannotClaim: string;\n  onClaim: () => void;\n\n  // actionName: string;\n  // actionButtonActive: boolean;\n  // actionButtonText: string;\n  // actionButtonOnClick: () => void;\n\n  // TX waiting\n  // waitingForUserApproval: boolean;\n  // waitingForTxConfirmation: boolean;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  collateralInteractionPanel: {\n    position: \"relative\",\n    width: \"30rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  messageContainer: {\n    paddingTop: \"1rem\",\n    paddingBottom: \"2rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    textAlign: \"center\",\n\n    color: GRAYISH_TEXT,\n    // display: \"flex\",\n    // flexDirection: \"row\",\n  },\n\n  amountText: {\n    color: TEXT_ON_LIGHT,\n  },\n\n  tabBody: {\n    // paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    // backgroundColor: \"#ffffff\",\n  },\n\n  heroToken: {\n    height: \"4rem\",\n    width: \"4rem\",\n    marginBottom: \"1rem\",\n  },\n}));\n\nexport const IncentiveModal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    open,\n    closeModal,\n    incentiveTokenName,\n    incentiveTokenAddress,\n    incentiveTokenSymbol,\n    balanceInUnits,\n    unclaimedInUnits,\n    canClaim,\n    onClaim,\n    whyCannotClaim,\n  } = props;\n\n  // if (waitingForTxConfirmation || waitingForUserApproval) {\n  //   const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n  //     ? \"CONFIRMATION\"\n  //     : \"USER_APPROVAL\";\n  //\n  //   return (\n  //     <TxWaitingModal\n  //       open={open}\n  //       closeModal={closeModal}\n  //       txWaitingStage={txWaitingStage}\n  //     />\n  //   );\n  // }\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.collateralInteractionPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Quick-n-Dirty Market icon */}\n          <TokenIcon\n            symbol={incentiveTokenSymbol}\n            extraClasses={[classes.tokenIcon, classes.upperLeftCorner]}\n          />\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h6\"} className={classes.title}>\n              {incentiveTokenName}\n            </Typography>\n          </div>\n\n          <div className={classes.messageContainer}>\n            <div>\n              <TokenIcon\n                symbol={incentiveTokenSymbol}\n                extraClasses={[classes.heroToken]}\n              />\n            </div>\n\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <div style={{ flex: 1, textAlign: \"center\" }}>\n                <Typography style={{ fontWeight: \"bold\" }}>\n                  Wallet Balance\n                </Typography>\n                {/*<br />*/}\n                <Typography variant={\"body2\"} className={classes.amountText}>\n                  {balanceInUnits.toFixed(4)}\n                </Typography>\n              </div>\n\n              <div style={{ flex: 1, textAlign: \"center\" }}>\n                <Typography style={{ fontWeight: \"bold\" }}>\n                  Unclaimed balance\n                </Typography>\n                {/*<br />*/}\n                <Typography variant={\"body2\"} className={classes.amountText}>\n                  {unclaimedInUnits.toFixed(4)}\n                </Typography>\n              </div>\n            </div>\n          </div>\n\n          {/*/!* Tab Body *!/*/}\n          <div className={classes.tabBody}>\n            {/*  /!* Borrow limit rates *!/*/}\n            {/*  <BorrowLimitRates*/}\n            {/*    borrowLimitUsd={currentBorrowLimit || 0}*/}\n            {/*    borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}*/}\n            {/*    predictedBorrowLimitPercentage={*/}\n            {/*      usedBorrowLimitPercentageAfterChange || 0*/}\n            {/*    }*/}\n            {/*    predictedBorrowLimitUsd={borrowLimitAfterChange || 0}*/}\n            {/*    displayPredictedValues={showPredictedBorrowLimits}*/}\n            {/*  />*/}\n\n            {/*  <br />*/}\n            {/*  <br />*/}\n\n            {/* Action button */}\n            <ModalActionButton\n              onClick={onClaim}\n              text={canClaim ? `Claim ${incentiveTokenSymbol}` : whyCannotClaim}\n              disabled={!canClaim}\n            />\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","import React, { ReactNode, useCallback, useMemo, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCalculateChangeInBorrowLimits,\n  useMarketInteractionModalBase,\n} from \"../MarketInteractionModal/marketInteractionModalHooks\";\nimport {\n  useTxWaitingLogic,\n  useTxWaitingStateExplicit,\n} from \"../txWaitingModal/txWaitingHooks\";\nimport { IncentiveModal } from \"./IncentiveModal\";\nimport {\n  useIncentiveModalState,\n  useOnClaimLnIncentive,\n} from \"./incentiveModalHooks\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../txWaitingModal/TxWaitingModal\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const ConnectedIncentiveModal = observer<\n  React.FunctionComponent<IProps>\n>((props) => {\n  const { open, closeModal } = props;\n\n  const {\n    activeLNStore,\n    incentiveTokenAddress,\n    incentiveTokenName,\n    incentiveTokenSymbol,\n    compAllocatedUnits,\n    compBalanceUnits,\n  } = useIncentiveModalState();\n\n  const {\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation,\n  } = useTxWaitingStateExplicit();\n\n  const onClaimClicked = useOnClaimLnIncentive(\n    activeLNStore,\n    closeModal,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation\n  );\n\n  let whyCannotClaim = \"\";\n  let canClaim = true;\n\n  if (compAllocatedUnits === 0) {\n    canClaim = false;\n    whyCannotClaim = \"Nothing to claim\";\n  } else if (waitingForUserApproval) {\n    canClaim = false;\n    whyCannotClaim = \"Please approve tx\";\n  }\n  if (waitingForTxConfirmation) {\n    canClaim = false;\n    whyCannotClaim = \"Waiting for TX confirmation\";\n  }\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n      />\n    );\n  }\n\n  return (\n    <IncentiveModal\n      open={open}\n      closeModal={closeModal}\n      incentiveTokenAddress={incentiveTokenAddress || \"\"}\n      incentiveTokenName={incentiveTokenName || \"\"}\n      incentiveTokenSymbol={incentiveTokenSymbol || \"\"}\n      balanceInUnits={compBalanceUnits}\n      unclaimedInUnits={compAllocatedUnits}\n      canClaim={canClaim}\n      onClaim={onClaimClicked}\n      whyCannotClaim={whyCannotClaim}\n    />\n  );\n});\n","import {\n  useAccountStore,\n  useLendingNetworksStore,\n  useModalsStore,\n} from \"../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useTxWaitingLogicExplicit } from \"../txWaitingModal/txWaitingHooks\";\nimport { SingleLNStore } from \"../../../store/multiInstanceStores/SingleLNStore\";\n\nexport function useIncentiveModalState() {\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLNStore = lendingNetworksStore.activeLNStore;\n\n  const incentiveTokenSymbol = activeLNStore?.distributionAssetParams.symbol;\n  const incentiveTokenName = activeLNStore?.distributionAssetParams.name;\n  const incentiveTokenAddress = activeLNStore?.distributionAssetParams.address;\n\n  const compBalanceUnits = activeLNStore?.compBalanceUnits || 0;\n  const compAllocatedUnits = activeLNStore?.compAllocatedUnits || 0;\n\n  return {\n    activeLNStore,\n    incentiveTokenSymbol,\n    incentiveTokenName,\n    incentiveTokenAddress,\n    compBalanceUnits,\n    compAllocatedUnits,\n  };\n}\n\nexport function useOnClaimLnIncentive(\n  activeLNStore: SingleLNStore | undefined,\n  closeModal: () => void,\n  setWaitingForUserApproval: (val: boolean) => void,\n  setWaitingForTxConfirmation: (val: boolean) => void\n) {\n  const createClaimLnIncentiveTx = useCallback(() => {\n    return activeLNStore!.claimLnIncentiveToken();\n  }, [activeLNStore]);\n\n  const wrappedClaimTx = useTxWaitingLogicExplicit(\n    createClaimLnIncentiveTx,\n    closeModal,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation\n  );\n\n  const onClaimClicked = useCallback(async () => {\n    if (activeLNStore) {\n      console.log(`Claim LN incentive button clicked`);\n      await wrappedClaimTx();\n      console.log(`Claim LN incentive is done`);\n    } else {\n      return console.log(\"No Ln Store for claiming\");\n    }\n  }, [activeLNStore, wrappedClaimTx]);\n\n  return onClaimClicked;\n}\n","import { makeStyles, Tab, Tabs, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport {\n  useLendingNetworksStore,\n  useModalsStore,\n} from \"../../store/storeHooks\";\nimport { MainLendingNetworkTab } from \"./MarketsTab/MainLendingNetworkTab\";\nimport { SupplyModal } from \"../../components/modals/MarketInteractionModal/SupplyModal\";\nimport { BorrowModal } from \"../../components/modals/MarketInteractionModal/BorrowModal\";\nimport { ConnectedCollateralModal } from \"../../components/modals/collateralModal/ConnectedCollateralModal\";\nimport { ConnectedIncentiveModal } from \"../../components/modals/incentiveModal/ConnectedIncentiveModal\";\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n}));\n\ninterface IProps {\n  networkId: string;\n}\n\nexport const LendingNetworkPage = observer<React.FC<IProps>>(\n  ({ networkId }) => {\n    const classes = useStyles();\n    const { path, url } = useRouteMatch();\n    const history = useHistory();\n    const lendingNetworksStore = useLendingNetworksStore();\n    const [error, setError] = React.useState<string | null>(null);\n\n    const lnStore = lendingNetworksStore.activeLNStore;\n    const modalsStore = useModalsStore();\n\n    // Update active LN\n    useEffect(() => {\n      lendingNetworksStore.setActiveLn(networkId);\n    }, [lendingNetworksStore, networkId]);\n\n    // const [\n    //   lendingNetworkStore,\n    //   setLendingNetworkStore,\n    // ] = React.useState<SingleLNStore | null>(null);\n\n    // React.useEffect(() => {\n    //   if (lendingNetworksStore.isLoading) {\n    //     return;\n    //   }\n    //\n    //   const lendingNetworkStore = lendingNetworksStore.getLendingNetworkStore(\n    //     networkId\n    //   );\n    //   if (lendingNetworkStore === null) {\n    //     setError(`A network with id \"${networkId}\" was not found`);\n    //   } else {\n    //     setLendingNetworkStore(lendingNetworkStore);\n    //   }\n    // }, [lendingNetworksStore, lendingNetworksStore.isLoading, networkId]);\n\n    if (lendingNetworksStore.isLoading) {\n      return <Typography>Loading...</Typography>;\n    }\n\n    if (error) {\n      return <Typography>Error: {error}</Typography>;\n    }\n\n    return (\n      // TODO : Change this to use proper page structure\n      <div className={classes.root}>\n        {/* DEV_NOTE : Temp solution for tabs */}\n        {/*<div*/}\n        {/*  style={{*/}\n        {/*    display: \"flex\",*/}\n        {/*    justifyContent: \"center\",*/}\n        {/*  }}*/}\n        {/*>*/}\n        {/*  <Tabs*/}\n        {/*    value={history.location.pathname}*/}\n        {/*    onChange={(e, value) => history.push(value)}*/}\n        {/*  >*/}\n        {/*    <Tab label=\"Markets\" value={`${url}/markets`} />*/}\n        {/*    <Tab label=\"Price Feed\" value={`${url}/price-feed`} />*/}\n        {/*  </Tabs>*/}\n        {/*</div>*/}\n        <Switch>\n          <Route\n            path={`${path}/markets`}\n            exact\n            render={() => <MainLendingNetworkTab />}\n          />\n          <Route\n            path={`${path}/price-feed`}\n            render={() => <div>Price Feed</div>}\n          />\n          <Redirect to={`${path}/markets`} />\n        </Switch>\n\n        {/*  Modals used by this page  */}\n        <SupplyModal\n          open={modalsStore.isSupplyModalActive}\n          closeModal={() => modalsStore.hideSupplyModal()}\n        />\n        <BorrowModal\n          open={modalsStore.isBorrowModalActive}\n          closeModal={() => modalsStore.hideBorrowModal()}\n        />\n        <ConnectedCollateralModal\n          open={modalsStore.isCollateralModalActive}\n          closeModal={() => modalsStore.hideCollateralModal()}\n        />\n\n        <ConnectedIncentiveModal\n          closeModal={() => modalsStore.hideIncentiveModal()}\n          open={modalsStore.isInventiveModalActive}\n        />\n      </div>\n    );\n  }\n);\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { ILendingNetworkGist } from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TokenIcon } from \"../../components/icons/TokenIcon\";\nimport {\n  BACKGROUND_DARK_COLOR,\n  BACKGROUND_LIGHT_COLOR,\n  TEXT_ON_DARK,\n  TEXT_ON_LIGHT,\n} from \"../../theme/themeConstants\";\n\ninterface IProps {\n  networkGist: ILendingNetworkGist;\n  onViewNetwork: (networkId: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: \"0.5rem\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    // flex: 1,\n    maxWidth: \"100%\",\n    width: \"15rem\",\n    backgroundColor: BACKGROUND_LIGHT_COLOR,\n    borderRadius: \"5%\",\n    // backgroundColor: \"rgba(0,0,0,0.1)\",\n  },\n  title: {\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    color: TEXT_ON_LIGHT,\n  },\n  cardHeader: {\n    // textAlign: \"center\",\n    fontWeight: \"bold\",\n    // color: TEXT_ON_LIGHT,\n    paddingTop: \"0.5rem\",\n    paddingBottom: \"0.5rem\",\n    paddingLeft: \"0.5rem\",\n    paddingRight: \"0.5rem\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"space-between\",\n    alignItems: \"Center\",\n    backgroundColor: BACKGROUND_DARK_COLOR,\n    color: TEXT_ON_DARK,\n  },\n  alphaMessage: {\n    fontWeight: \"bold\",\n    color: \"#feb276\",\n    userSelect: \"none\",\n    // animation: \"$MoveUpDown 1.5s linear infinite\",\n    position: \"relative\",\n  },\n  content: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    color: TEXT_ON_LIGHT,\n  },\n  lnAsset: {\n    margin: \"0.1rem\",\n    height: \"2rem\",\n    width: \"2rem\",\n  },\n  zoom: {\n    paddingTop: 10,\n    cursor: \"pointer\",\n    transition: \"all ease 400ms\",\n    \"&:hover\": {\n      // height: \"2rem\",\n      // width: \"2rem\",\n      transform: \"scale(1.1)\",\n    },\n  },\n\n  \"@keyframes MoveUpDown\": {\n    \"0%, 100%\": {\n      bottom: \"-2px\",\n    },\n    \"50%\": {\n      bottom: \"2px\",\n    },\n  },\n}));\n\nexport const NetworkListItem: React.FC<IProps> = observer((props) => {\n  const classes = useStyles();\n  const { onViewNetwork, networkGist } = props;\n  const { id, name, assets, distributionAssetParameters } = networkGist;\n  const { symbol } = distributionAssetParameters;\n  // TODO : Fix styling\n  return (\n    <Card className={classes.card}>\n      {/*<CardHeader title={name} className={classes.title} />*/}\n      <div className={classes.cardHeader}>\n        <Typography variant={\"h6\"}>{name}</Typography>\n        <Typography variant={\"body2\"} className={classes.alphaMessage}>\n          In alpha\n        </Typography>\n      </div>\n      {/*<Typography*/}\n      {/*  variant={\"body1\"}*/}\n      {/*  style={{ fontWeight: \"bold\", fontFamily: \"Avenir\" }}*/}\n      {/*>*/}\n      {/*  In alpha*/}\n      {/*</Typography>*/}\n      {/*<Typography variant={\"body2\"}>Please try with small amounts</Typography>*/}\n      <CardContent style={{ width: \"100%\" }}>\n        {/*{assets.map((a) => (*/}\n        {/*  <div key={a.symbol}>{a.name}</div>*/}\n        {/*))}*/}\n        <div\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n          }}\n        >\n          {assets.map((a) => (\n            <TokenIcon\n              symbol={a.symbol}\n              key={a.symbol}\n              extraClasses={[classes.lnAsset, classes.zoom]}\n            />\n          ))}\n        </div>\n      </CardContent>\n      <CardActions\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          backgroundColor: BACKGROUND_DARK_COLOR,\n          width: \"100%\",\n        }}\n      >\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={() => onViewNetwork(id)}\n        >\n          Enter Network\n        </Button>\n      </CardActions>\n    </Card>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { ILendingNetworkGist } from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport { NetworkListItem } from \"./NetworkListItem\";\nimport { SingleLNStore } from \"../../store/multiInstanceStores/SingleLNStore\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    display: \"flex\",\n    margin: spacing(4, 8),\n    justifyContent: \"center\",\n  },\n}));\n\ninterface IProps {\n  lendingNetworksGists: ILendingNetworkGist[];\n  onViewNetwork: (networkId: string) => void;\n}\n\nexport const NetworksList: React.FC<IProps> = observer((props) => {\n  const classes = useStyles();\n  const { lendingNetworksGists, onViewNetwork } = props;\n\n  return (\n    <div className={classes.root}>\n      {lendingNetworksGists.map((network) => (\n        <NetworkListItem\n          onViewNetwork={onViewNetwork}\n          networkGist={network}\n          key={network.id}\n        />\n      ))}\n    </div>\n  );\n});\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router\";\nimport { useLendingNetworksStore } from \"../../store/storeHooks\";\nimport { NetworksList } from \"./NetworksList\";\nimport {\n  BACKGROUND_DARK_COLOR,\n  TEXT_ON_LIGHT,\n} from \"../../theme/themeConstants\";\nimport TextTransition, { presets } from \"react-text-transition\";\nimport { ContentContainer } from \"../../components/structure/ContentContainer\";\n\nconst textShadowWidth = 1;\nconst textShadow = `-${textShadowWidth}px -${textShadowWidth}px 0 ${BACKGROUND_DARK_COLOR},\n                    ${textShadowWidth}px -${textShadowWidth}px 0 ${BACKGROUND_DARK_COLOR},\n                     -${textShadowWidth}px ${textShadowWidth}px 0 ${BACKGROUND_DARK_COLOR},\n                      ${textShadowWidth}px ${textShadowWidth}px 0 ${BACKGROUND_DARK_COLOR}`;\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    paddingTop: spacing(10),\n    // backgroundColor: BACKGROUND_DARK_COLOR,\n  },\n  title: {\n    color: TEXT_ON_LIGHT,\n    paddingBottom: spacing(2),\n  },\n  mainMessage: {\n    color: TEXT_ON_LIGHT,\n  },\n  letterO: {\n    margin: \"0.1rem\",\n    color: \"#feb276\",\n    // stroke: \"2px #feb276\",\n    // textShadow:\n    //   \"-2px -2px 0 #feb276, 2px -2px 0 #feb276, -2px 2px 0 #feb276, 2px 2px #feb276\",\n    // textShadow: `-2px -2px 0 ${BACKGROUND_DARK_COLOR}, 2px -2px 0 ${BACKGROUND_DARK_COLOR}, -2px 2px 0 ${BACKGROUND_DARK_COLOR}, 2px 2px 0 ${BACKGROUND_DARK_COLOR}`,\n    textShadow,\n  },\n  letterL: {\n    margin: \"0.1rem\",\n    color: \"#80dae3\",\n    // textShadow:\n    //   \"-2px -2px 0 #80dae3, 2px -2px 0 #80dae3, -2px 2px 0 #80dae3, 2px 2px #80dae3\",\n    // textShadow: `-2px -2px 0 ${BACKGROUND_DARK_COLOR}, 2px -2px 0 ${BACKGROUND_DARK_COLOR}, -2px 2px 0 ${BACKGROUND_DARK_COLOR}, 2px 2px 0 ${BACKGROUND_DARK_COLOR}`,\n    textShadow,\n  },\n  letterA: {\n    margin: \"0.1rem\",\n    color: \"#5053d4\",\n    // textShadow:\n    //   \"-2px -2px 0 #5053d4, 2px -2px 0 #5053d4, -2px 2px 0 #5053d4, 2px 2px #5053d4\",\n    // textShadow: `-2px -2px 0 ${BACKGROUND_DARK_COLOR}, 2px -2px 0 ${BACKGROUND_DARK_COLOR}, -2px 2px 0 ${BACKGROUND_DARK_COLOR}, 2px 2px 0 ${BACKGROUND_DARK_COLOR}`,\n    // textShadow: `-1px -1px 0 ${BACKGROUND_DARK_COLOR}, 1px -1px 0 ${BACKGROUND_DARK_COLOR}, -1px 1px 0 ${BACKGROUND_DARK_COLOR}, 1px 1px 0 ${BACKGROUND_DARK_COLOR}`,\n    textShadow,\n  },\n}));\n\nexport const AllNetworksPage: React.FC = observer(() => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { url } = useRouteMatch();\n  const lendingNetworksStore = useLendingNetworksStore();\n  // const { isLoading, lendingNetworks } = useLendingNetworksStore();\n  const activeLendingNetworkId = lendingNetworksStore.activeLendingNetworkId;\n  // Reset the 'active ln' when entering this page\n  useEffect(() => {\n    console.log(`In effect ${activeLendingNetworkId}`);\n    if (activeLendingNetworkId !== \"\") {\n      lendingNetworksStore.setActiveLn(\"\");\n    }\n  }, [activeLendingNetworkId, lendingNetworksStore]);\n\n  const onViewNetwork = React.useCallback(\n    (networkId: string) => {\n      const targetUrl = `${url}/${networkId}`;\n      history.push(targetUrl);\n    },\n    [history, url]\n  );\n\n  const texts = useMemo(() => {\n    return [\"New\", \"Exciting\"];\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <ContentContainer>\n        <Typography variant=\"h1\" align=\"center\" className={classes.title}>\n          {/*Ola Lending Networks*/}\n          <span className={classes.letterO}>O</span>\n          <span className={classes.letterL}>l</span>\n          <span className={classes.letterA}>a </span>\n          <span className={classes.letterO}>F</span>\n          <span className={classes.letterL}>i</span>\n          <span className={classes.letterA}>n</span>\n          <span className={classes.letterO}>a</span>\n          <span className={classes.letterL}>n</span>\n          <span className={classes.letterA}>c</span>\n          <span className={classes.letterO}>e</span>\n        </Typography>\n\n        {/*<Typography variant=\"h5\" align=\"center\" className={classes.mainMessage}>*/}\n        {/*  <span className={classes.letterO}>Peer</span>*/}\n        {/*  <span className={classes.letterL}> to</span>*/}\n        {/*  <span className={classes.letterA}> Pool </span>*/}\n        {/*  Lending*/}\n        {/*</Typography>*/}\n        {/*<br />*/}\n        {/*<Typography variant={\"h6\"} align={\"center\"}>*/}\n        {/*  Curently in alpha*/}\n        {/*</Typography>*/}\n        {lendingNetworksStore.isLoading ? (\n          <Typography>Loading...</Typography>\n        ) : (\n          <NetworksList\n            lendingNetworksGists={lendingNetworksStore.allLNGists}\n            onViewNetwork={onViewNetwork}\n          />\n        )}\n      </ContentContainer>\n    </div>\n  );\n});\n","import { makeStyles, Paper } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { LendingNetworkPage } from \"./LendingNetworkPage/LendingNetworkPage\";\nimport { AllNetworksPage } from \"./AllNetworksPage/AllNetworksPage\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    borderRadius: 16,\n    width: \"80%\",\n    minHeight: 400,\n    maxWidth: 1200,\n    padding: spacing(2),\n    marginTop: spacing(4),\n    marginBottom: spacing(4),\n    margin: \"0 auto\",\n  },\n}));\n\nexport const Main: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    // <Paper elevation={22} className={classes.root}>\n    <Switch>\n      <Route path=\"/networks\" exact component={AllNetworksPage} />\n      <Route\n        path=\"/networks/:network_id\"\n        render={({ match }) => (\n          <LendingNetworkPage networkId={match.params.network_id} />\n        )}\n      />\n      <Redirect to=\"/networks\" />\n    </Switch>\n    // </Paper>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Header } from \"./components/header/Header\";\nimport { Main } from \"./pages/Main\";\nimport { observer } from \"mobx-react\";\nimport { useLendingNetworksStore } from \"./store/storeHooks\";\nimport { TLNContractsAddresses } from \"./services/Services\";\n\n// TODO : Handle tx failing gracefully.\n\nexport const App = observer(() => {\n  // This part is responsible for keeping the LN services aimed at the right LN contracts\n  const lendingNetworksStore = useLendingNetworksStore();\n  const firstLNParamsUnitrollerAddress =\n    lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress || \"\";\n  // const lnContractsAddresses = useMemo(() => {\n  //   console.log(\"Calculatin ln addresses\");\n  //   // console.log(firstLNParamsUnitrollerAddress);\n  //   const addresses: TLNContractsAddresses = {\n  //     unitrollerAddress:\n  //       lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress ||\n  //       \"\",\n  //   };\n  //\n  //   return addresses;\n  // }, [lendingNetworksStore.lendingNetworkParameters]);\n\n  // const addresses: TLNContractsAddresses = {\n  //   unitrollerAddress:\n  //     lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress || \"\",\n  // };\n\n  // useSyncLNServices();\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL || \"/\"}>\n      <Header />\n      <Main />\n    </BrowserRouter>\n  );\n});\n","import createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport responsiveFontSizes from \"@material-ui/core/styles/responsiveFontSizes\";\nimport {\n  BACKGROUND_DARK_COLOR,\n  BRAND_MAIN_COLOR,\n  TEXT_ON_LIGHT,\n} from \"./themeConstants\";\n\nexport const baseTheme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      primary: {\n        // main: \"#1a237e\",\n        main: BRAND_MAIN_COLOR,\n      },\n      secondary: {\n        main: \"#0091ea\",\n      },\n      text: {\n        // primary: \"#141E27\",\n        primary: TEXT_ON_LIGHT,\n      },\n      background: {\n        default: BACKGROUND_DARK_COLOR,\n      },\n    },\n  })\n);\n","import Web3 from \"web3\";\nimport { ICryptoWalletConnectionService } from \"./ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"./IEthereumProvider\";\nimport { fromWei } from \"web3-utils\";\n\n// TODO : FUTURE : O.L : Change all ethereum.<call> to the new standard events format.\n//                        Consider using AbstractProvider\nexport class CryptoWalletConnectionService\n  implements ICryptoWalletConnectionService {\n  private readonly web3?: Web3;\n  public readonly hasEthereumProvider: boolean;\n  public readonly hasEventsSupport: boolean;\n  public readonly isMetamaskInstalled: boolean;\n  public readonly isSemiCompliantEthereumProviderInstalled: boolean;\n\n  constructor(private ethereum: IEthereumProvider) {\n    this.hasEthereumProvider = this.ethereum !== undefined;\n\n    // Distinguishes between installed ethereum providers\n    this.isMetamaskInstalled =\n      this.hasEthereumProvider && !!this.ethereum.isMetaMask;\n    this.isSemiCompliantEthereumProviderInstalled =\n      this.hasEthereumProvider && !this.ethereum.isMetaMask;\n\n    if (this.hasEthereumProvider) {\n      this.web3 = new Web3(this.ethereum as any);\n    }\n\n    const onFunction = this.hasEthereumProvider ? this.ethereum.on : undefined;\n    this.hasEventsSupport = onFunction !== undefined && onFunction !== null;\n  }\n\n  public async requestConnectionPermission(): Promise<boolean> {\n    try {\n      // await this.ethereum.enable();\n      // @ts-ignore\n      await this.ethereum.request({ method: \"eth_requestAccounts\" });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Getters\n  public getEthereumProvider() {\n    return this.ethereum;\n  }\n\n  public get didUserApproveDappInThePast(): boolean {\n    // DEV_NOTE : O.L : IMPORTANT ! : This currently works with the soon to be deprecated apis of metamask injected 'ethereum'\n    //                                and is not part of the properties in the official types of web3.\n    //                                We need to check and find a better way to detect if the user has already approved wallet access.\n    // @ts-ignore\n    return this.isMetamaskInstalled && !!this.ethereum.selectedAddress;\n  }\n\n  async getIsMainNetwork(): Promise<boolean> {\n    return this.isMetamaskInstalled && this.ethereum.networkVersion === \"1\";\n  }\n\n  // Data \"reading\"\n  async readChainId(): Promise<number> {\n    const chainId = (await this.web3?.eth.getChainId()) || -1;\n    return chainId;\n  }\n\n  async readEthereumBalance(address: string): Promise<number> {\n    const balance = await this.web3?.eth.getBalance(address);\n    const balanceInDecimal = parseInt(fromWei(balance || \"0\"));\n    return balanceInDecimal;\n  }\n\n  async readMainAddress(): Promise<string> {\n    const accounts = (await this.web3?.eth.getAccounts()) || [];\n    return accounts[0];\n  }\n\n  async readCurrentBlockNumber(): Promise<number> {\n    return this.web3?.eth.getBlockNumber() || 0;\n  }\n\n  // Event listeners\n  onMainAddressChange(onChange: (mainAddress: string) => void): () => void {\n    if (!this.hasEventsSupport) {\n      throw new Error(\n        `Cannot subscribe to events with given Ethereum provider`\n      );\n    }\n\n    const listener = (accounts: string[]) => onChange(accounts[0]);\n\n    this.ethereum.on(\"accountsChanged\", listener);\n\n    return () => {\n      this.ethereum.off(\"accountsChanged\", listener);\n    };\n  }\n\n  onChainIdChange(onChange: (chainId: number) => void): () => void {\n    if (!this.hasEventsSupport) {\n      throw new Error(\n        `Cannot subscribe to events with given Ethereum provider`\n      );\n    }\n\n    const listener = (chainId: string) => {\n      console.log(`Typof chainId : ${typeof chainId}`);\n      onChange(parseInt(chainId));\n    };\n\n    this.ethereum.on(\"chainChanged\", listener);\n\n    return () => {\n      this.ethereum.off(\"chainChanged\", listener);\n    };\n  }\n}\n","export const READ_ONLY_ETHEREUM_ENDPOINT =\n  process.env.REACT_APP_READ_ONLY_ETHEREUM_ENDPOINT;\n\nexport const IS_PROD =\n  process.env.REACT_APP_USE_PROD === \"true\" ||\n  process.env.NODE_ENV === \"production\";\n\nexport const IS_DEV = !IS_PROD;\n","export async function fetchLocalJson<T = any>(localPath: string): Promise<T> {\n  const fetchRes = await fetch(`${process.env.PUBLIC_URL}/${localPath}`);\n  const json = (await fetchRes.json()) as T;\n\n  return json;\n}\n","export const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nexport const NATIVE_COIN_ASSET_ADDRESS =\n  \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\";\n","import { ILendingNetworkParameters } from \"./ILendingNetworksService\";\nimport { ZERO_ADDRESS } from \"../../constants/constantAddresses\";\n\nconst wrappedFuseAddressOnRopsten =\n  \"0x6b778cA46F05ac6BfEBC7c3C19E079EC16f72b33\";\n\nexport const FUSE_ON_ROPSTEN: ILendingNetworkParameters = {\n  name: \"Fuse Ropsten\",\n  lnHomePage: \"https://www.fuse.io\",\n  id: \"0x9c518a98b22B3B81ED063cf4E604CeAb8c3a1b7B\",\n  unitrollerAddress: \"0xf7772Fb332032f042fE61604E5395893A62A1f24\",\n  maximillionAddress: \"0x9C8B6ce3a955437a9546B8bb00899E6A82a91c97\",\n  chainId: \"3\",\n  assets: [\n    {\n      symbol: \"WBTC\",\n      name: \"Wrapped BTC\",\n      address: \"0xA5a9320AE361C25C39681F9D86F6018ee9236523\",\n      // decimals: 8, DEV_NOTE : Suppose to be 8, uncomment when deploying fix\n      decimals: 8,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"ETH\",\n      name: \"Ether\",\n      address: ZERO_ADDRESS,\n      decimals: 18,\n      isNativeCoin: true,\n    },\n    {\n      symbol: \"USDC\",\n      name: \"USD Coin\",\n      address: \"0x180F8670Dd6367C79d08E1d3017F7Cd175dDa163\",\n      // decimals: 6,  DEV_NOTE : Suppose to be 6, uncomment when deploying fix\n      decimals: 6,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"WFUSE\",\n      name: \"Wrapped Fuse\",\n      address: wrappedFuseAddressOnRopsten,\n      decimals: 18,\n      isNativeCoin: false,\n    },\n  ],\n  distributionAssetParameters: {\n    symbol: \"WFUSE\",\n    name: \"Wrapped Fuse\",\n    address: wrappedFuseAddressOnRopsten,\n    decimals: 18,\n    isNativeCoin: false,\n  },\n};\n\nexport const FUSE_ALPHA: ILendingNetworkParameters = {\n  name: \"Fuse Alpha\",\n  lnHomePage: \"https://www.fuse.io\",\n  id: \"0x2cBBD5125087eB697a6A44098323204a32dFBed6\",\n  unitrollerAddress: \"0x4E91A254263180210f383937EfD2eCCFE7BdA585\",\n  maximillionAddress: \"0x57378Bd0FfD53155F58DD5Ff71A68e73A9b5fAcb\",\n  chainId: \"122\",\n  assets: [\n    {\n      symbol: \"WBTC\",\n      name: \"Wrapped BTC\",\n      address: \"0x33284f95ccb7B948d9D352e1439561CF83d8d00d\",\n      decimals: 8,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"WETH\",\n      name: \"Wrapped Ether\",\n      address: \"0xd8Bf72f3e163B9CF0C73dFdCC316417A5ac20670\",\n      decimals: 18,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"USDC\",\n      name: \"USD Coin\",\n      address: \"0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5\",\n      decimals: 6,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"FUSE\",\n      name: \"Fuse\",\n      address: ZERO_ADDRESS,\n      decimals: 18,\n      isNativeCoin: true,\n    },\n  ],\n  distributionAssetParameters: {\n    symbol: \"WFUSE\",\n    name: \"Wrapped Fuse\",\n    address: \"0x714005Da6A90F59dD2cF74560ecF4A4BeD5F088A\",\n    decimals: 18,\n    isNativeCoin: false,\n  },\n};\n\nexport const LendingNetworksParam: ILendingNetworkParameters[] = [\n  // FUSE_ON_ROPSTEN,\n  FUSE_ALPHA,\n];\n","import {\n  ILendingNetworkGist,\n  ILendingNetworkLiveState,\n  ILendingNetworkParameters,\n  ILendingNetworksService,\n} from \"./ILendingNetworksService\";\nimport { IS_DEV } from \"../../configs\";\nimport { fetchLocalJson } from \"../networkActions\";\nimport LocalNetworkDevLNAddresses from \"../../solidityInterfaces/localLNaddresses.json\";\n// TODO : CRITICAL almost : Add 'decimals on chain' to make sure that decimals are right for each chain.\nimport LocalNetworkDevTokensAddresses from \"../../solidityInterfaces/localTokensAddresses.json\";\nimport { NATIVE_COIN_ASSET_ADDRESS } from \"../../constants/constantAddresses\";\nimport { LendingNetworksParam } from \"./lendingNetworksParams\";\n\nexport class LendingNetworksService implements ILendingNetworksService {\n  async fetchALlLendingNetworksParameters(): Promise<\n    ILendingNetworkParameters[]\n  > {\n    const lnParams: ILendingNetworkParameters[] = [];\n\n    if (IS_DEV) {\n      const devNetworksgist = await this.fetchDevNetworkGist();\n\n      lnParams.push(...devNetworksgist);\n    } else {\n      lnParams.push(...LendingNetworksParam);\n    }\n\n    return lnParams;\n  }\n\n  async fetchAllLendingNetworksGists(): Promise<ILendingNetworkGist[]> {\n    return [];\n    const allLNsGists: ILendingNetworkGist[] = [];\n  }\n\n  async fetchLendingNetworkLiveState(\n    networkId: string\n  ): Promise<ILendingNetworkLiveState> {\n    return {\n      participatingSuppliers: 0,\n      tvl: 0,\n    };\n  }\n\n  private async fetchDevNetworkGist() {\n    const devNetworksgist = await fetchLocalJson<ILendingNetworkGist[]>(\n      \"lnParameters/devLnParams.json\"\n    );\n\n    // DEV_NOTE : We have one, and we want to at least semi-dynamically get the addresses\n    devNetworksgist[0].id = LocalNetworkDevLNAddresses.unitroller;\n    devNetworksgist[0].unitrollerAddress =\n      LocalNetworkDevLNAddresses.unitroller;\n    devNetworksgist[0].maximillionAddress =\n      LocalNetworkDevLNAddresses.maxmimilion;\n    devNetworksgist[0].distributionAssetParameters.address =\n      LocalNetworkDevTokensAddresses[\"WFUSE\"];\n\n    for (let assetInMarket of devNetworksgist[0].assets) {\n      const { symbol } = assetInMarket;\n      // @ts-ignore\n      const assetAddress = LocalNetworkDevTokensAddresses[symbol];\n      const assetAddressToUse =\n        symbol === \"FUSE\" ? NATIVE_COIN_ASSET_ADDRESS : assetAddress;\n\n      if (!assetAddressToUse) {\n        // This quick-fail will save some time debugging\n        throw new Error(`No addres for asset ${symbol}`);\n      } else {\n        assetInMarket.address = assetAddressToUse;\n      }\n    }\n\n    return devNetworksgist;\n  }\n}\n","/**\n * This functions takes a tuple returned from an 'ethers' contract object and returns it in a pure object form.\n */\nexport function etheresStructResponseToObject<T extends object>(\n  ethersStructResponse: any\n): T {\n  const obj = {};\n\n  for (let key in ethersStructResponse) {\n    // DEV_NOTE : We assume that all numeric keys belongs to the array and ignore them\n    if (Number.isNaN(parseInt(key))) {\n      // @ts-ignore\n      obj[key] = ethersStructResponse[key];\n    }\n  }\n\n  return obj as T;\n}\n","import { Contract } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport UniswapAnchoredViewJson from \"../../../solidityInterfaces/UniswapAnchoredView.json\";\nimport {\n  IUniswapAnchoredViewService,\n  TTokenConfig,\n} from \"./IUniswapAnchoredViewService\";\nimport { UniswapAnchoredView } from \"../../../solidityInterfaces/UniswapAnchoredView\";\nimport { etheresStructResponseToObject } from \"../contractsIntegrationUtils\";\n\nexport class UniswapAnchoredViewService implements IUniswapAnchoredViewService {\n  private uniswapAnchoredViewContract: UniswapAnchoredView;\n\n  constructor(\n    uniswapAnchoredViewAddress: string,\n    signerOrProvider?: Signer | Provider\n  ) {\n    this.uniswapAnchoredViewContract = new Contract(\n      uniswapAnchoredViewAddress,\n      UniswapAnchoredViewJson.abi,\n      signerOrProvider\n    ) as UniswapAnchoredView;\n  }\n\n  /**\n   * @ DEV_NOTE : Basic example for contract reading function.\n   */\n  async getTokenConfigBySymbol(tokenSymbol: string): Promise<TTokenConfig> {\n    return etheresStructResponseToObject(\n      await this.uniswapAnchoredViewContract.getTokenConfigBySymbol(tokenSymbol)\n    );\n  }\n}\n","import { IEthereumProvider } from \"../services/cryptoWalletConnectionService/IEthereumProvider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { ethers } from \"ethers\";\nimport { READ_ONLY_ETHEREUM_ENDPOINT } from \"../configs\";\n\nexport function getSignerOrProvider(\n  ethereumProvider?: IEthereumProvider\n): Signer | Provider {\n  let signerOrProvider;\n\n  // DEV_NOTE: This should allow us to continue reading\n  if (ethereumProvider) {\n    // @ts-ignore\n    signerOrProvider = new ethers.providers.Web3Provider(ethereumProvider);\n  } else {\n    signerOrProvider = new ethers.providers.JsonRpcProvider(\n      // TODO: Change this to network specific values (mainnet, kovan etc...)\n      READ_ONLY_ETHEREUM_ENDPOINT\n    );\n  }\n\n  const signer = signerOrProvider.getSigner();\n  if (signer) {\n    signer\n      .getAddress()\n      .then((address) => console.log(`Signer is ${address}`))\n      .catch((e) => console.log(`Signer exists but we cannot get address`));\n    signerOrProvider = signer;\n  } else {\n    console.log(`Provider only`);\n  }\n\n  return signerOrProvider;\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport ComptrollerJson from \"../../../solidityInterfaces/Comptroller.json\";\nimport { IComptrollerService } from \"./IComptrollerService\";\nimport { Comptroller } from \"../../../solidityInterfaces/Comptroller\";\nimport { toJS } from \"mobx\";\n\nexport class ComptrollerService implements IComptrollerService {\n  // We will use the unitroller address but with the 'comptroller' interface (As it is only a proxy)\n  private unitrollerProxyContract: Comptroller;\n\n  constructor(unitrollerAddress: string, signerOrProvider: Signer | Provider) {\n    console.log(\"Before init uni\");\n\n    this.unitrollerProxyContract = new Contract(\n      unitrollerAddress,\n      ComptrollerJson.abi,\n      signerOrProvider\n    ) as Comptroller;\n\n    console.log(\"Initialized unitroller\");\n  }\n\n  public getComptrollerProxyAddress(): string {\n    return this.unitrollerProxyContract.address;\n  }\n\n  // TODO : This is not called for now, check if it is needed and then check if it works\n  public updateUnitrollerAddress(unitrollerAddress: string): void {\n    const after = this.unitrollerProxyContract.attach(unitrollerAddress);\n    console.log(`Param is ${unitrollerAddress}`);\n    console.log(`Result address is ${toJS(after.address)}`);\n    console.log(\n      `Property address is ${toJS(this.unitrollerProxyContract.address)}`\n    );\n  }\n\n  /**\n   * @ DEV_NOTE : All of the CTokens of this comptroller\n   */\n  async getAllMarkets(): Promise<string[]> {\n    const markets = await this.unitrollerProxyContract.getAllMarkets();\n    return markets;\n  }\n\n  async enterMarkets(cTokens: string[]): Promise<ContractTransaction> {\n    return this.unitrollerProxyContract.enterMarkets(cTokens);\n    // const res = await this.unitrollerProxyContract.callStatic.enterMarkets(\n    //   cTokens\n    // );\n    //\n    // console.log(`enter markets : ${res}`);\n    //\n    // return (null as any) as ContractTransaction;\n  }\n  async exitMarket(cToken: string): Promise<ContractTransaction> {\n    return this.unitrollerProxyContract.exitMarket(cToken);\n  }\n\n  async claimIncentiveFromAllMarkets(\n    account: string\n  ): Promise<ContractTransaction> {\n    return this.unitrollerProxyContract[\"claimComp(address)\"](account);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport ERC20Json from \"../../../solidityInterfaces/ERC20.json\";\nimport { ERC20 } from \"../../../solidityInterfaces/ERC20\";\nimport { IErc20Service } from \"./IErc20Service\";\n\nexport class Erc20Service implements IErc20Service {\n  private erc20Contract: ERC20;\n\n  constructor(erc20Address: string, signerOrProvider: Signer | Provider) {\n    this.erc20Contract = new Contract(\n      erc20Address,\n      ERC20Json.abi,\n      signerOrProvider\n    ) as ERC20;\n  }\n\n  public async readBalance(address: string): Promise<BigNumber> {\n    return this.erc20Contract.balanceOf(address);\n  }\n\n  public async readAllowance(\n    ownerAddress: string,\n    spenderAddress: string\n  ): Promise<BigNumber> {\n    return this.erc20Contract.allowance(ownerAddress, spenderAddress);\n  }\n\n  public async approve(\n    spenderAddress: string,\n    amount: BigNumber\n  ): Promise<ContractTransaction> {\n    return this.erc20Contract.approve(spenderAddress, amount);\n  }\n}\n","import { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { IErc20BuilderService } from \"./IErc20BuilderService\";\nimport { IErc20Service } from \"./IErc20Service\";\nimport { Erc20Service } from \"./Erc20Service\";\n\nexport class Erc20BuilderService implements IErc20BuilderService {\n  constructor(private signerOrProvider: Signer | Provider) {}\n\n  buildErc20Service(erc20Address: string): IErc20Service {\n    return new Erc20Service(erc20Address, this.signerOrProvider);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CErc20Json from \"../../../solidityInterfaces/CErc20.json\";\nimport { ICErc20Service } from \"./ICErc20Service\";\nimport { CErc20 } from \"../../../solidityInterfaces/CErc20\";\n\nexport class CErc20Service implements ICErc20Service {\n  private cErc20Contract: CErc20;\n\n  constructor(erc20Address: string, signerOrProvider: Signer | Provider) {\n    this.cErc20Contract = new Contract(\n      erc20Address,\n      CErc20Json.abi,\n      signerOrProvider\n    ) as CErc20;\n  }\n\n  public async mint(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.mint(amount);\n  }\n\n  public async withdraw(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.redeemUnderlying(amount);\n  }\n\n  public async withdrawByOTokens(\n    oTokensAmount: BigNumber\n  ): Promise<ContractTransaction> {\n    return this.cErc20Contract.redeem(oTokensAmount);\n  }\n\n  public async borrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.borrow(amount);\n  }\n\n  public async repayBorrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.repayBorrow(amount);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CEtherJson from \"../../../solidityInterfaces/CEther.json\";\nimport MaximillionJson from \"../../../solidityInterfaces/Maximillion.json\";\nimport { ICEtherService } from \"./ICEtherService\";\nimport { CEther } from \"../../../solidityInterfaces/CEther\";\nimport { Maximillion } from \"../../../solidityInterfaces/Maximillion\";\nimport { formatEther, parseEther } from \"ethers/lib/utils\";\n\nexport class CEtherService implements ICEtherService {\n  private cEther: CEther;\n  private maximillion: Maximillion;\n\n  constructor(\n    cEtherAddress: string,\n    maximillionAddress: string,\n    private signerOrProvider: Signer | Provider\n  ) {\n    this.cEther = new Contract(\n      cEtherAddress,\n      CEtherJson.abi,\n      signerOrProvider\n    ) as CEther;\n\n    this.maximillion = new Contract(\n      maximillionAddress,\n      MaximillionJson.abi,\n      signerOrProvider\n    ) as Maximillion;\n  }\n\n  public async mint(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.mint({ value: amount });\n  }\n\n  public async withdraw(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.redeemUnderlying(amount);\n  }\n\n  public async withdrawByOTokens(\n    oTokensAmount: BigNumber\n  ): Promise<ContractTransaction> {\n    return this.cEther.redeem(oTokensAmount);\n  }\n\n  public async borrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.borrow(amount);\n  }\n\n  public async repayBorrow(amount: BigNumber): Promise<ContractTransaction> {\n    throw new Error(`Cannot call 'repayBorrow' for oNative`);\n  }\n\n  public async repayBorrowWithMaximillion(\n    borrowerAddress: string,\n    amount: BigNumber\n  ): Promise<ContractTransaction> {\n    console.log(`CEther repay borrow : ${amount.toString()}`);\n    console.log(`CEther repay borrow : ${formatEther(amount)}`);\n    return this.maximillion.repayBehalf(borrowerAddress, { value: amount });\n  }\n}\n","import { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { ICTokensBuilderService } from \"./ICTokensBuilderService\";\nimport { ICErc20Service } from \"./ICErc20Service\";\nimport { CErc20Service } from \"./CErc20Service\";\nimport { CEtherService } from \"./CEtherService\";\n\nexport class CTokensBuilderService implements ICTokensBuilderService {\n  constructor(private signerOrProvider: Signer | Provider) {}\n\n  buildCErc20Service(cErc20Address: string): ICErc20Service {\n    return new CErc20Service(cErc20Address, this.signerOrProvider);\n  }\n\n  buildCEtherService(cEther: string, maximillion: string): CEtherService {\n    return new CEtherService(cEther, maximillion, this.signerOrProvider);\n  }\n}\n","import localTokensAddressesJson from \"../solidityInterfaces/localTokensAddresses.json\";\n\nexport const SUPPORTED_TOKENS_PER_CHAIN = {\n  // Local Hardhat\n  1337: { ...localTokensAddressesJson },\n  31337: { ...localTokensAddressesJson },\n  // Ethereum mainnet\n  1: {},\n\n  // Fuse mainnet\n  122: null,\n};\n\n// Quick-n-Dirty to get Token names\nexport const SYMBOLS_TO_NAMES = {\n  DAI: \"DAI\",\n  USDC: \"USD Coin\",\n  FUSE: \"Fuse\",\n  BTC: \"Bitcoin\",\n  ETH: \"Ether\",\n  WETH: \"Wrapped Ether\",\n  WBTC: \"Wrapped Bitcoin\",\n  USDT: \"Tether\",\n};\n\nexport const NATIVE_COIN_SYMBOL_PER_CHAIN = {\n  1337: \"FUSE\",\n  31337: \"FUSE\",\n  1: \"ETH\",\n  122: \"FUSE\",\n};\n\n// TODO : SEMI-CRITICAL : Have the right value for each chain.\nconst DAYS_IN_YEAR = 365;\nconst MAINNET_ETHERUM_BLOCKS_PER_YEAR = 2102400;\n\nconst ROPSTEN_BLOCKS_PER_MINUTE = 5;\nconst ROPSTEN_BLOCK_PER_DAY = ROPSTEN_BLOCKS_PER_MINUTE * 60 * 24;\nconst ROPSTEN_BLOCK_PER_YEAR = ROPSTEN_BLOCK_PER_DAY * DAYS_IN_YEAR;\n\nconst FUSE_BLOCKS_PER_MINUTE = 5;\nconst FUSE_BLOCK_PER_DAY = FUSE_BLOCKS_PER_MINUTE * 60 * 24;\nconst FUSE_BLOCK_PER_YEAR = FUSE_BLOCK_PER_DAY * DAYS_IN_YEAR;\n\nexport const DAILY_BLOCK_PER_CHAIN = {\n  // None\n  \"-1\": 0,\n\n  // Local Hardhat\n  1337: FUSE_BLOCK_PER_YEAR,\n  31337: FUSE_BLOCK_PER_YEAR,\n  // Ethereum mainnet\n  1: MAINNET_ETHERUM_BLOCKS_PER_YEAR,\n\n  // Ropsten\n  3: ROPSTEN_BLOCK_PER_YEAR,\n\n  // Rinkby\n  // 4: null,\n\n  // Fuse Mainnet\n  122: FUSE_BLOCK_PER_YEAR,\n\n  // BSC\n  // 97: null,\n};\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  makeObservable,\n  observable,\n  reaction,\n} from \"mobx\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"../services/cryptoWalletConnectionService/IEthereumProvider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getSignerOrProvider } from \"../ethereumConnection/ethereumConnection\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../constants/supportedTokensPerChain\";\n\nexport class CryptoWalletConnectionStore {\n  @observable private walletConnectionRequestApproved: boolean = false;\n\n  @observable public ethereumProvider: IEthereumProvider;\n  @observable public signerOrProvider: Signer | Provider;\n  @observable public hasEthereumProvider: boolean;\n  @observable public hasEventsSupport: boolean;\n\n  @observable public mainAddress: string = \"\";\n  @observable public chainId: number = -1;\n\n  @observable public nativeCoinBalance: number = 0;\n\n  @computed public get blocksPerYear(): number {\n    // @ts-ignore\n    const blocksPerYear = DAILY_BLOCK_PER_CHAIN[this.chainId];\n\n    if (blocksPerYear === undefined) {\n      return 0;\n    }\n\n    return blocksPerYear;\n  }\n\n  private addressCheckingInterval?: NodeJS.Timeout = undefined;\n  reactionToWalletConnection: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletConnectionService: ICryptoWalletConnectionService\n  ) {\n    makeObservable(this);\n\n    this.ethereumProvider = this.cryptoWalletConnectionService.getEthereumProvider();\n    this.signerOrProvider = getSignerOrProvider(this.ethereumProvider);\n    this.hasEthereumProvider =\n      cryptoWalletConnectionService.hasEthereumProvider;\n    this.hasEventsSupport = cryptoWalletConnectionService.hasEventsSupport;\n\n    this.reactionToWalletConnection = reaction(\n      () => this.isConnectedToWallet,\n      async (isConnected) => {\n        if (isConnected) {\n          this.readInformationFromConnectedWallet();\n        }\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n\n    if (this.hasEthereumProvider) {\n      // We will only detect address change if the Ethereum provider can support it\n      if (this.cryptoWalletConnectionService.hasEventsSupport) {\n        console.log(\"Provider has events support\");\n        this.cryptoWalletConnectionService.onMainAddressChange((address) => {\n          console.log(`DETECTED ADDDRESS CHANGE ${address}`);\n          this.setMainAddress(address);\n        });\n\n        this.cryptoWalletConnectionService.onChainIdChange((chainId) => {\n          console.log(`CHAIN-ID CHANGE ${chainId}`);\n          this.setChainId(chainId);\n        });\n      } else {\n        console.log(\"Provider does not have events support\");\n\n        // Else, we will read it one time + set an interval\n        this.addressCheckingInterval = setInterval(\n          () => this.refreshState(),\n          1000\n        );\n      }\n    }\n  }\n\n  @computed\n  public get isConnectedToWallet(): boolean {\n    return (\n      this.hasEthereumProvider &&\n      (this.cryptoWalletConnectionService.didUserApproveDappInThePast ||\n        this.walletConnectionRequestApproved)\n    );\n  }\n\n  public async refreshState() {\n    console.log(\"REFRESH-STATE\");\n    await this.readInformationFromConnectedWallet();\n  }\n\n  public async askToConnect(): Promise<boolean> {\n    if (this.isConnectedToWallet) {\n      return true;\n    } else {\n      const permissionGranted = await this.cryptoWalletConnectionService.requestConnectionPermission();\n      this.setWalletConnectionRequestApproved(permissionGranted);\n\n      return this.walletConnectionRequestApproved;\n    }\n  }\n\n  private async readInformationFromConnectedWallet() {\n    // Chain Id\n    const chainId = await this.cryptoWalletConnectionService.readChainId();\n    this.setChainId(chainId);\n\n    // Wallet address\n    const walletAddress = await this.cryptoWalletConnectionService.readMainAddress();\n    this.setMainAddress(walletAddress);\n\n    // Wallet balance\n    const walletBalance = await this.cryptoWalletConnectionService.readEthereumBalance(\n      walletAddress\n    );\n    this.setNativeCoinBalance(walletBalance);\n  }\n\n  @action(\"setWalletConnectionRequestApproved\")\n  private setWalletConnectionRequestApproved(requestApproved: boolean) {\n    this.walletConnectionRequestApproved = requestApproved;\n  }\n\n  @action(\"setMainAddress\")\n  private setMainAddress(mainAddress: string) {\n    this.mainAddress = mainAddress;\n  }\n\n  @action(\"setChainId\")\n  private setChainId(chainId: number) {\n    this.chainId = chainId;\n  }\n\n  @action(\"setNativeCoinBalance\")\n  private setNativeCoinBalance(nativeCoinBalance: number) {\n    console.log({ nativeCoinBalance });\n    this.nativeCoinBalance = nativeCoinBalance;\n  }\n}\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  observable,\n  ObservableMap,\n  reaction,\n} from \"mobx\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { PromiEvent, TransactionReceipt } from \"web3-core\";\nimport { JSON_RPC_ERROR_CODES } from \"../constants/ethereumErrorCodes\";\nimport {\n  NATIVE_COIN_SYMBOL_PER_CHAIN,\n  SUPPORTED_TOKENS_PER_CHAIN,\n  SYMBOLS_TO_NAMES,\n} from \"../constants/supportedTokensPerChain\";\nimport {\n  ITokensLensService,\n  TErc20Meta,\n} from \"../services/contractsIntegration/TokensLensService/ITokensLensService\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { ICompoundLensService } from \"../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { IErc20BuilderService } from \"../services/contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { ICTokensBuilderService } from \"../services/contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport { SystemStore } from \"./SystemStore\";\n\nexport type TTokenMetaWithBalance = TErc20Meta & {\n  balance: BigNumber;\n  name: string;\n  balanceInUnits: number;\n};\n\nexport type TAssetAmount = {\n  rawAmount: BigNumber;\n  amountInUnits: number;\n};\n\nexport class AccountStore {\n  @observable public contractParametersDoneLoading = false;\n  @observable public contractParametersErrorLoading = false;\n  @observable public doneLoading = false;\n  @observable public errorLoading = false;\n\n  // Symbol -> TokenMetaWithBalance\n  @observable public tokensWithBalances: ObservableMap<\n    string,\n    TTokenMetaWithBalance\n  > = observable(new Map<string, TTokenMetaWithBalance>());\n\n  // Spender -> token-address -> TAssetAmount\n  @observable public allowances: ObservableMap<\n    string,\n    Map<string, TAssetAmount>\n  > = observable(new Map<string, Map<string, TAssetAmount>>());\n\n  // TODO : Move tx's state to a different store\n  @observable\n  public txPending = false;\n  @observable public txHadError = false;\n  @observable public txCanceled = false;\n\n  /**\n   * For better DX\n   */\n  @computed get symbolsToUnits(): Record<string, number> {\n    console.log(\"Computing s2u\");\n    const s2u = Array.from(this.tokensWithBalances.entries()).reduce(\n      (obj, cur) => {\n        const [symbol, metaWithBalances] = cur;\n        obj[symbol] = metaWithBalances.balanceInUnits;\n\n        return obj;\n      },\n      {} as Record<string, number>\n    );\n\n    return s2u;\n  }\n\n  private addressChangeReaction: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private systemStore: SystemStore,\n    private lendingNetworksStore: LendingNetworksStore,\n    private erc20BuilderService: IErc20BuilderService,\n    private cTokensBuilderService: ICTokensBuilderService\n  ) {\n    this.addressChangeReaction = reaction(\n      () => [\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n        this.lendingNetworksStore.activeLNStore as SingleLNStore,\n      ],\n      async ([chainId, address, activeLNStoreId]) => {\n        this.setDoneLoading(false);\n        await this.reactToConnectedChainOrAddressChanged(\n          // DEV_NOTE : We add 'as' because TS thinks mixes the string and number in the array\n          chainId as number,\n          address as string,\n          (activeLNStoreId as SingleLNStore) || undefined\n        );\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Computed values ****\n\n  // **** Contract interactions ****\n  private async handlePromievent(\n    promievent: PromiEvent<TransactionReceipt>,\n    name = \"A promievent\"\n  ): Promise<TransactionReceipt | undefined> {\n    this.resetTxIndicators();\n\n    // Indicate tx is pending\n    this.setTxPending(true);\n    console.log(`Waiting for promievent of ${name}`);\n\n    try {\n      const res = await promievent;\n      console.log(`Got Results for promievent of ${name}`);\n      return res;\n    } catch (e) {\n      if (\n        (e as any).code === JSON_RPC_ERROR_CODES.provider.userRejectedRequest\n      ) {\n        this.setTxCanceled(true);\n      } else {\n        throw e;\n      }\n    } finally {\n      this.setTxPending(false);\n    }\n  }\n\n  public async approveErc20Usage(\n    erc20Address: string,\n    spender: string,\n    amount: BigNumber\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(\n      `Approving ${amount.toString()} for ${spender} on ${erc20Address}`\n    );\n    const contractInteraction = await this.erc20BuilderService\n      .buildErc20Service(erc20Address)\n      .approve(spender, amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async supplyToMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Supplying ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(\n          cTokenAddress,\n          maximillionAddress\n        )\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.mint(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async withdrawFromMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Withdrawing ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(\n          cTokenAddress,\n          maximillionAddress\n        )\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.withdraw(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async withdrawFromMarketByOTokens(\n    cTokenAddress: string,\n    oTokensAmount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(\n      `Withdrawing all (${oTokensAmount.toString()} oTokens) from market ${cTokenAddress}`\n    );\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(\n          cTokenAddress,\n          maximillionAddress\n        )\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.withdrawByOTokens(\n      oTokensAmount\n    );\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async borrowFromMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Borrowing ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(\n          cTokenAddress,\n          maximillionAddress\n        )\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.borrow(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async repayToMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Repaying ${amount.toString()} to market ${cTokenAddress}`);\n    let contractTransaction;\n\n    if (isNativeCoin) {\n      const cNativeService = this.cTokensBuilderService.buildCEtherService(\n        cTokenAddress,\n        maximillionAddress\n      );\n\n      contractTransaction = await cNativeService.repayBorrowWithMaximillion(\n        this.cryptoWalletIntegrationStore.mainAddress,\n        amount\n      );\n    } else {\n      const cTokenService = this.cTokensBuilderService.buildCErc20Service(\n        cTokenAddress\n      );\n      contractTransaction = await cTokenService.repayBorrow(amount);\n    }\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    const receipt = await contractTransaction\n      .wait()\n      .then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    // return receipt;\n    return contractTransaction;\n  }\n\n  // **** Current address changed ****\n\n  private async reactToConnectedChainOrAddressChanged(\n    chainId: number,\n    currentAddress: string,\n    activeLnStore?: SingleLNStore\n  ) {\n    if (currentAddress) {\n      if (this.cryptoWalletIntegrationStore.hasEventsSupport) {\n        this.refreshAccountListeners(currentAddress);\n      }\n\n      try {\n        await this.refreshDataForAccount(\n          chainId,\n          currentAddress,\n          this.systemStore.nativeCoinSymbol,\n          activeLnStore\n        );\n\n        // if\n      } catch (e) {\n        this.failLoadingProcess(e);\n        console.error(\n          \"Error in reacting to address change in Orbs Account Store\",\n          e\n        );\n      }\n    }\n  }\n\n  // **** Data reading and setting ****\n\n  /**\n   * DEV_NOTE : Move this to a dedicated 'tx's store that will handle tx and state refreshment.\n   */\n  public async manuallyUpdateAllStores() {\n    if (this.lendingNetworksStore.activeLNStore) {\n      this.lendingNetworksStore.activeLNStore.refreshFromOutside();\n    }\n    await this.manuallyReadAccountData();\n  }\n\n  public async manuallyReadAccountData() {\n    try {\n      await this.refreshDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n        this.systemStore.nativeCoinSymbol,\n        this.lendingNetworksStore.activeLNStore\n      );\n    } catch (e) {\n      this.failLoadingProcess(e);\n      console.error(\n        \"Error in manually reading address data in Account Store\",\n        e\n      );\n    }\n  }\n\n  private async refreshDataForAccount(\n    chainId: number,\n    accountAddress: string,\n    nativeCoinSymbol: string,\n    activeLnStore?: SingleLNStore\n  ) {\n    console.log(\n      `reading data for ${accountAddress} on ${chainId} for ln ${activeLnStore?.id}`\n    );\n    // Clear old data\n    this.clearAllAccountData();\n  }\n\n  private clearAllAccountData() {\n    this.clearTokenBalancesMap();\n  }\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  private async refreshAccountListeners(accountAddress: string) {\n    this.cancelAllCurrentSubscriptions();\n  }\n\n  private cancelAllCurrentSubscriptions() {}\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private resetTxIndicators() {\n    this.setTxPending(false);\n    this.setTxHadError(false);\n    this.setTxCanceled(false);\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setTxPending\")\n  private setTxPending(txPending: boolean) {\n    this.txPending = txPending;\n  }\n\n  @action(\"setTxCanceled\")\n  private setTxCanceled(txCanceled: boolean) {\n    this.txCanceled = txCanceled;\n  }\n\n  @action(\"setTxHadError\")\n  private setTxHadError(txHadError: boolean) {\n    this.txHadError = txHadError;\n  }\n\n  @action(\"clearTokenBalancesMap\")\n  private clearTokenBalancesMap() {\n    this.tokensWithBalances.clear();\n  }\n\n  @action(\"replaceTokenBalancesMap\")\n  private replaceTokenBalancesMap(\n    tokensWithBalancesMap: Map<string, TTokenMetaWithBalance>\n  ) {\n    this.tokensWithBalances.replace(tokensWithBalancesMap);\n  }\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\n\nexport type TAssetInMarketParameters = {\n  name: string;\n  symbol: string;\n  address: string;\n  decimals: number;\n  isNativeCoin: boolean;\n};\n\nexport const EMPTY_ASSET_IN_MARKET_PARAMETERS: TAssetInMarketParameters = {\n  address: \"\",\n  symbol: \"\",\n  name: \"\",\n  decimals: 0,\n  isNativeCoin: false,\n};\n\n// \"Parameters\" refers to the unChangeable elements (name, id, tokens, etc..)\n// TODO : Think of a better name\nexport interface ILendingNetworkParameters {\n  id: string;\n  chainId: string;\n  name: string;\n  lnHomePage: string;\n  unitrollerAddress: string;\n  maximillionAddress: string;\n  assets: TAssetInMarketParameters[];\n  distributionAssetParameters: TAssetInMarketParameters;\n}\n\nexport interface ILendingNetworkLiveState {\n  tvl: number;\n  participatingSuppliers: number;\n}\n\nexport interface ILendingNetworkGist\n  extends ILendingNetworkParameters,\n    ILendingNetworkLiveState {}\n\nexport interface ITokenData {\n  cToken: string;\n  cTokenName: string;\n  cTokenSymbol: string;\n  cTokenDecimals: string;\n  exchangeRateCurrent: string;\n  supplyRatePerBlock: string;\n  borrowRatePerBlock: string;\n  reserveFactorMantissa: string;\n  totalBorrows: string;\n  totalReserves: string;\n  totalSupply: string;\n  totalCash: string;\n  isListed: boolean;\n  collateralFactorMantissa: string;\n}\n\nexport interface IUnderlyingMetadata {\n  underlyingAssetAddress: string;\n  underlyingDecimals: string;\n  underlyingName: string;\n  underlyingSymbol: string;\n}\n\nexport interface ITokenUnderlyingPrice {\n  cToken: string;\n  underlyingPrice: string;\n}\n\nexport interface ILendingNetworksService {\n  fetchALlLendingNetworksParameters(): Promise<ILendingNetworkParameters[]>;\n  fetchAllLendingNetworksGists(): Promise<ILendingNetworkGist[]>;\n\n  fetchLendingNetworkLiveState(\n    networkId: string\n  ): Promise<ILendingNetworkLiveState>;\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { action, computed, makeObservable, observable } from \"mobx\";\nimport {\n  ITokenData,\n  ITokenUnderlyingPrice,\n  IUnderlyingMetadata,\n  TAssetInMarketParameters,\n} from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport {\n  TCTokenBalances,\n  TCTokenMetadata,\n  TCTokenUnderlyingPrice,\n} from \"../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { ethers } from \"ethers\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../../constants/supportedTokensPerChain\";\nimport { CryptoWalletConnectionStore } from \"../CryptoWalletConnectionStore\";\n\nexport class SingleCTokenStore {\n  // CToken meta\n  @observable cTokenAddress: string;\n  @observable cTokenName: string;\n  @observable cTokenSymbol: string;\n  @observable cTokenDecimals: BigNumber;\n  @observable exchangeRateCurrent: BigNumber;\n  @observable supplyRatePerBlock: BigNumber;\n  @observable borrowRatePerBlock: BigNumber;\n  @observable private totalBorrows: BigNumber;\n  @observable private totalReserves: BigNumber;\n  @observable private totalSupply: BigNumber;\n  @observable private totalCash: BigNumber;\n  @observable private reserveFactorMantissa: BigNumber;\n  @observable private collateralFactorMantissa: BigNumber;\n  @observable isListed: boolean;\n\n  @observable underlyingAssetAddress: string;\n  @observable underlyingDecimals: number;\n  @observable underlyingName: string;\n  @observable underlyingSymbol: string;\n  // @observable underlyingPrice: BigNumber;\n\n  // CToken balances\n  @observable private balanceOf: BigNumber; // CToken balance for the user\n  @observable private borrowBalanceCurrent: BigNumber; // Underlying borrowed by the user\n  @observable private balanceOfUnderlying: BigNumber; // Balance of underlying for the user in the cToken ( owed to the user, derived from the user's wallet  cToken balance ).\n  @observable private tokenBalance: BigNumber; // Underlying balance for the user in their wallet\n  @observable private tokenAllowance: BigNumber; // Allowance in underlying with cToken as spender\n\n  // CToken underlying price\n  @observable underlyingPrice: BigNumber;\n\n  // Account specific data\n  @observable isCollaterable: boolean;\n\n  @computed get cTokenMeta(): TCTokenMetadata {\n    const cTokenMeta: TCTokenMetadata = {\n      cToken: this.cTokenAddress,\n      cTokenDecimals: this.cTokenDecimals,\n      collateralFactorMantissa: this.collateralFactorMantissa,\n      exchangeRateCurrent: this.exchangeRateCurrent,\n      isListed: this.isListed,\n      reserveFactorMantissa: this.reserveFactorMantissa,\n      totalBorrows: this.totalBorrows,\n      totalReserves: this.totalReserves,\n      totalSupply: this.totalSupply,\n      underlyingAssetAddress: this.underlyingAssetAddress,\n      underlyingDecimals: BigNumber.from(this.underlyingDecimals),\n      borrowRatePerBlock: this.borrowRatePerBlock,\n      supplyRatePerBlock: this.supplyRatePerBlock,\n      totalCash: this.totalCash,\n    };\n\n    return cTokenMeta;\n  }\n\n  constructor(\n    private cryptoWalletConnectionStore: CryptoWalletConnectionStore,\n    assetInMarketParams: TAssetInMarketParameters\n  ) {\n    makeObservable(this);\n    // this.cTokenAddress = tokenData.cToken;\n    // this.cTokenName = tokenData.cTokenName;\n    // this.cTokenSymbol = tokenData.cTokenSymbol;\n    // this.cTokenDecimals = BigNumber.from(tokenData.cTokenDecimals);\n    // this.totalCash = BigNumber.from(tokenData.totalCash);\n    // this.supplyRatePerBlock = BigNumber.from(tokenData.supplyRatePerBlock);\n    // this.borrowRatePerBlock = BigNumber.from(tokenData.borrowRatePerBlock);\n    // this.underlyingAssetAddress = assetInMarketParams.address;\n    // this.underlyingDecimals = assetInMarketParams.underlyingDecimals;\n    // this.underlyingName = underlyingMetadata.underlyingName;\n    // this.underlyingSymbol = underlyingMetadata.underlyingSymbol;\n    // this.underlyingPrice = BigNumber.from(0); // TODO : Figure where to get this from ?\n\n    this.cTokenAddress = \"\";\n    this.cTokenName = \"\";\n    this.cTokenSymbol = \"\";\n    this.cTokenDecimals = BigNumber.from(0);\n    this.exchangeRateCurrent = BigNumber.from(0);\n    this.supplyRatePerBlock = BigNumber.from(0);\n    this.borrowRatePerBlock = BigNumber.from(0);\n    this.totalBorrows = BigNumber.from(0);\n    this.totalReserves = BigNumber.from(0);\n    this.totalSupply = BigNumber.from(0);\n    this.totalCash = BigNumber.from(0);\n    this.reserveFactorMantissa = BigNumber.from(0);\n    this.collateralFactorMantissa = BigNumber.from(0);\n    this.isListed = false;\n\n    this.underlyingAssetAddress = assetInMarketParams.address;\n    this.underlyingDecimals = assetInMarketParams.decimals;\n    this.underlyingName = assetInMarketParams.name;\n    this.underlyingSymbol = assetInMarketParams.symbol;\n\n    // CToken balances\n    this.balanceOf = BigNumber.from(0);\n    this.borrowBalanceCurrent = BigNumber.from(0);\n    this.balanceOfUnderlying = BigNumber.from(0);\n    this.tokenBalance = BigNumber.from(0);\n    this.tokenAllowance = BigNumber.from(0);\n\n    // CToken underlying price\n    this.underlyingPrice = BigNumber.from(0);\n\n    // Account specific data\n    this.isCollaterable = false;\n  }\n\n  // **** State refresh from outside ****\n  public updateWithFreshState(\n    cTokenMeta: TCTokenMetadata,\n    cTokenBalances: TCTokenBalances,\n    cTokenUnderlyingPrice: TCTokenUnderlyingPrice\n  ) {\n    this.batchUpdateFromCTokenMeta(\n      cTokenMeta,\n      cTokenBalances,\n      cTokenUnderlyingPrice\n    );\n  }\n\n  public updateIsInCollaterable(isCollaterable: boolean) {\n    this.setIsCollaterable(isCollaterable);\n  }\n\n  /**\n   * Calculates how much collateral is being generated from this market\n   */\n  @computed public get collateralPotentialInUSD(): number {\n    if (this.isCollaterable && this.accountSupplyInUnits > 0) {\n      console.log(`${this.underlyingSymbol} is collaterable`);\n\n      const fullDepositedValueUsd =\n        this.accountSupplyInUnits * this.underlyingUsdPrice;\n      const collateralPotentialUsd =\n        fullDepositedValueUsd * this.collateralFactorInUnits;\n\n      return collateralPotentialUsd;\n    } else {\n      return 0;\n    }\n  }\n\n  /***\n   * Indicates how many underlying units the CToken currently holds\n   */\n  @computed\n  public get cTokenCashInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalCash, this.underlyingDecimals)\n    );\n  }\n\n  /***\n   * Indicates how many USD worth of underlying units the CToken currently holds\n   */\n  @computed\n  public get cTokenCashInUSD(): number {\n    return this.cTokenCashInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountUnderlyingBalanceInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.tokenBalance, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get totalSupplyInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalSupply, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get accountSupplyInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.balanceOfUnderlying,\n        this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get accountSupplyInOTokensRaw(): BigNumber {\n    return this.balanceOf;\n  }\n\n  @computed\n  public get accountSupplyInOTokensUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.accountSupplyInOTokensRaw,\n        this.cTokenDecimals\n      )\n    );\n  }\n\n  @computed\n  public get totalBorrowInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalBorrows, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get accountBorrowInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.borrowBalanceCurrent,\n        this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get underlyingUsdPrice(): number {\n    // DEV_NOTE : This calculation is based on the 'Lens' which returns the price is `36 - asset.decimals'\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.underlyingPrice,\n        36 - this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get totalSupplyBalanceUsd(): number {\n    return this.totalSupplyInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountSupplyBalanceUsd(): number {\n    return this.accountSupplyInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get totalBorrowBalanceUsd(): number {\n    return this.totalBorrowInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountBorrowBalanceUsd(): number {\n    return this.accountBorrowInUnits * this.underlyingUsdPrice;\n  }\n\n  /**\n   * We assume that if no cToken address has been set, it means that the 'batch update' has not finished.\n   */\n  @computed\n  public get hasBeenInitialized(): boolean {\n    return this.cTokenAddress !== \"\";\n  }\n\n  @computed\n  public get collateralFactorInUnits(): number {\n    const mantissaDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.collateralFactorMantissa, mantissaDecimals)\n    );\n  }\n\n  @computed\n  public get supplyRatePerBlockInUnits(): number {\n    const ratePerBlockDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.supplyRatePerBlock, ratePerBlockDecimals)\n    );\n  }\n\n  @computed\n  public get borrowRatePerBlockInUnits(): number {\n    const ratePerBlockDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.borrowRatePerBlock, ratePerBlockDecimals)\n    );\n  }\n\n  /***\n   * Supply APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get supplyApyInUnits(): number {\n    const blockPerYear = this.cryptoWalletConnectionStore.blocksPerYear;\n\n    return this.supplyRatePerBlockInUnits * blockPerYear;\n  }\n\n  /***\n   * Borrow APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get borrowApyInUnits(): number {\n    const blockPerYear = this.cryptoWalletConnectionStore.blocksPerYear;\n\n    return this.borrowRatePerBlockInUnits * blockPerYear;\n  }\n\n  /***\n   * Supply APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get supplyApyInPercentages(): number {\n    return this.supplyApyInUnits * 100;\n  }\n\n  /***\n   * Borrow APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get borrowApyInPercentages(): number {\n    return this.borrowApyInUnits * 100;\n  }\n\n  /**\n   * Expected yearly revenue for supply interest.\n   */\n  @computed\n  public get totalYearlyGainsUsd(): number {\n    return this.accountSupplyInUnits * this.supplyApyInUnits;\n  }\n\n  /**\n   * Expected yearly payment for borrow interest.\n   */\n  @computed\n  public get totalYearlyLossesUsd(): number {\n    return this.accountBorrowBalanceUsd * this.borrowApyInUnits;\n  }\n\n  /**\n   * The expected change in value in a year.\n   */\n  @computed\n  public get totalYearlyChangeUsd(): number {\n    return this.totalYearlyGainsUsd - this.totalYearlyLossesUsd;\n  }\n\n  @computed public get hasAnyAllowance(): boolean {\n    return this.tokenAllowance.gt(0);\n  }\n\n  public getUnitsForUsdValue(usdValue: number): number {\n    return usdValue / this.underlyingUsdPrice;\n  }\n\n  // **** Complex setters ****\n\n  @action(\"batchUpdateFromCTokenMeta\")\n  private batchUpdateFromCTokenMeta(\n    cTokenMeta: TCTokenMetadata,\n    cTokenBalances: TCTokenBalances,\n    cTokenUnderlyingPrice: TCTokenUnderlyingPrice\n  ) {\n    this.cTokenAddress = cTokenMeta.cToken;\n    this.cTokenDecimals = cTokenMeta.cTokenDecimals;\n    // this.cTokenName = cTokenMeta.;\n    // this.cTokenSymbol = \"\";\n\n    this.exchangeRateCurrent = cTokenMeta.exchangeRateCurrent;\n    this.supplyRatePerBlock = cTokenMeta.supplyRatePerBlock;\n    this.borrowRatePerBlock = cTokenMeta.borrowRatePerBlock;\n    this.totalBorrows = cTokenMeta.totalBorrows;\n    this.totalReserves = cTokenMeta.totalReserves;\n    this.totalSupply = cTokenMeta.totalSupply;\n    this.totalCash = cTokenMeta.totalCash;\n    this.collateralFactorMantissa = cTokenMeta.collateralFactorMantissa;\n    this.isListed = cTokenMeta.isListed;\n\n    // CToken Balances\n    this.balanceOf = cTokenBalances.balanceOf;\n    this.borrowBalanceCurrent = cTokenBalances.borrowBalanceCurrent;\n    this.balanceOfUnderlying = cTokenBalances.balanceOfUnderlying;\n    this.tokenBalance = cTokenBalances.tokenBalance;\n    this.tokenAllowance = cTokenBalances.tokenAllowance;\n\n    // CToken underlying price\n    this.underlyingPrice = cTokenUnderlyingPrice.underlyingPrice;\n  }\n\n  // **** Action setters ****\n  @action(\"setIsCollaterable\")\n  private setIsCollaterable(isCollaterable: boolean) {\n    this.isCollaterable = isCollaterable;\n\n    if (this.isCollaterable)\n      console.log(\n        `${this.underlyingSymbol} is collaterable with balance of ${this.totalSupplyBalanceUsd}`\n      );\n  }\n}\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  makeObservable,\n  observable,\n  reaction,\n  toJS,\n} from \"mobx\";\nimport {\n  EMPTY_ASSET_IN_MARKET_PARAMETERS,\n  ILendingNetworkGist,\n  ILendingNetworkLiveState,\n  ILendingNetworksService,\n  TAssetInMarketParameters,\n} from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TAssetInMarketGist } from \"../../pages/LendingNetworkPage/MarketsTab/markets/types\";\nimport { IObservableArray } from \"mobx/dist/internal\";\nimport {\n  ICompoundLensService,\n  TAccountLimits,\n  TCompBalanceMetadataExt,\n  TCTokenMetadata,\n} from \"../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { BigNumber, ContractTransaction, ethers } from \"ethers\";\nimport {\n  NATIVE_COIN_ASSET_ADDRESS,\n  ZERO_ADDRESS,\n} from \"../../constants/constantAddresses\";\nimport { CryptoWalletConnectionStore } from \"../CryptoWalletConnectionStore\";\nimport { IComptrollerService } from \"../../services/contractsIntegration/ComptrollerService/IComptrollerService\";\nimport { ComptrollerService } from \"../../services/contractsIntegration/ComptrollerService/ComptrollerService\";\nimport { SingleCTokenStore } from \"./SingleCTokenStore\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../../constants/supportedTokensPerChain\";\nimport { SystemStore } from \"../SystemStore\";\n\nexport class SingleLNStore {\n  @observable doneLoading: boolean = false;\n  @observable errorLoading: boolean = false;\n\n  @observable id: string;\n  @observable name: string;\n  @observable unitrollerAddress: string;\n  @observable maximillionAddress: string;\n  @observable lnHomePage: string;\n\n  @observable tvl: number;\n  @observable participatingSuppliers: number;\n\n  // DEV_NOTE : Currently they all have 6.\n  @observable private _priceCalculationDecimals: number = 6;\n\n  // Holds the parameters, used for initialization\n  @observable\n  assetsParams: IObservableArray<TAssetInMarketParameters> = observable([]);\n  @observable\n  assetBaseAddressToParams = observable(\n    new Map<string, TAssetInMarketParameters>()\n  );\n\n  // Holds the parameters with the live data\n  // @observable\n  // assetsGists: IObservableArray<TAssetInMarketGist> = observable([]);\n\n  // All cTokens addresses in comptroller\n  @observable allMarkets: IObservableArray<string> = observable([]);\n\n  @observable cTokensStores: IObservableArray<SingleCTokenStore> = observable(\n    []\n  );\n\n  // **** Reward token distribution *****\n  @observable\n  distributionAssetParams: TAssetInMarketParameters = EMPTY_ASSET_IN_MARKET_PARAMETERS;\n  @observable distributionAssetRatePerBlock = 0;\n  @observable public incentiveBalance = observable(BigNumber.from(0));\n  @observable public incentiveAllocated = observable(BigNumber.from(0));\n\n  // **** Account specific data *****\n  @observable public liquidity = observable(BigNumber.from(0));\n  @observable public shortfall = observable(BigNumber.from(0));\n  // TODO : Fix native token wrap base address\n  @observable public marketsUserIsIn: IObservableArray<string> = observable([]);\n\n  @computed get lnGist(): ILendingNetworkGist {\n    const gist: ILendingNetworkGist = {\n      chainId: \"\", // TODO : Fill this chain id\n      distributionAssetParameters: EMPTY_ASSET_IN_MARKET_PARAMETERS,\n      unitrollerAddress: this.unitrollerAddress,\n      maximillionAddress: this.maximillionAddress,\n      participatingSuppliers: this.participatingSuppliers,\n      tvl: this.tvl,\n      name: this.name,\n      lnHomePage: this.lnHomePage,\n      assets: this.assetsParams,\n      id: this.id,\n    };\n\n    return gist;\n  }\n\n  // BaseAssetAddress -> CTokenStore\n  @computed get baseAssetsToCTokenStore(): Map<string, SingleCTokenStore> {\n    const map = new Map<string, SingleCTokenStore>();\n    for (let cTokenStore of this.cTokensStores) {\n      map.set(cTokenStore.underlyingAssetAddress, cTokenStore);\n    }\n    return map;\n  }\n\n  @computed\n  public get liquidityUsd(): number {\n    const liquidityDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.liquidity, liquidityDecimals)\n    );\n  }\n\n  @computed\n  public get totalLNSupplyBalanceUsd(): number {\n    let totalSupplyUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalSupplyUsd += cTokenStore.totalSupplyBalanceUsd;\n    }\n\n    return totalSupplyUsd;\n  }\n\n  @computed\n  public get totalAccountSupplyBalanceUsd(): number {\n    let totalAccountSupplyUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalAccountSupplyUsd += cTokenStore.accountSupplyBalanceUsd;\n    }\n\n    return totalAccountSupplyUsd;\n  }\n\n  @computed\n  public get totalLNBorrowBalanceUsd(): number {\n    let totalBorrowUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalBorrowUsd += cTokenStore.totalBorrowBalanceUsd;\n    }\n\n    return totalBorrowUsd;\n  }\n\n  @computed\n  public get totalAccountBorrowBalanceUsd(): number {\n    let totalAccountBorrowUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalAccountBorrowUsd += cTokenStore.accountBorrowBalanceUsd;\n    }\n\n    return totalAccountBorrowUsd;\n  }\n\n  /**\n   * Expected yearly revenue for supply interest from all markets.\n   */\n  @computed\n  public get totalYearlyGains(): number {\n    let totalYearlyGains = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalYearlyGains += cTokenStore.totalYearlyGainsUsd;\n    }\n\n    return totalYearlyGains;\n  }\n\n  /**\n   * Expected yearly payment for borrow interest from all markets.\n   */\n  @computed\n  public get totalYearlyLosses(): number {\n    let totalLossesGains = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalLossesGains += cTokenStore.totalYearlyLossesUsd;\n    }\n\n    return totalLossesGains;\n  }\n\n  /**\n   * The expected USD change in value in a year.\n   */\n  @computed\n  public get totalYearlyChangeUsd(): number {\n    let totalYearlyChanges = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      // console.log(\n      //   `${cTokenStore.underlyingSymbol} change : ${cTokenStore.totalYearlyChangeUsd}`\n      // );\n      totalYearlyChanges += cTokenStore.totalYearlyChangeUsd;\n    }\n\n    return totalYearlyChanges;\n  }\n\n  @computed\n  public get netApy(): number {\n    // TODO : CRITICAL : Calculate this.\n    // const netSupplyUsd = this.totalAccountSupplyBalanceUsd;\n    // const netBorrowUsd = this.totalAccountBorrowBalanceUsd;\n\n    // Sum up Yearly profit or loss in each market.\n    // Calculate difference\n    const totalYearlyChange = this.totalYearlyChangeUsd;\n\n    // If positive, divide by total-supply-usd\n    // If negative, divide by total-borrow-usd\n    const divider =\n      totalYearlyChange > 0\n        ? this.totalAccountSupplyBalanceUsd\n        : this.totalAccountBorrowBalanceUsd;\n\n    return totalYearlyChange / divider;\n  }\n\n  @computed\n  public get collateralPotentialInUSD(): number {\n    let potentialCollateral = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      potentialCollateral += cTokenStore.collateralPotentialInUSD;\n    }\n\n    return potentialCollateral;\n  }\n\n  @computed\n  public get usedBorrowPercentage(): number {\n    return this.usedBorrowFraction * 100;\n  }\n\n  @computed\n  public get usedBorrowFraction(): number {\n    return this.totalAccountBorrowBalanceUsd / this.collateralPotentialInUSD;\n  }\n\n  @computed\n  public get distributionAssetApy(): number {\n    // TODO : CRITICAL : Get the right value\n    const blockPerYear = DAILY_BLOCK_PER_CHAIN[\"1\"];\n    return this.distributionAssetRatePerBlock * blockPerYear;\n  }\n\n  @computed public get compBalanceUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.incentiveBalance,\n        this.distributionAssetParams.decimals\n      )\n    );\n  }\n\n  @computed public get compAllocatedUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.incentiveAllocated,\n        this.distributionAssetParams.decimals\n      )\n    );\n  }\n\n  @computed public get priceCalculationDecimals(): number {\n    return this._priceCalculationDecimals;\n  }\n\n  private addressChangeReaction: IReactionDisposer;\n\n  private comptrollerService: IComptrollerService;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private systemStore: SystemStore,\n    private lendingNetworksService: ILendingNetworksService,\n    lendingNetworkGist: ILendingNetworkGist\n  ) {\n    makeObservable(this);\n    this.id = lendingNetworkGist.id;\n    this.name = lendingNetworkGist.name;\n    this.unitrollerAddress = lendingNetworkGist.unitrollerAddress;\n    this.maximillionAddress = lendingNetworkGist.maximillionAddress;\n    this.lnHomePage = lendingNetworkGist.lnHomePage;\n    // Quick-n-Dirty asset params\n    this.assetsParams.replace(lendingNetworkGist.assets);\n    this.assetBaseAddressToParams.replace(\n      new Map(\n        this.assetsParams.map((assetParam) => [assetParam.address, assetParam])\n      )\n    );\n    this.distributionAssetParams =\n      lendingNetworkGist.distributionAssetParameters;\n    this.tvl = lendingNetworkGist.tvl;\n    this.participatingSuppliers = lendingNetworkGist.participatingSuppliers;\n\n    // Move this to an action\n    // this.assetsGists.replace(\n    //   this.assetsParams.map((asset) => this.buildEmptyAssetInMarketGist(asset))\n    // );\n\n    this.comptrollerService = new ComptrollerService(\n      this.unitrollerAddress,\n      this.cryptoWalletIntegrationStore.signerOrProvider\n    );\n\n    // Create cTokens stores\n    this.cTokensStores.replace(\n      this.assetsParams.map(\n        (assetParam) =>\n          new SingleCTokenStore(cryptoWalletIntegrationStore, assetParam)\n      )\n    );\n\n    // this.cTokensStores.forEach((cTokenStore) =>\n    //   console.log(\n    //     `CTokenStore : ${cTokenStore.underlyingSymbol} ${cTokenStore.underlyingAssetAddress}`\n    //   )\n    // );\n\n    this.addressChangeReaction = reaction(\n      () => [\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n      ],\n      async ([chainId, address]) => {\n        this.setDoneLoading(false);\n        await this.reactToConnectedChainOrAddressChanged(\n          // DEV_NOTE : We add 'as' because TS thinks mixes the string and number in the array\n          chainId as number,\n          address as string\n        );\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Current address changed ****\n  private async reactToConnectedChainOrAddressChanged(\n    chainId: number,\n    currentAddress: string\n  ) {\n    if (currentAddress) {\n      try {\n        await this.readDataForAccount(chainId, currentAddress);\n      } catch (e) {\n        this.failLoadingProcess(e);\n        console.error(\n          \"Error in reacting to address change in Orbs Account Store\",\n          e\n        );\n      }\n    }\n  }\n\n  // **** Data reading and setting ****\n\n  /**\n   * Quick-n-Dirty\n   */\n  public async refreshFromOutside() {\n    return this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  private async readDataForAccount(chainId: number, accountAddress: string) {\n    // console.log(\n    //   `SingleLnStore : readDataForAccount : ${chainId} ${accountAddress}`\n    // );\n    // console.log(`reading SINGLE LN data for ${accountAddress} on ${chainId}`);\n    // Clear old data\n    // this.clearAllAccountData();\n    // Refresh LN state\n    this.refreshLNNetworkState().catch((e) =>\n      console.error(`Failed refreshing LN Network state ${e.toString()}`)\n    );\n    // Refresh LN state\n    this.readAndSetCompBalanceMeta(accountAddress).catch((e) =>\n      console.error(`Failed readNSet compBalance ${e.toString()}`)\n    );\n\n    // Refresh cTokens - OLD\n    // this.readMarketsAndCTokensData().catch((e) =>\n    //   console.error(`Failed readNSet markets and ctoken ${e.toString()}`)\n    // );\n\n    await this.readNSetMarkets().catch((e) =>\n      console.error(`Failed readNSet markets ${e.toString()}`)\n    );\n\n    // Refresh cTokens\n    this.batchReadAndUpdateCTokensStores().catch((e) =>\n      console.error(`Failed readNSet batch CTokens state ${e.toString()}`)\n    );\n\n    // Refresh Account details\n    this.readNSetAccountLimits(\n      accountAddress,\n      this.unitrollerAddress\n    ).catch((e) =>\n      console.error(`Failed readNSet accountLimits ${JSON.stringify(e)}`)\n    );\n  }\n\n  /**\n   * Should be called after constructor\n   */\n  public async initialize() {\n    await this.refreshFromOutside();\n  }\n\n  public async refreshLNNetworkState() {\n    const liveState = await this.lendingNetworksService.fetchLendingNetworkLiveState(\n      this.id\n    );\n\n    this.setLiveState(liveState);\n  }\n\n  // **** Contract interactions ****\n  async enterMarketByBaseAsset(baseAssetAddress: string) {\n    const assetToCTokenStore = this.baseAssetsToCTokenStore;\n\n    if (!assetToCTokenStore.has(baseAssetAddress)) {\n      throw new Error(`No CToken Store for ${baseAssetAddress}`);\n    }\n\n    const cTokenStore = assetToCTokenStore.get(\n      baseAssetAddress\n    ) as SingleCTokenStore;\n    const tx = await this.comptrollerService.enterMarkets([\n      cTokenStore.cTokenAddress,\n    ]);\n    await tx.wait(1);\n\n    await this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  async exitMarketByBaseAsset(baseAssetAddress: string) {\n    const assetToCTokenStore = this.baseAssetsToCTokenStore;\n\n    if (!assetToCTokenStore.has(baseAssetAddress)) {\n      throw new Error(`No CToken Store for ${baseAssetAddress}`);\n    }\n\n    const cTokenStore = assetToCTokenStore.get(\n      baseAssetAddress\n    ) as SingleCTokenStore;\n    const tx = await this.comptrollerService.exitMarket(\n      cTokenStore.cTokenAddress\n    );\n    await tx.wait(1);\n\n    await this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  async enterMarketByCTokenAddress(\n    cTokenAddress: string\n  ): Promise<ContractTransaction> {\n    const tx = await this.comptrollerService.enterMarkets([cTokenAddress]);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    tx.wait().then(async () => {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    });\n\n    return tx;\n  }\n\n  async exitMarketByCTokenAddress(\n    cTokenAddress: string\n  ): Promise<ContractTransaction> {\n    const tx = await this.comptrollerService.exitMarket(cTokenAddress);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    tx.wait().then(async () => {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    });\n\n    return tx;\n  }\n\n  async claimLnIncentiveToken(): Promise<ContractTransaction> {\n    const tx = await this.comptrollerService.claimIncentiveFromAllMarkets(\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    tx.wait().then(async () => {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    });\n\n    return tx;\n  }\n\n  // **** Read&Set ****\n\n  private async readNSetAccountLimits(\n    accountAddress: string,\n    comptrollerProxy: string\n  ) {\n    if (\n      accountAddress &&\n      comptrollerProxy &&\n      comptrollerProxy !== ZERO_ADDRESS &&\n      this.systemStore.compoundLensServiceInitialized\n    ) {\n      const accountLimits = await this.systemStore.compoundLensService.getAccountLimits(\n        comptrollerProxy,\n        accountAddress\n      );\n\n      this.setAccountLimits(accountLimits);\n    } else {\n      console.warn(\"Comptroller proxy address is empty\");\n    }\n  }\n\n  /**\n   * Simply calls 'getAllMarkets'\n   */\n  private async readNSetMarkets() {\n    const markets = await this.comptrollerService.getAllMarkets();\n    // console.log({ markets });\n    this.replaceMarkets(markets);\n  }\n\n  public async readAndSetCompBalanceMeta(account: string) {\n    if (!account || !this.systemStore.compoundLensServiceInitialized) {\n      return;\n    }\n\n    const compBalanceMetadataExt = await this.systemStore.compoundLensService.fetchCompBalanceMetadataExt(\n      this.distributionAssetParams.address,\n      this.unitrollerAddress,\n      account\n    );\n\n    this.setCompBalanceMeta(compBalanceMetadataExt);\n  }\n\n  // public async loadCTokenMetadata(): Promise<void> {\n  //   // this.setTokens(null);\n  //   const [\n  //     allCTokenData,\n  //     allUnderlyingMetadata,\n  //     allCTokenUnderlyingPrice,\n  //   ] = await Promise.all([\n  //     this.lendingNetworksService.fetchCTokenMetadataAll(\n  //       this.unitrollerAddress\n  //     ),\n  //     this.lendingNetworksService.fetchUnderlyingMetadataAll(\n  //       this.unitrollerAddress\n  //     ),\n  //     this.lendingNetworksService.cTokenUnderlyingPriceAll(\n  //       this.unitrollerAddress\n  //     ),\n  //   ]);\n  //\n  //   this.setTokens(\n  //     allCTokenData.map(\n  //       (cTokenData, idx) =>\n  //         new TokenStore(\n  //           cTokenData,\n  //           allUnderlyingMetadata[idx],\n  //           allCTokenUnderlyingPrice[idx]\n  //         )\n  //     )\n  //   );\n  // }\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private async batchReadAndUpdateCTokensStores() {\n    const cTokenMarkets = this.allMarkets;\n    // const [first, ...cTokenMarkets] = this.allMarkets;\n    // const cTokenMarkets = [this.allMarkets[1], this.allMarkets[3]];\n    // const cTokenMarkets = [this.allMarkets[1], this.allMarkets[3]];\n    if (!cTokenMarkets || !cTokenMarkets.length) {\n      return console.log(`No markets for cToken batch read and update`);\n    } else if (!this.systemStore.compoundLensServiceInitialized) {\n      return console.log(\"Lens service not yet initialized\");\n    }\n\n    // console.log(`All cToken-markets ${this.allMarkets}`);\n    const cTokenMetas = await this.systemStore.compoundLensService.cTokenMetadataAll(\n      cTokenMarkets\n    );\n    // console.log(`Got metas : ${JSON.stringify(cTokenMetas.length)} `);\n    // console.log(JSON.stringify(cTokenMetas, null, 2));\n    // console.log(\n    //   `cTokenBalances for ${this.cryptoWalletIntegrationStore.mainAddress}`\n    // );\n    const cTokenBalancesAll = await this.systemStore.compoundLensService.cTokenBalancesAll(\n      cTokenMarkets,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n\n    // console.log(`Got balances : ${JSON.stringify(cTokenBalancesAll, null, 2)}`);\n    const cTokenUnderlyingPricesAll = await this.systemStore.compoundLensService.cTokenUnderlyingPriceAll(\n      cTokenMarkets\n    );\n    // console.log(`Got prices: ${JSON.stringify(cTokenUnderlyingPricesAll)} `);\n\n    for (let i = 0; i < cTokenMetas.length; i++) {\n      const cTokenMeta = cTokenMetas[i];\n      const cTokenBalances = cTokenBalancesAll[i];\n      const cTokenUnderlyingPrices = cTokenUnderlyingPricesAll[i];\n      let matchingSTokenStore = this.cTokensStores.find(\n        (cTokenStore) =>\n          cTokenStore.underlyingAssetAddress ===\n          cTokenMeta.underlyingAssetAddress\n      );\n\n      // DEV_NOTE : This is a temp solution to handle the fact that the 'Lens' returns 0x000 address for the native coin.\n      if (\n        !matchingSTokenStore &&\n        cTokenMeta.underlyingAssetAddress === ZERO_ADDRESS\n      ) {\n        console.log(\"Looking for native coin cTokenStore\");\n        console.log(\n          `POssible underlyings : ${this.cTokensStores.map(\n            (cTokenStore) => cTokenStore.underlyingAssetAddress\n          )}`\n        );\n        // TODO : CRITICAL : Lock on one standard\n        matchingSTokenStore = this.cTokensStores.find((cTokenStore) =>\n          [NATIVE_COIN_ASSET_ADDRESS, ZERO_ADDRESS].includes(\n            cTokenStore.underlyingAssetAddress\n          )\n        );\n      }\n\n      if (matchingSTokenStore) {\n        matchingSTokenStore.updateWithFreshState(\n          cTokenMeta,\n          cTokenBalances,\n          cTokenUnderlyingPrices\n        );\n\n        const marketIsColleterable = this.marketsUserIsIn.includes(\n          matchingSTokenStore.cTokenAddress\n        );\n        matchingSTokenStore.updateIsInCollaterable(marketIsColleterable);\n      } else {\n        console.log(\n          `No cTokenStore found for meta of ${cTokenMeta.underlyingAssetAddress}`\n        );\n      }\n    }\n  }\n\n  // @action\n  // private setTokens(tokens: TokenStore[] | null): void {\n  //   this.tokens = tokens;\n  // }\n\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setLiveState\")\n  private setLiveState(lnLiveState: ILendingNetworkLiveState) {\n    this.tvl = lnLiveState.tvl;\n    this.participatingSuppliers = lnLiveState.participatingSuppliers;\n  }\n\n  @action(\"setLiveState\")\n  private setCompBalanceMeta(compBalance: TCompBalanceMetadataExt) {\n    this.incentiveBalance = compBalance.balance;\n    this.incentiveAllocated = compBalance.allocated;\n  }\n\n  @action(\"setDistributionAssetRatePerBlock\")\n  private setDistributionAssetRatePerBlock(\n    distributionAssetRatePerBlock: number\n  ) {\n    this.distributionAssetRatePerBlock = distributionAssetRatePerBlock;\n  }\n\n  @action(\"setAccountLimits\")\n  private setAccountLimits(accountLimits: TAccountLimits) {\n    console.log(`New liquidity ${accountLimits.liquidity}`);\n    console.log(`New shortfal ${accountLimits.shortfall}`);\n    this.liquidity = accountLimits.liquidity;\n    this.shortfall = accountLimits.shortfall;\n    this.marketsUserIsIn.replace(accountLimits.marketsIn);\n    console.log(`New markets in ${accountLimits.marketsIn}`);\n  }\n\n  @action(\"replaceMarkets\")\n  private replaceMarkets(newMarkets: string[]) {\n    this.allMarkets.replace(newMarkets);\n  }\n\n  private buildEmptyAssetInMarketGist(\n    assetInMarketParams: TAssetInMarketParameters\n  ): TAssetInMarketGist {\n    const gist: TAssetInMarketGist = {\n      name: assetInMarketParams.name,\n      symbol: assetInMarketParams.symbol,\n      address: assetInMarketParams.address,\n      decimals: assetInMarketParams.decimals,\n      isNativeCoin: assetInMarketParams.isNativeCoin,\n      // amountInWallet: 0,\n      borrowApy: 0,\n      supplyApy: 0,\n      usdLiquidity: 0,\n    };\n\n    return gist;\n  }\n}\n","import {\n  ILendingNetworkGist,\n  ILendingNetworkParameters,\n  ILendingNetworksService,\n} from \"../services/lendingNetworksService/ILendingNetworksService\";\nimport { action, computed, makeObservable, observable } from \"mobx\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { IObservableArray } from \"mobx/dist/internal\";\nimport { ICompoundLensService } from \"../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { CompoundLensService } from \"../services/contractsIntegration/CompoundLensService/CompoundLensService\";\nimport { SystemStore } from \"./SystemStore\";\n\nexport class LendingNetworksStore {\n  @observable isLoading: boolean = false;\n  @observable\n  lendingNetworkParameters: IObservableArray<ILendingNetworkParameters> = observable(\n    []\n  );\n  @observable\n  lendingNetworkGists: IObservableArray<ILendingNetworkGist> = observable([]);\n  // @observable lendingNetworkLiveState: ILendingNetworkLiveState[] = [];\n  @observable\n  lendingNetworksStores: IObservableArray<SingleLNStore> = observable([]);\n\n  @observable\n  activeLendingNetworkId: string = \"\";\n\n  @computed get allLNGists(): ILendingNetworkGist[] {\n    const gists = this.lendingNetworksStores.map((lnStore) => lnStore.lnGist);\n    return gists;\n  }\n\n  @computed get activeLNStore(): SingleLNStore | undefined {\n    const activeLnStore = this.lendingNetworksStores.find(\n      (lnStore) => lnStore.id === this.activeLendingNetworkId\n    );\n\n    return activeLnStore;\n  }\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private systemStore: SystemStore,\n    private lendingNetworksService: ILendingNetworksService\n  ) {\n    makeObservable(this);\n\n    this.initializeStore();\n  }\n\n  public getLendingNetworkStore(networkId: string): SingleLNStore | null {\n    return this.lendingNetworksStores.find((l) => l.id === networkId) ?? null;\n  }\n\n  async initializeStore() {\n    this.setLoadingState(true);\n\n    // Get params for all registered LNs\n    await this.fetchAllLnParameters();\n\n    // Create a store for each LN\n    this.buildStoresForEachLn();\n\n    // Set the current LN as the first (just to initialize it with something)\n    // Initialize each store\n    this.initializeLNStores();\n\n    // this.setLendingNetworksGists(lnParameters);\n    this.setLoadingState(false);\n  }\n\n  private async fetchAllLnParameters() {\n    const lnParameters = await this.lendingNetworksService.fetchALlLendingNetworksParameters();\n    this.setLendingNetworkParameters(lnParameters);\n  }\n\n  private buildStoresForEachLn() {\n    const lnStores = this.lendingNetworkParameters.map((params) =>\n      this.buildLNStore(params)\n    );\n\n    this.setLendingNetworksStores(lnStores);\n  }\n\n  /**\n   * Calls 'initiailize' on each store\n   */\n  private initializeLNStores() {\n    // TODO : Critical : Should not initialize al stores. only the ones that match the network\n    this.lendingNetworksStores.forEach((lnStore) => lnStore.initialize());\n  }\n\n  private buildEmptyLnGist(\n    lnParams: ILendingNetworkParameters\n  ): ILendingNetworkGist {\n    const gist: ILendingNetworkGist = {\n      ...lnParams,\n      tvl: 0,\n      participatingSuppliers: 0,\n    };\n\n    return gist;\n  }\n\n  private buildLNStore(lnParams: ILendingNetworkParameters): SingleLNStore {\n    // Start with an empty gist\n    const gist: ILendingNetworkGist = {\n      ...lnParams,\n      tvl: 0,\n      participatingSuppliers: 0,\n    };\n\n    // Build the store\n    const lnStore = new SingleLNStore(\n      this.cryptoWalletIntegrationStore,\n      this.systemStore,\n      this.lendingNetworksService,\n      // this.compoundLensService,\n      gist\n    );\n\n    return lnStore;\n  }\n\n  // **** Active LN ****\n  public setActiveLn(lnIdAddress: string) {\n    this.setActiveLendingNetworkId(lnIdAddress);\n  }\n\n  // **** Computed values ****\n\n  // **** Contract interactions ****\n\n  // **** Current address changed ****\n\n  // **** Data reading and setting ****\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  // ****  Complex setters ****\n\n  // ****  Observables setter actions ****\n  // @action(\"setLendingNetworksGists\")\n  // private setLendingNetworksGists(lendingNetworkGists: ILendingNetworkGist[]) {\n  //   this.lendingNetworks = lendingNetworkGists.map(\n  //     (gits) => new SingleLNStore(this.lendingNetworksService, gits)\n  //   );\n  // }\n\n  @action(\"setLendingNetworksGists\")\n  private setLendingNetworksStores(lendingNetworkStores: SingleLNStore[]) {\n    this.lendingNetworksStores.replace(lendingNetworkStores);\n  }\n\n  @action(\"setLendingNetworksGists\")\n  private setLendingNetworksGists(lendingNetworkGists: ILendingNetworkGist[]) {\n    this.lendingNetworkGists.replace(lendingNetworkGists);\n  }\n\n  @action(\"setLendingNetworkParameters\")\n  private setLendingNetworkParameters(\n    lendingNetworkParameters: ILendingNetworkParameters[]\n  ) {\n    this.lendingNetworkParameters.replace(lendingNetworkParameters);\n  }\n\n  @action(\"setActiveLendingNetworkId\")\n  private setActiveLendingNetworkId(activeLendingNetworkId: string) {\n    this.activeLendingNetworkId = activeLendingNetworkId;\n  }\n\n  @action(\"setLoadingState\")\n  private setLoadingState(isLoading: boolean) {\n    this.isLoading = isLoading;\n  }\n}\n","import { action, computed, makeObservable, observable } from \"mobx\";\n\ntype TModalIds =\n  | \"SUPPLY_MODAL\"\n  | \"BORROW_MODAL\"\n  | \"COLLATERAL_MODAL\"\n  | \"INCENTIVE_MODAL\";\ntype TCurrentModalIds = TModalIds | \"NONE\";\n\nexport class ModalsStore {\n  @observable SUPPLY_MODAL_ID = \"SUPPLY_MODAL\";\n\n  @observable currentModalId: TCurrentModalIds = \"NONE\";\n  @observable assetBaseAddress: string = \"\";\n\n  @computed get isSupplyModalActive(): boolean {\n    return this.currentModalId === \"SUPPLY_MODAL\";\n  }\n\n  @computed get isBorrowModalActive(): boolean {\n    return this.currentModalId === \"BORROW_MODAL\";\n  }\n\n  @computed get isCollateralModalActive(): boolean {\n    return this.currentModalId === \"COLLATERAL_MODAL\";\n  }\n\n  @computed get isInventiveModalActive(): boolean {\n    return this.currentModalId === \"INCENTIVE_MODAL\";\n  }\n\n  constructor() {\n    makeObservable(this);\n  }\n\n  // **** Modal management ****\n\n  public showSupplyModal(supplyAssetBaseAddress: string) {\n    this.showAssetActionModal(\"SUPPLY_MODAL\", supplyAssetBaseAddress);\n  }\n\n  public showBorrowModal(borrowAssetBaseAddress: string) {\n    this.showAssetActionModal(\"BORROW_MODAL\", borrowAssetBaseAddress);\n  }\n\n  public showCollateralModal(borrowAssetBaseAddress: string) {\n    this.showAssetActionModal(\"COLLATERAL_MODAL\", borrowAssetBaseAddress);\n  }\n\n  public showIncentiveModal() {\n    this.setCurrentModalId(\"INCENTIVE_MODAL\");\n  }\n\n  // **** Complex setters ****\n  private showAssetActionModal(\n    supplyModalId: TModalIds,\n    assetBaseAddress: string\n  ) {\n    // DEV_NOTE : Setting the asset before showing the modal to ensure that asset data will be found (no showing \"mid-way\" UI state)\n    this.setAssetBaseAddress(assetBaseAddress);\n    this.setCurrentModalId(supplyModalId);\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'supply'\n   */\n  public hideSupplyModal() {\n    if (this.isSupplyModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'borrow'\n   */\n  public hideBorrowModal() {\n    if (this.isBorrowModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'collateral'\n   */\n  public hideCollateralModal() {\n    if (this.isCollateralModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'incentive'\n   */\n  public hideIncentiveModal() {\n    if (this.isInventiveModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setCurrentModalId\")\n  private setCurrentModalId(currentModalId: TCurrentModalIds) {\n    console.log(`New current modal id ${currentModalId}`);\n    this.currentModalId = currentModalId;\n  }\n\n  @action(\"setAssetBaseAddress\")\n  private setAssetBaseAddress(assetBaseAddress: string) {\n    this.assetBaseAddress = assetBaseAddress;\n  }\n}\n","import { BigNumber, Contract } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CompoundLensJson from \"../../../solidityInterfaces/CompoundLens.json\";\nimport { CompoundLens } from \"../../../solidityInterfaces/CompoundLens\";\nimport {\n  ICompoundLensService,\n  TAccountLimits,\n  TCompBalanceMetadataExt,\n  TCTokenBalances,\n  TCTokenMetadata,\n  TCTokenUnderlyingPrice,\n} from \"./ICompoundLensService\";\nimport { parseEther } from \"ethers/lib/utils\";\nimport { etheresStructResponseToObject } from \"../contractsIntegrationUtils\";\n\nexport class CompoundLensService implements ICompoundLensService {\n  private compoundLensContract: CompoundLens;\n\n  constructor(\n    compoundLensAddress: string,\n    private signerOrProvider: Signer | Provider\n  ) {\n    this.compoundLensContract = new Contract(\n      compoundLensAddress,\n      CompoundLensJson.abi,\n      signerOrProvider\n    ) as CompoundLens;\n  }\n\n  public updateCompoundLensAddress(newCompoundLensAddress: string) {\n    console.log(`Updating compoundLens address to ${newCompoundLensAddress}`);\n    if (newCompoundLensAddress === \"\") {\n      console.log(\"Got an empty compound lens address\");\n    }\n\n    this.compoundLensContract = new Contract(\n      newCompoundLensAddress,\n      CompoundLensJson.abi,\n      this.signerOrProvider\n    ) as CompoundLens;\n  }\n\n  async cTokenMetadata(cTokenAddress: string): Promise<TCTokenMetadata> {\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenMetadataAll\");\n    }\n    return etheresStructResponseToObject(\n      await this.compoundLensContract.callStatic.cTokenMetadata(cTokenAddress)\n    );\n  }\n\n  async cTokenMetadataAll(\n    cTokenAddresses: string[]\n  ): Promise<TCTokenMetadata[]> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenMetadataAll\");\n      return [];\n    }\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenMetadataAll(\n      cTokenAddresses\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async cTokenBalancesAll(\n    cTokenAddresses: string[],\n    account: string\n  ): Promise<TCTokenBalances[]> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenBalancesAll\");\n      return [];\n    }\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenBalancesAll(\n      cTokenAddresses,\n      account\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async cTokenUnderlyingPriceAll(\n    cTokenAddresses: string[]\n  ): Promise<TCTokenUnderlyingPrice[]> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenUnderlyingPriceAll\");\n      return [];\n    }\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenUnderlyingPriceAll(\n      cTokenAddresses\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async getAccountLimits(\n    comptrollerAddress: string,\n    account: string\n  ): Promise<TAccountLimits> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : getAccountLimits\");\n      return {\n        shortfall: BigNumber.from(0),\n        liquidity: BigNumber.from(0),\n        marketsIn: [],\n      };\n    }\n    const rawAccountLimits = await this.compoundLensContract.getAccountLimits(\n      comptrollerAddress,\n      account\n    );\n    const [marketsIn, liquidity, shortfall] = rawAccountLimits;\n\n    return {\n      marketsIn,\n      liquidity,\n      shortfall,\n    };\n  }\n\n  async fetchCompBalanceMetadataExt(\n    compToken: string,\n    comptrollerAddress: string,\n    account: string\n  ): Promise<TCompBalanceMetadataExt> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : fetchCompBalanceMetadataExt\");\n      return {\n        balance: BigNumber.from(0),\n        allocated: BigNumber.from(0),\n        votes: BigNumber.from(0),\n      };\n    }\n\n    console.log(`Fetching comp-balance-metadata-ext for inventive`);\n    console.log({ compToken });\n    console.log({ comptrollerAddress });\n    console.log({ account });\n\n    const rawCompBalanceMetaExt = await this.compoundLensContract.callStatic.getCompBalanceMetadataExt(\n      compToken,\n      comptrollerAddress,\n      account\n    );\n\n    return rawCompBalanceMetaExt;\n  }\n\n  private isInitialized(): boolean {\n    console.log(\n      `Compound lens contract : ${this.compoundLensContract.address}`\n    );\n    return this.compoundLensContract.address !== \"\";\n  }\n\n  private safeAddress() {\n    if (!this.isInitialized) {\n      throw new Error(`Compound lens address not initialized`);\n    }\n  }\n}\n","const CHAIN_ID_LOCALHOST = 1377;\nconst CHAIN_ID_HARDHAT = 31337;\nconst CHAIN_ID_ETHEREUM_ROPSTEN = 3;\nconst CHAIN_ID_FUSE = 122;\n\nexport type TLocalChainIds =\n  | typeof CHAIN_ID_LOCALHOST\n  | typeof CHAIN_ID_HARDHAT;\nexport type TLiveChainIds =\n  | typeof CHAIN_ID_ETHEREUM_ROPSTEN\n  | typeof CHAIN_ID_FUSE;\nexport type TChainIds = TLiveChainIds | TLocalChainIds;\n\nexport const LOCAL_CHAINS: TChainIds[] = [1377, 31337];\nexport const LIVE_CHAINS: TChainIds[] = [\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_FUSE,\n];\n\nexport type TChainConstants = {\n  id: TChainIds;\n  compoundLensAddress: string;\n};\n\nexport const LIVE_CHAIN_CONSTANTS: Record<TLiveChainIds, TChainConstants> = {\n  \"3\": {\n    compoundLensAddress: \"0x2290026fa95CBcD6a567A0f245A2C50A7DcB6Dd2\",\n    id: 3,\n  },\n  \"122\": {\n    compoundLensAddress: \"0x8494e2680159520d515Db4b30135B0eeAc6245C3\",\n    id: 122,\n  },\n};\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  observable,\n  ObservableMap,\n  reaction,\n} from \"mobx\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { PromiEvent, TransactionReceipt } from \"web3-core\";\nimport { JSON_RPC_ERROR_CODES } from \"../constants/ethereumErrorCodes\";\nimport {\n  NATIVE_COIN_SYMBOL_PER_CHAIN,\n  SUPPORTED_TOKENS_PER_CHAIN,\n  SYMBOLS_TO_NAMES,\n} from \"../constants/supportedTokensPerChain\";\nimport {\n  ITokensLensService,\n  TErc20Meta,\n} from \"../services/contractsIntegration/TokensLensService/ITokensLensService\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { ICompoundLensService } from \"../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { IErc20BuilderService } from \"../services/contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { ICTokensBuilderService } from \"../services/contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport ChainAddresses from \"../solidityInterfaces/addresses.json\";\nimport { CompoundLensService } from \"../services/contractsIntegration/CompoundLensService/CompoundLensService\";\nimport {\n  LIVE_CHAIN_CONSTANTS,\n  LIVE_CHAINS,\n  LOCAL_CHAINS,\n  TChainIds,\n  TLiveChainIds,\n} from \"../constants/chainConstants\";\nimport { FUSE_ON_ROPSTEN } from \"../services/lendingNetworksService/lendingNetworksParams\";\n\nexport type TTokenMetaWithBalance = TErc20Meta & {\n  balance: BigNumber;\n  name: string;\n  balanceInUnits: number;\n};\n\nexport type TAssetAmount = {\n  rawAmount: BigNumber;\n  amountInUnits: number;\n};\n\nexport class SystemStore {\n  @observable public contractParametersDoneLoading = false;\n  @observable public contractParametersErrorLoading = false;\n  @observable public doneLoading = false;\n  @observable public errorLoading = false;\n\n  @observable public nativeCoinSymbol = \"ETH\";\n  @observable public compoundLensAddress = \"\";\n\n  // TODO : Move tx's state to a different store\n  @observable\n  public txPending = false;\n  @observable public txHadError = false;\n  @observable public txCanceled = false;\n\n  @computed\n  public get compoundLensServiceInitialized(): boolean {\n    return this.compoundLensAddress !== \"\";\n  }\n\n  @computed\n  public get compoundLensService(): CompoundLensService {\n    if (this.compoundLensServiceInitialized) {\n      return new CompoundLensService(\n        this.compoundLensAddress,\n        this.cryptoWalletIntegrationStore.signerOrProvider\n      );\n    } else {\n      // @ts-ignore : We should always check for 'compoundLensServiceInitialized' before calling\n      return null;\n    }\n  }\n\n  private chainIdChangeReaction: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore\n  ) {\n    this.chainIdChangeReaction = reaction(\n      () => [this.cryptoWalletIntegrationStore.chainId],\n      async ([chainId]) => {\n        this.setDoneLoading(false);\n        await this.reactToConnectedChainChanged(chainId as TChainIds);\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Computed values ****\n\n  // **** Contract interactions ****\n\n  // **** Current address changed ****\n\n  private async reactToConnectedChainChanged(chainId: TChainIds) {\n    console.log(`Chain ID ${chainId}`);\n    // @ts-ignore\n    console.log(`Native coin ${NATIVE_COIN_SYMBOL_PER_CHAIN[chainId]}`);\n\n    // Update compound lens address\n    // DEV_NOTE : This will not cause a re-render, but any call to the service will be to the right address\n    // this.compoundLensServiceInstance.updateCompoundLensAddress(\n    //   this.getChainCompoundLensAddress(chainId)\n    // );\n\n    const chainCompoundLensAddress = this.getChainCompoundLensAddress(chainId);\n\n    this.setCompoundLensAddress(chainCompoundLensAddress);\n\n    // @ts-ignore\n    this.setNativeCoinSymbol(NATIVE_COIN_SYMBOL_PER_CHAIN[chainId] || \"ETH\");\n  }\n\n  // **** Data reading and setting ****\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  private async refreshAccountListeners(accountAddress: string) {\n    this.cancelAllCurrentSubscriptions();\n  }\n\n  private cancelAllCurrentSubscriptions() {}\n\n  private getChainCompoundLensAddress(chainId: TChainIds): string {\n    console.log(`ChainId-lensAddress: ${chainId}`);\n    if (LOCAL_CHAINS.includes(chainId)) {\n      return ChainAddresses.CompoundLens;\n    } else if (LIVE_CHAINS.includes(chainId)) {\n      return LIVE_CHAIN_CONSTANTS[chainId as TLiveChainIds].compoundLensAddress;\n    } else if ((chainId as number) === -1) {\n      // DEV_NOTE : The initial value, not yet initialized.\n      return \"\";\n    } else {\n      console.error(`Unsupported chain id of ${chainId} (${typeof chainId})`);\n      return \"\";\n    }\n  }\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private resetTxIndicators() {\n    this.setTxPending(false);\n    this.setTxHadError(false);\n    this.setTxCanceled(false);\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setTxPending\")\n  private setTxPending(txPending: boolean) {\n    this.txPending = txPending;\n  }\n\n  @action(\"setTxCanceled\")\n  private setTxCanceled(txCanceled: boolean) {\n    this.txCanceled = txCanceled;\n  }\n\n  @action(\"setTxHadError\")\n  private setTxHadError(txHadError: boolean) {\n    this.txHadError = txHadError;\n  }\n\n  @action(\"setNativeCoinSymbol\")\n  private setNativeCoinSymbol(nativeCoinSymbol: string) {\n    console.log(`Native coin symbol ${nativeCoinSymbol}`);\n    this.nativeCoinSymbol = nativeCoinSymbol;\n  }\n\n  @action(\"setCompoundLensAddress\")\n  private setCompoundLensAddress(compoundLensAddress: string) {\n    console.log(`Setting compoundLensAddress ${compoundLensAddress}`);\n    this.compoundLensAddress = compoundLensAddress;\n  }\n}\n","import { configure } from \"mobx\";\nimport { IStores } from \"./stores\";\n\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\n\n// This import ensures mobx batching\n// TODO : Check if still relevant to mobx6\n// import \"mobx-react-lite/batchingForReactDom\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { ILendingNetworksService } from \"../services/lendingNetworksService/ILendingNetworksService\";\nimport { AccountStore } from \"./AccountStore\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { ModalsStore } from \"./ModalsStore\";\nimport { IErc20BuilderService } from \"../services/contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { ICTokensBuilderService } from \"../services/contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport { SystemStore } from \"./SystemStore\";\n\n/**\n * Builds and initializes all of the stores\n */\nexport function getStores(\n  cryptoWalletConnectionService: ICryptoWalletConnectionService,\n  lendingNetworksService: ILendingNetworksService,\n  erc20BuilderService: IErc20BuilderService,\n  cTokensBuilderService: ICTokensBuilderService\n): IStores {\n  // Create stores instances + Hydrate the stores\n  const cryptoWalletIntegrationStore = new CryptoWalletConnectionStore(\n    cryptoWalletConnectionService\n  );\n\n  const systemStore = new SystemStore(cryptoWalletIntegrationStore);\n\n  const lendingNetworksStore = new LendingNetworksStore(\n    cryptoWalletIntegrationStore,\n    systemStore,\n    lendingNetworksService\n  );\n\n  const accountStore = new AccountStore(\n    cryptoWalletIntegrationStore,\n    systemStore,\n    lendingNetworksStore,\n    erc20BuilderService,\n    cTokensBuilderService\n  );\n\n  const stores: IStores = {\n    cryptoWalletIntegrationStore,\n    accountStore,\n    lendingNetworksStore,\n    systemStore,\n    modalsStore: new ModalsStore(),\n  };\n\n  return stores;\n}\n\n// TODO : Check if this is still relevant to mobx6\n/**\n * Configures the mobx library. Should get called at App's initialization.\n */\nexport function configureMobx() {\n  configure({\n    enforceActions: \"observed\",\n  });\n}\n","import { StylesProvider, ThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport { App } from \"./App\";\nimport { baseTheme } from \"./theme/Theme\";\nimport { buildLNServices, buildServices } from \"./services/Services\";\nimport { configureMobx, getStores } from \"./store/storesInitialization\";\nimport { Provider } from \"mobx-react\";\nimport { ZERO_ADDRESS } from \"./constants/constantAddresses\";\n\ninterface IProps {}\n\nconfigureMobx();\n\n// TODO : Move this to a better place\nconst ethereumProvider = (window as any).ethereum;\nconst services = buildServices(ethereumProvider);\nconst lnServices = buildLNServices(ethereumProvider, {\n  unitrollerAddress: ZERO_ADDRESS,\n});\n// process.env.NODE_ENV === \"production\"\n//   ? buildServices(ethereumProvider)\n//   : buildMockServices(ethereumProvider);\nconst stores = getStores(\n  services.cryptoWalletIntegrationService,\n  services.lendingNetworksService,\n  services.erc20ServiceBuilder,\n  services.cTokenServiceBuilder\n);\n\nexport const AppWrapper = React.memo<IProps>((props) => {\n  return (\n    <Provider {...stores} {...services} {...lnServices}>\n      <StylesProvider injectFirst>\n        <ThemeProvider theme={baseTheme}>\n          <App />\n        </ThemeProvider>\n      </StylesProvider>\n    </Provider>\n  );\n});\n","import { ICryptoWalletConnectionService } from \"./cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"./cryptoWalletConnectionService/IEthereumProvider\";\nimport { CryptoWalletConnectionService } from \"./cryptoWalletConnectionService/CryptoWalletConnectionService\";\nimport { ILendingNetworksService } from \"./lendingNetworksService/ILendingNetworksService\";\nimport { LendingNetworksService } from \"./lendingNetworksService/LendingNetworksService\";\nimport { UniswapAnchoredViewService } from \"./contractsIntegration/UniswapAnchoredView/UniswapAnchoredViewService\";\n\nimport contractsAddresses from \"../solidityInterfaces/addresses.json\";\nimport { getSignerOrProvider } from \"../ethereumConnection/ethereumConnection\";\nimport { IComptrollerService } from \"./contractsIntegration/ComptrollerService/IComptrollerService\";\nimport { ComptrollerService } from \"./contractsIntegration/ComptrollerService/ComptrollerService\";\nimport { IErc20BuilderService } from \"./contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { Erc20BuilderService } from \"./contractsIntegration/erc20Service/Erc20BuilderService\";\nimport { ICTokensBuilderService } from \"./contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport { CTokensBuilderService } from \"./contractsIntegration/cTokensService/CTokensBuilderService\";\n\nexport interface IServices {\n  cryptoWalletIntegrationService: ICryptoWalletConnectionService;\n  lendingNetworksService: ILendingNetworksService;\n  // DEV_NOTE : Seems no one is using this service\n  uniswapAnchoredViewService: UniswapAnchoredViewService;\n\n  // Service builders\n  erc20ServiceBuilder: IErc20BuilderService;\n  cTokenServiceBuilder: ICTokensBuilderService;\n}\n\nexport type TLNContractsAddresses = {\n  unitrollerAddress: string;\n};\n\n/**\n * Services that are LN specific and should be refreshed/replaced when switching a LN.\n */\nexport interface ILNServices {\n  comptrollerLiveService: IComptrollerService;\n}\n\n// DEV_NOTE : For simplicity of early stage dev, we assume that we have ethereum provider, if not, we will not initialize the services.\nexport function buildServices(ethereumProvider: IEthereumProvider): IServices {\n  const signerOrProvider = getSignerOrProvider(ethereumProvider);\n  const addresses = getContractsAddresses();\n\n  return {\n    cryptoWalletIntegrationService: new CryptoWalletConnectionService(\n      ethereumProvider\n    ),\n    lendingNetworksService: new LendingNetworksService(),\n    uniswapAnchoredViewService: new UniswapAnchoredViewService(\n      addresses.UniswapAnchoredView,\n      signerOrProvider\n    ),\n\n    // Service builders\n    erc20ServiceBuilder: new Erc20BuilderService(signerOrProvider),\n    cTokenServiceBuilder: new CTokensBuilderService(signerOrProvider),\n  };\n}\n\n// DEV_NOTE : For simplicity of early stage dev, we assume that we have ethereum provider, if not, we will not initialize the services.\nexport function buildLNServices(\n  ethereumProvider: IEthereumProvider,\n  contractsAddresses: TLNContractsAddresses\n): ILNServices {\n  const signerOrProvider = getSignerOrProvider(ethereumProvider);\n\n  return {\n    comptrollerLiveService: new ComptrollerService(\n      contractsAddresses.unitrollerAddress,\n      signerOrProvider\n    ),\n  };\n}\n\n// export function buildMockServices(\n//   ethereumProvider: IEthereumProvider\n// ): IServices {\n//   const signerOrProvider = getSignerOrProvider(ethereumProvider);\n//   const addresses = getContractsAddresses();\n//\n//   return {\n//     cryptoWalletIntegrationService: new CryptoWalletConnectionService(\n//       ethereumProvider\n//     ),\n//     lendingNetworksService: new LendingNetworksServiceMock(),\n//     uniswapAnchoredViewService: new UniswapAnchoredViewService(\n//       addresses.UniswapAnchoredView,\n//       signerOrProvider\n//     ),\n//     tokensLensService: new\n//   };\n// }\n\n// TODO : Add addresses by network\nexport function getContractsAddresses() {\n  return contractsAddresses;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AppWrapper } from \"./AppWrapper\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}